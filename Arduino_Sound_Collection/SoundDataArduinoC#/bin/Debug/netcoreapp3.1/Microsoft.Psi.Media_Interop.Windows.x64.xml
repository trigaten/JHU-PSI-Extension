<?xml version="1.0"?>
<doc>
    <assembly>
        "Microsoft.Psi.Media_Interop.Windows.x64"
    </assembly>
    <members>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.get_AllDevices">
            <summary>
 Gets a list of all available capture devices
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.CaptureSample(Microsoft.Psi.Media_Interop.ReadSampleDelegate)">
            <summary>
 Sets up the capture pipeline if required and sets up async sample capture
</summary>
            <param name="handler">Handler to call after completing read sample</param>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.set_CurrentFormat(Microsoft.Psi.Media_Interop.CaptureFormat)">
            <summary>
 Sets the capture format currently used by the device.
</summary>
            <param name="value">Desired capture format</param>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.get_CurrentFormat">
            <summary>
 Gets the capture format currently used by the device.
 This is not necessarily one of the formats in the supported formats list.
</summary>
            <returns>Current capture format</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.GetProperty(Microsoft.Psi.Media_Interop.ManagedCameraControlProperty,System.Int32@,System.Int32@)">
            <summary>
 Sets the value for the specified property with the given flags
</summary>
            <param name="prop">Property to be set</param>
            <param name="nValue">Value of the property</param>
            <param name="flags">Flags corresponding to the property</param>
            <returns>True if the property was set, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.SetProperty(Microsoft.Psi.Media_Interop.ManagedCameraControlProperty,System.Int32,Microsoft.Psi.Media_Interop.ManagedCameraControlPropertyFlags)">
            <summary>
 Sets the value for the specified property with the given flags
</summary>
            <param name="prop">Property to be set</param>
            <param name="nValue">Value of the property</param>
            <param name="flags">Flags corresponding to the property</param>
            <returns>True if the property was set, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.GetProperty(Microsoft.Psi.Media_Interop.VideoProperty,System.Int32@,System.Int32@)">
            <summary>
 Gets the value for the specified property with the given flags
</summary>
            <param name="prop">Property to be set</param>
            <param name="nValue">Value of the property</param>
            <param name="flags">Flags corresponding to the property</param>
            <returns>True if the property was set, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.SetProperty(Microsoft.Psi.Media_Interop.VideoProperty,System.Int32,Microsoft.Psi.Media_Interop.VideoPropertyFlags)">
            <summary>
 Sets the value for the specified property with the given flags
</summary>
            <param name="prop">Property to be set</param>
            <param name="nValue">Value of the property</param>
            <param name="flags">Flags corresponding to the property</param>
            <returns>True if the property was set, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.get_ManagedCameraControlProperties">
            <summary>
 Gets the list of camera control property values supported
</summary>
            <returns>List of supported camera control property values</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.get_VideoProperties">
            <summary>
 Gets the list of video property values supported
</summary>
            <returns>List of supported video property values</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.get_Formats">
            <summary>
 Gets the list of capture formats supported
</summary>
            <returns>List of supported capture formats</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.Shutdown">
            <summary>
 Detaches from the underlying source reader device.
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.ReadSampleThunk(System.IntPtr,System.Int32,System.Int64)">
            <summary>
Thunks from Managed to unmanaged code
</summary>
            <param name="data"> Image data as RGB24 byte array </param>
            <param name="cbLength"> Length of Image data in bytes </param>
            <param name="timestamp"> Timestamp of sample </param>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.Attach(System.Boolean)">
            <summary>
 Attaches to the underlying device.
</summary>
            <returns>True if succesfully attached, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.GetActivate(System.String,System.Boolean)">
            <summary>
Uses the symbolic link or device path for a capture device to create an  activate object.
</summary>
            <param name="symbolicLink"> Symbolic Link </param>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.InitializeFromActivate(IMFActivate*,System.String)">
            <summary>
    Initializes the friendly name and symbolic link of the device from the activate object
</summary>
            <param name="pActivate">  The activate object representing the device </param>
            <param name="name">  Friendly name </param>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.InitilaizePerformanceCounterFrequency">
            <summary>
Initializes the performance counter frequency
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.Dispose">
            <summary>
dtor. Always shut down the capture device.
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.#ctor(System.String,System.String,System.Boolean)">
            <summary>
 ctor that initializes using the symbolic link for the device. This allows
 construction without going through the enumerator.
</summary>
            <param name="name">The name to use for the device</param>
            <param name="symbolicLink">The device path of the capture device</param>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.#ctor(IMFActivate*)">
            <summary>
 ctor that initializes using an IMFActivate for the capture device.
 This is called when the enumerator creates devices.
</summary>
            <param name="pActivate">The IMFActivate to create a device from</param>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.RGBCameraCollection.GetEnumerator">
            <summary>
GetEnumerator for IEnumerator&lt;T&gt;.
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.RGBCameraCollection.OldGetEnumerator">
            <summary>
GetEnumerator for the old IEnumerator before generics.
</summary>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.RGBCameraCollection">
            <summary>
RGB Camera collection.
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaFoundationUtility.GetStringProperty(IMFAttributes*,_GUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
 This looks up a specified string attribute on an attribute object
</summary>
            <param name="pAttributes">The attribute store to read from</param>
            <param name="key">The attribute key to look up</param>
            <returns>The string representation of the attribute. </returns>
@throws KeyNotFoundException - no attribute was found
</member>
        <member name="M:Microsoft.Psi.Media_Interop.RGBCameraEnumerator.get_Current">
            <summary>
 Instantiates a capture device for the currently selected device
</summary>
            <returns>An instance of the RGBCamera class.</returns>
            <exceptions> InvalidOperationException - thrown if the cursor is out of bounds </exceptions>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.RGBCameraEnumerator.Reset">
            <summary>
 Resets the cursor to before the first element.
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.RGBCameraEnumerator.MoveNext">
            <summary>
 Advances the cursor through the collection.
</summary>
            <returns> True if the cursor is still within the collection. </returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.RGBCameraEnumerator.Dispose">
            <summary>
 dtor that releases and frees the device activate instances and frees the
 storage used.
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.RGBCameraEnumerator.#ctor">
            <summary>
 ctor that initializes the enumerator by getting the list of source devices
 that are registered as video capture devices
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.VideoFormat.FromName(System.String)">
            <summary>
Creates a video format from the given fourcc name
</summary>
            <param name="name">The fourcc name for which video format needs to be constructed</param>
            <returns>video format from the given fourcc name</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.VideoFormat.FromGuid(System.Guid)">
            <summary>
Creates a video format from the given guid
</summary>
            <param name="guid">The guid for which video format needs to be constructed</param>
            <returns>video format from the given guid</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.VideoFormat.GetHashCode">
            <summary>
Returns the hash code corresponding to the video format.
</summary>
            <returns>Hashcode</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.VideoFormat.op_Inequality(Microsoft.Psi.Media_Interop.VideoFormat,Microsoft.Psi.Media_Interop.VideoFormat)">
            <summary>
Returns true if left is not equal to right, false otherwise
</summary>
            <param name="left">The first VideoFormat to be compared</param>
            <param name="right">The second VideoFormat to be compared</param>
            <returns>True if not equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.VideoFormat.op_Equality(Microsoft.Psi.Media_Interop.VideoFormat,Microsoft.Psi.Media_Interop.VideoFormat)">
            <summary>
Returns true if left is equal to right, false otherwise
</summary>
            <param name="left">The first VideoFormat to be compared</param>
            <param name="right">The second VideoFormat to be compared</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.VideoFormat.Equals(Microsoft.Psi.Media_Interop.VideoFormat)">
            <summary>
Returns true if obj is equal to this, false otherwise
</summary>
            <param name="other">The VideoFormat to be compared</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.VideoFormat.Equals(System.Object)">
            <summary>
Returns true if obj is equal to this, false otherwise
</summary>
            <param name="obj">The object to the compared</param>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.CaptureFormat.FromMediaType(IMFMediaType*)">
            <summary>
Create the Capture Format from the given media type.
</summary>
            <param name="pMediaType"> The media type for the capture format</param>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.RGBCameraEnumerator.Current">
            <summary>
Current camera for IEnumerator&lt;T&gt;.
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.RGBCameraEnumerator.OldCurrent">
            <summary>
Current camera for the old IEnumerator before generics.
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.RGBCameraEnumerator.m_nIndex">
            <summary>
Index of the current camera device.
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.RGBCameraEnumerator.m_nCount">
            <summary>
Count of camera devices.
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.RGBCameraEnumerator._ppDevices">
            <summary>
The list of camera devices.
</summary>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.RGBCameraEnumerator">
            <summary>
RGB Camera Enumerator which enumerates through all the camera devices.
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.MediaCaptureDevice.CurrentFormat">
            <summary>
 Gets or sets the capture format currently used by the device.
</summary>
            <returns>Current capture format</returns>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.MediaCaptureDevice.ManagedCameraControlProperties">
            <summary>
 Gets the list of camera control property values supported
</summary>
            <returns>List of supported camera control property values</returns>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.MediaCaptureDevice.VideoProperties">
            <summary>
 Gets the list of video property values supported
</summary>
            <returns>List of supported video property values</returns>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.MediaCaptureDevice.Formats">
            <summary>
 Gets the list of capture formats supported
</summary>
            <returns>List of supported capture formats</returns>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.MediaCaptureDevice.fAttached">
            <summary>
 Gets a boolean indicating if the device is currently attached.
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.MediaCaptureDevice.SymbolicLink">
            <summary>
 Gets the unique identifier for this device.
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.MediaCaptureDevice.FriendlyName">
            <summary>
 Gets the friendly name of this device
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.MediaCaptureDevice.AllDevices">
            <summary>
 Gets a list of all available capture devices
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.Uninitialize">
            <summary>
 This is used to uninitialize the MediaFoundation library and 
 should be called once at application shutdown.
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaCaptureDevice.Initialize">
            <summary>
 This is used to initialize the MediaFoundation library and 
 should be called once before any use of the a MediaFoundation
 capability.
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.MediaCaptureDevice.m_readSampleDelegateInternal">
            <summary>
Internal pinned managed Handler for read sample completion
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.MediaCaptureDevice.m_readSampleHandlerHandle">
            <summary>
GC Handle for read sample completion
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.MediaCaptureDevice.m_readSampleCallback">
            <summary>
Handler for read sample completion
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.MediaCaptureDevice.m_desiredRateDenominator">
            <summary>
The requested output frame rate denominator
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.MediaCaptureDevice.m_desiredRateNumerator">
            <summary>
The requested output frame rate numerator
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.MediaCaptureDevice.m_performanceCounterFrequency">
            <summary>
Frequency of the performance counter
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.MediaCaptureDevice.m_lastFrameTime">
            <summary>
The time the last frame arrived
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.MediaCaptureDevice.m_callback">
            <summary>
The source reader callback which wraps the MF Source Reader
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.MediaCaptureDevice.m_pActivate">
            <summary>
The underlying MF Activate
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.MediaCaptureDevice._pMediaSource">
            <summary>
The underlying MF Source
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.MediaCaptureDevice.m_pSourceReader">
            <summary>
The underlying MF Source Reader
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.MediaCaptureDevice.m_symbolicLink">
            <summary>
Unique identifier for this device
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.MediaCaptureDevice.m_name">
            <summary>
Name of the device
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.MediaCaptureDevice.MillisecondsPerSecond">
            <summary>
How many milliseconds in a second
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.MediaCaptureDevice.m_useSharedMode">
            <summary>
Is capture device being used in a shared mode?
</summary>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.MediaCaptureDevice">
            <summary>
Class used to represent an RGB camera capture device available from Media Foundation.
<example>
To use the class,
@code
  // initialize and connect to camera
  MediaCaptureDevice.Initialize()  // starts Media Foundation
  foreach (var device in MediaCaptureDevice.AllDevices)   // cycle through all the available devices
           {
               if (device.FriendlyName.Equals("mydevicename"))   // check the device's friendly name
               if (!device.Attach())   return;                   // attach to device, return if unable to 
           }

   // grab image, which calls OnImageAvailable	
  ReadSampleDelegate^ myCallback;
   myCallback = gcnew ReadSampleDelegate(OnImageAvailable);
   rgbCamera-&gt;CaptureSample(myCallback);

  // where the callback is given by
  void OnImageAvailable(System::IntPtr buffer, int cbLength) {}
@endcode
</example></summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MP4Writer.Shutdown">
            <summary>
Called to shutdown Media Foundation
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MP4Writer.Startup">
            <summary>
Called to initialize Media Foundation
</summary>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.MP4Writer">
            <summary>
Class for recording video to an MPEG file via Media Foundation
</summary>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.MP4WriterConfiguration">
            <summary>
Class for configuring our MPEG4 writer
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.MediaFoundationUtility.ThrowExceptionForHR(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Throws exception corresponding to the hr value
</summary>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.MediaFoundationUtility">
            <summary>
Utility class which converts HRESULTS to exceptions.
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.Resources.HwMftFailedStartStreaming">
            <summary>
Gets the HwMftFailedStartStreaming resource
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.Resources.AttributeNotFound">
            <summary>
Gets the AttributeNotFound resource
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.Resources.InvalidMediaType">
            <summary>
Gets the InvalidMediaType resource
</summary>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.Resources">
            <summary>
Resources for camera interop
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.ManagedCameraControlPropertyValue.m_Flags">
            <summary>
Camera control property flags
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.ManagedCameraControlPropertyValue.nDefault">
            <summary>
Default value of the camera control property
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.ManagedCameraControlPropertyValue.nSteppingDelta">
            <summary>
Steppping delta of the camera control property
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.ManagedCameraControlPropertyValue.nMaximum">
            <summary>
Maximum of the camera control property
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.ManagedCameraControlPropertyValue.nMinimum">
            <summary>
Minimum of the camera control property
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.ManagedCameraControlPropertyValue.nValue">
            <summary>
Value of the camera control property
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.ManagedCameraControlPropertyValue.m_Property">
            <summary>
Camera Control Property.
</summary>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.ManagedCameraControlPropertyValue">
            <summary>
Camera Control Property Value Structure.
</summary>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.ManagedCameraControlPropertyFlags">
            <summary>
Camera Control Property flags enumeration
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlPropertyFlags.Manual">
            <summary>
Manual settings
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlPropertyFlags.Auto">
            <summary>
Auto settings
</summary>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty">
            <summary>
Managed Camera Control Properties enumeration
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.AutoExposurePriority">
            <summary>
AutoExposurePriority RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.FocalLength">
            <summary>
FocalLength R O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.PanTiltRelative">
            <summary>
PanTiltRelative RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.FocusRelative">
            <summary>
FocusRelative RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.IrisRelative">
            <summary>
IrisRelative RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.ExposureRelative">
            <summary>
ExposureRelative RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.ZoomRelative">
            <summary>
ZoomRelative RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.RollRelative">
            <summary>
RollRelative RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.TiltRelative">
            <summary>
TiltRelative RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.PanRelative">
            <summary>
PanRelative RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.PanTilt">
            <summary>
PanTilt RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.Privacy">
            <summary>
Privacy RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.ScanMode">
            <summary>
ScanMode RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.Focus">
            <summary>
Focus RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.Iris">
            <summary>
Iris RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.Exposure">
            <summary>
Exposure RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.Zoom">
            <summary>
Zoom RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.Roll">
            <summary>
Roll RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.Tilt">
            <summary>
Tilt RW O
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.ManagedCameraControlProperty.Pan">
            <summary>
Pan RW O
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.VideoPropertyValue.m_Flags">
            <summary>
Video property flags
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.VideoPropertyValue.nDefault">
            <summary>
Default value of the video property
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.VideoPropertyValue.nSteppingDelta">
            <summary>
Stepping delta of the video property
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.VideoPropertyValue.nMaximum">
            <summary>
Maximum of the video property
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.VideoPropertyValue.nMinimum">
            <summary>
Minimum of the video property
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.VideoPropertyValue.nValue">
            <summary>
Value of the video property
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.VideoPropertyValue.m_Property">
            <summary>
Video Property.
</summary>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.VideoPropertyValue">
            <summary>
Video Property Value Structure.
</summary>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.VideoPropertyFlags">
            <summary>
Video Property flags enumeration
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.VideoPropertyFlags.Manual">
            <summary>
Manual settings
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.VideoPropertyFlags.Auto">
            <summary>
Auto settings
</summary>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.VideoProperty">
            <summary>
Video Properties enumeration
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.VideoProperty.Gain">
            <summary>
Gain
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.VideoProperty.BacklightCompensation">
            <summary>
Backlight compensation
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.VideoProperty.WhiteBalance">
            <summary>
While Balance
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.VideoProperty.ColorEnable">
            <summary>
Color Enable
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.VideoProperty.Gamma">
            <summary>
Gamma
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.VideoProperty.Sharpness">
            <summary>
Sharpness
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.VideoProperty.Saturation">
            <summary>
Saturation
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.VideoProperty.Hue">
            <summary>
Hue
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.VideoProperty.Contrast">
            <summary>
Contrast
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.VideoProperty.Brightness">
            <summary>
Brightness
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.CaptureFormat.subType">
            <summary>
Gets or sets video capture format.
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.CaptureFormat.nFrameRateDenominator">
            <summary>
Gets or sets the frame rate denominator in seconds.
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.CaptureFormat.nFrameRateNumerator">
            <summary>
Gets or sets the frame rate numerator in frames.
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.CaptureFormat.nHeight">
            <summary>
Gets or sets the pixel height of the format.
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.CaptureFormat.nWidth">
            <summary>
Gets or sets the pixel width of the format.
</summary>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.CaptureFormat">
            <summary>
Struct used to represent a capture format supported by a capture device.
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.VideoFormats.VideoFormatMJPG">
            <summary>
Gets a VideoFormat instance for the GUID MFVideoFormat_MJPG
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.VideoFormats.VideoFormatYUY2">
            <summary>
Gets a VideoFormat instance for the GUID MFVideoFormat_YUY2
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.VideoFormat.Name">
            <summary>
Gets the FourCC Name
</summary>
        </member>
        <member name="P:Microsoft.Psi.Media_Interop.VideoFormat.Guid">
            <summary>
Gets the Guid
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.VideoFormat.m_name">
            <summary>
FourCC of media type
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.VideoFormat.m_guid">
            <summary>
Guid of media type
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.VideoFormat.#ctor(System.Guid,System.String)">
            <summary>
Initializes a new instance of the <c>VideoFormat</c> class.
</summary>
            <param name="guid">GUID of media type</param>
            <param name="name">FourCC of media type</param>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.VideoFormat">
            <summary>
Video format which stores associates between guids and names
</summary>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.VideoFormats">
            <summary>
Forward declaration for video formats.
</summary>
            <summary>
The video formats supported
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.SourceReaderCallback.CaptureSample(=FUNC:System.Void(System.Byte*,System.Int32,System.Int64))">
            <summary>
 Sets up the capture pipeline if required and sets up async sample capture
</summary>
            <param name="handler">Handler to call after completing read sample</param>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.SourceReaderCallback.OnReadSample(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int64,IMFSample*)">
            <summary>
Called when the IMFSourceReader::ReadSample method completes
</summary>
            <param name="hrStatus">
The status code. 
If an error occurred while processing the next smple, this parameter contains the error code 
</param>
            <param name="dwStreamIndex">The zero-based index of the stream that delivered the sample</param>
            <param name="dwStreamFlags">A bitwise OR of zero or more flags from the MF_SOURCE_READER_FLAG enumeration</param>
            <param name="llTimestamp">
The time stamp of the sample, or the time of the stream event indicated in dwStreamFlags. 
The time is given in 100-nanosecond units
</param>
            <param name="pSample">A pointer to the IMFSample interface of a media sample. This parameter might be NULL.</param>
            <returns> S_OK if succeeded. Error code if not.</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.SourceReaderCallback.QueryInterface(_GUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void**)">
            <summary>
Retrieves pointers to the supported interfaces on an object
</summary>
            <param name="ppv">The reference to interface to be retrieved</param>
            <returns> S_OK if succeeded. Error code if not.</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.SourceReaderCallback.Release">
            <summary>
Decrements the reference count for an interface on an object
</summary>
            <returns> The method returns the new reference count.</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.SourceReaderCallback.AddRef">
            <remarks>IUnknown methods</remarks>
            <summary>
Increments the reference count for an interface on an object
</summary>
            <returns> The method returns the new reference count.</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.SourceReaderCallback.Dispose">
            <summary>
Destructor is private. Caller should call Release.
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.SourceReaderCallback.#ctor">
            <summary>
Constructor is private. Use static CreateInstance method to instantiate.
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.SourceReaderCallback.CreateInstance(Microsoft.Psi.Media_Interop.SourceReaderCallback**)">
            <summary>
Creates an instance of the capture device which implements <c> IMFSourceReaderCallback </c></summary>
            <param name="ppPlayer">The reference to the source reader to the created</param>
            <returns> S_OK if succeeded. Error code if not.</returns>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.SourceReaderCallback.m_pRgbBuffer">
            <summary>
Buffer for YUY2 -&gt; RGB24 conversion
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.SourceReaderCallback.m_readSampleHandler">
            <summary>
Callback to call to handle read sample completion.
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.SourceReaderCallback.m_height">
            <summary>
Height in pixels
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.SourceReaderCallback.m_width">
            <summary>
Width in pixels
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.SourceReaderCallback.m_pReader">
            <summary>
MF Source reader which is wrapped by this class
</summary>
        </member>
        <member name="F:Microsoft.Psi.Media_Interop.SourceReaderCallback.m_lRefCount">
            <summary>
Reference count.
</summary>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.SourceReaderCallback.SetSourceReader(IMFSourceReader*)">
            <summary>
Sets the source reader
</summary>
            <param name="pReader">The MF source reader being wrapped by this class</param>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.SourceReaderCallback.SetFormat(System.UInt64,System.UInt64)">
            <summary>
Sets the video format.
</summary>
            <param name="width">Width in pixels </param>
            <param name="height">Height in pixels </param>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.SourceReaderCallback.OnFlush(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Called when the IMFSourceReader::Flush method completes
</summary>
            <param name="dwStreamIndex">
For stream events, the value is the zero-based index of the stream that sent the event. 
For source events, the value is MF_SOURCE_READER_MEDIASOURCE
</param>
            <returns> S_OK if succeeded. Error code if not.</returns>
        </member>
        <member name="M:Microsoft.Psi.Media_Interop.SourceReaderCallback.OnEvent(System.UInt32!System.Runtime.CompilerServices.IsLong,IMFMediaEvent*)">
            <summary>
Called when the source reader receives certain events from the media source
</summary>
            <param name="dwStreamIndex">
For stream events, the value is the zero-based index of the stream that sent the event. 
For source events, the value is MF_SOURCE_READER_MEDIASOURCE
</param>
            <param name="pEvent">A pointer to the IMFMediaEvent interface of the event </param>
            <returns> S_OK if succeeded. Error code if not.</returns>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.SourceReaderCallback">
            <summary>
Class used to represent a capture device which can receive asynchronous notifications.
</summary>
        </member>
        <member name="D:Microsoft.Psi.Media_Interop.ReadSampleHandlerForDevice">
            <summary>
CABI for read sample handler.
</summary>
            <param name="data"> Image data as RGB24 byte array </param>
            <param name="cbLength"> Length of Image data in bytes </param>
            <param name="timestamp"> Sample timestamp </param>
        </member>
        <member name="T:Microsoft.Psi.Media_Interop.ReadSampleDelegate">
            <summary>
Read sample delegate which is called back for each image.
</summary>
            <param name="data"> Image data as RGB24 byte array </param>
            <param name="cbLength"> Length of Image data in bytes </param>
            <param name="timestamp"> Sample timestamp </param>
        </member>
    </members>
</doc>