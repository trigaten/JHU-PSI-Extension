<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Psi</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Psi.Arrays.DiscreteIndexDefinition">
            <summary>
            Represents the set of discrete values an index can take.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Arrays.DiscreteIndexDefinition.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Arrays.DiscreteIndexDefinition"/> class.
            </summary>
            <param name="values">The set of discrete values an index of this kind can take.</param>
        </member>
        <member name="M:Microsoft.Psi.Arrays.DiscreteIndexDefinition.#ctor(System.Int32,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Arrays.DiscreteIndexDefinition"/> class.
            </summary>
            <param name="elementStride">The spacing between consecutive values of this index definition.</param>
            <param name="values">The set of discrete values an index of this kind can take.</param>
        </member>
        <member name="P:Microsoft.Psi.Arrays.DiscreteIndexDefinition.Values">
            <summary>
            Gets the set of possible values an index of this type can take.
            These values need to be multiplied by <see cref="P:Microsoft.Psi.Arrays.IndexDefinition.ElementStride"/> when computing absolute values.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.DiscreteIndexDefinition.Ranges">
            <summary>
            Gets he set of possible values an index can take, expressed as ranges.
            These values need to be multiplied by <see cref="P:Microsoft.Psi.Arrays.IndexDefinition.ElementStride"/> when computing absolute ranges.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.DiscreteIndexDefinition.Item(System.Int32)">
            <summary>
            Gets the domain-relative value of the specified index value.
            Example: if the index definition consists of a set of values {128, 256, 1024}, then index[1] == 256.
            Note: the returned value needs to be multiplied by <see cref="P:Microsoft.Psi.Arrays.IndexDefinition.ElementStride"/> to obtain an absolute value.
            </summary>
            <param name="index">The index value to use.</param>
            <returns>The domain-relative value.</returns>
        </member>
        <member name="M:Microsoft.Psi.Arrays.DiscreteIndexDefinition.Slice(Microsoft.Psi.Arrays.Range)">
            <summary>
            Takes a subset of the current index definition, expressed as a relative range within the [0, Count-1] range.
            </summary>
            <param name="subRange">The range of relative index values to take. Must be a subset of [0, Count-1].</param>
            <returns>An index definition for the specified range.</returns>
        </member>
        <member name="M:Microsoft.Psi.Arrays.DiscreteIndexDefinition.Take(System.Int32[])">
            <summary>
            Takes a subset of the current index definition, expressed as a discrete set of relative values in [0, Count-1] range.
            </summary>
            <param name="valuesToKeep">The set of relative index values to take. The values must be in the [0, Count-1] range.</param>
            <returns>An index definition for the specified range.</returns>
        </member>
        <member name="M:Microsoft.Psi.Arrays.DiscreteIndexDefinition.TryReduce(Microsoft.Psi.Arrays.IndexDefinition,Microsoft.Psi.Arrays.IndexDefinition@)">
            <summary>
            Returns false. DiscreteIndexDefinition instances cannot reduce.
            </summary>
            <param name="subdimension">A subdimension of the current index.</param>
            <param name="combinedDefinition">Always null.</param>
            <returns>Always false.</returns>
        </member>
        <member name="T:Microsoft.Psi.Arrays.IndexDefinition">
            <summary>
            Base class for a single-dimensional index definition.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Arrays.IndexDefinition.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Arrays.IndexDefinition"/> class.
            </summary>
            <param name="count">The count of possible values for an index.</param>.
            <param name="elementStride">The spacing between consecutive index values.</param>
        </member>
        <member name="P:Microsoft.Psi.Arrays.IndexDefinition.Count">
            <summary>
            Gets the count of possible values of the index.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.IndexDefinition.ElementStride">
            <summary>
            Gets the spacing between consecutive index values. This value is needed when converting an index value to an absolute index value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.IndexDefinition.Values">
            <summary>
            Gets the set of possible values an index of this type can take.
            These values need to be multiplied by <see cref="P:Microsoft.Psi.Arrays.IndexDefinition.ElementStride"/> when computing absolute values.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.IndexDefinition.Ranges">
            <summary>
            Gets the set of possible values an index can take, expressed as ranges.
            These values need to be multiplied by <see cref="P:Microsoft.Psi.Arrays.IndexDefinition.ElementStride"/> when computing absolute ranges.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.IndexDefinition.Item(System.Int32)">
            <summary>
            Gets the domain-relative value of the specified index value.
            Example: if the index definition consists of a set of values {128, 256, 1024}, then index[1] == 256.
            Note: the returned value needs to be multiplied by <see cref="P:Microsoft.Psi.Arrays.IndexDefinition.ElementStride"/> to obtain an absolute value.
            </summary>
            <param name="index">The index value to use.</param>
            <returns>The domain-relative value.</returns>
        </member>
        <member name="M:Microsoft.Psi.Arrays.IndexDefinition.Slice(Microsoft.Psi.Arrays.Range)">
            <summary>
            Takes a subset of the current index definition, expressed as a relative range within the [0, Count-1] range.
            </summary>
            <param name="subRange">The range of relative index values to take. Must be a subset of [0, Count-1].</param>
            <returns>An index definition for the specified range.</returns>
        </member>
        <member name="M:Microsoft.Psi.Arrays.IndexDefinition.Take(System.Int32[])">
            <summary>
            Takes a subset of the current index definition, expressed as a discrete set of relative values in [0, Count-1] range.
            </summary>
            <param name="values">The set of relative index values to take. The values must be in the [0, Count-1] range.</param>
            <returns>An index definition for the specified range.</returns>
        </member>
        <member name="M:Microsoft.Psi.Arrays.IndexDefinition.Slice(System.Int32,System.Int32)">
            <summary>
            Takes a subset of the current index definition, expressed as a relative range within the [0, Count-1] range.
            </summary>
            <param name="start">The start of the range of relative index values to take. Must be a in [0, Count-1].</param>
            <param name="end">The end of the range of relative index values to take. Must be a in [0, Count-1].</param>
            <returns>An index definition for the specified range.</returns>
        </member>
        <member name="M:Microsoft.Psi.Arrays.IndexDefinition.Merge(Microsoft.Psi.Arrays.IndexDefinition)">
            <summary>
            Merges two index definitions into one discontiguous index. The two are assumed to belong to the same dimension.
            </summary>
            <param name="other">The other definition.</param>
            <returns>A combined definition.</returns>
        </member>
        <member name="M:Microsoft.Psi.Arrays.IndexDefinition.TryReduce(Microsoft.Psi.Arrays.IndexDefinition,Microsoft.Psi.Arrays.IndexDefinition@)">
            <summary>
            Attempts to combine this index definition with a subdimension definition.
            This is an optimization for range indexes, see <see cref="M:Microsoft.Psi.Arrays.RangeIndexDefinition.TryReduce(Microsoft.Psi.Arrays.IndexDefinition,Microsoft.Psi.Arrays.IndexDefinition@)"/>.
            </summary>
            <param name="subdimension">A subdimension of the current index.</param>
            <param name="combinedDefinition">The resulting combined definition, if any.</param>
            <returns>True if the two dimensions can be combined, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Psi.Arrays.IIndexer">
            <summary>
            Common interface for multi-dimensional indexers.
            The interface contract is needed by NdArray, but might not be optimal from a user standpoint.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Arrays.IIndexer.Slice(Microsoft.Psi.Arrays.Range[])">
            <summary>
            Takes a rectangular slice of the possible values of this indexer.
            </summary>
            <param name="ranges">The set of restrictions to apply to each dimension.</param>
            <returns>A rectangular slice of the current index space.</returns>
        </member>
        <member name="T:Microsoft.Psi.Arrays.Indexer">
            <summary>
            Base class for multi-dimensional indexers.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Arrays.Indexer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Arrays.Indexer"/> class.
            </summary>
            <param name="count">The count of distinct possible index values.</param>
        </member>
        <member name="P:Microsoft.Psi.Arrays.Indexer.Count">
            <summary>
            Gets the count of distinct possible index values.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.Indexer.Values">
            <summary>
            Gets the absolute index values.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.Indexer.Ranges">
            <summary>
            Gets the absolute index values, expressed as contiguous ranges.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Arrays.Indexer2d">
            <summary>
            Represents a 2d index domain.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Arrays.Indexer2d.#ctor(Microsoft.Psi.Arrays.IndexDefinition,Microsoft.Psi.Arrays.IndexDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Arrays.Indexer2d"/> class.
            </summary>
            <param name="rows">The row definition (most significant dimension).</param>
            <param name="columns">The column definition (least significant dimension).</param>
        </member>
        <member name="M:Microsoft.Psi.Arrays.Indexer2d.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Arrays.Indexer2d"/> class.
            </summary>
            <param name="rows">The count of rows (most significant dimension).</param>
            <param name="columns">The count of columns (least significant dimension).</param>
        </member>
        <member name="M:Microsoft.Psi.Arrays.Indexer2d.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Arrays.Indexer2d"/> class.
            </summary>
            <param name="rows">The count of rows (most significant dimension).</param>
            <param name="columns">The count of columns (least significant dimension).</param>
            <param name="stride">The spacing between rows. Must be greater than the column count.</param>
        </member>
        <member name="P:Microsoft.Psi.Arrays.Indexer2d.Ranges">
            <summary>
            Gets the set of contiguous ranges of absolute values in this index domain.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.Indexer2d.Values">
            <summary>
            Gets the absolute values over the index domain.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.Indexer2d.Item(System.Int32,System.Int32)">
            <summary>
            Returns the absolute value of the index given the row and column values.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The absolute value, computed as row *stride + column.</returns>
        </member>
        <member name="M:Microsoft.Psi.Arrays.Indexer2d.Slice(Microsoft.Psi.Arrays.Range,Microsoft.Psi.Arrays.Range)">
            <summary>
            Creates an indexer based on a rectangular slice of the index domain.
            </summary>
            <param name="rowRange">The set of rows to include.</param>
            <param name="columnRange">The set of columns to include.</param>
            <returns>A new indexer over the specified rectangular slice.</returns>
        </member>
        <member name="M:Microsoft.Psi.Arrays.Indexer2d.Microsoft#Psi#Arrays#IIndexer#Slice(Microsoft.Psi.Arrays.Range[])">
            <summary>
            Creates an indexer based on a rectangular slice of the index domain.
            </summary>
            <param name="ranges">The row and column ranges to include.</param>
            <returns>A new indexer over the specified rectangular slice.</returns>
        </member>
        <member name="T:Microsoft.Psi.Arrays.IndexerNd">
            <summary>
            Represents an n-dimensional index domain.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Arrays.IndexerNd.#ctor(Microsoft.Psi.Arrays.IndexDefinition[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Arrays.IndexerNd"/> class.
            </summary>
            <param name="dimensions">The index dimensions, from most significant to least significant.</param>
        </member>
        <member name="M:Microsoft.Psi.Arrays.IndexerNd.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Arrays.IndexerNd"/> class.
            </summary>
            <param name="dimensions">The index dimensions, from most significant to least significant.</param>
        </member>
        <member name="P:Microsoft.Psi.Arrays.IndexerNd.Ranges">
            <summary>
            Gets the set of contiguous ranges of absolute values in this index domain.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.IndexerNd.Values">
            <summary>
            Gets the absolute values over the index domain.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.IndexerNd.Item(System.Int32[])">
            <summary>
            Returns the absolute value of the index given its components in each dimension.
            </summary>
            <param name="indices">Index components in each dimension.</param>
        </member>
        <member name="M:Microsoft.Psi.Arrays.IndexerNd.Slice(Microsoft.Psi.Arrays.Range[])">
            <summary>
            Creates an indexer based on a rectangular slice of the index domain.
            </summary>
            <param name="ranges">The slice in each dimension.</param>
            <returns>A new indexer over the specified rectangular slice.</returns>
        </member>
        <member name="T:Microsoft.Psi.Arrays.Range">
            <summary>
            Defines an inclusive range of int values.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Arrays.Range.Empty">
            <summary>
            An empty range.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Arrays.Range.All">
            <summary>
            An all-inclusive range. Useful when slicing, to keep a dimension unchanged.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Arrays.Range.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Arrays.Range"/> struct.
            </summary>
            <param name="start">The first value in the range.</param>
            <param name="end">The last value in the range.</param>
        </member>
        <member name="P:Microsoft.Psi.Arrays.Range.Start">
            <summary>
            Gets the first value in the range.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.Range.End">
            <summary>
            Gets the last value in the range.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.Range.IsIncreasing">
            <summary>
            Gets a value indicating whether this range is in increasing (true) or decreasing (false) order.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.Range.IsSingleValued">
            <summary>
            Gets a value indicating whether the range consists of a single value or not. Same as Size == 0;.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.Range.Size">
            <summary>
            Gets the size of the range, computed as Math.Abs(end-start) + 1.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Arrays.Range.op_Implicit(System.ValueTuple{System.Int32,System.Int32})~Microsoft.Psi.Arrays.Range">
            <summary>
            Converts a tuple to a range.
            </summary>
            <param name="def">The tuple to convert to a range.</param>
        </member>
        <member name="M:Microsoft.Psi.Arrays.Range.op_Equality(Microsoft.Psi.Arrays.Range,Microsoft.Psi.Arrays.Range)">
            <summary>
            Equality comparer. Returns true if the two ranges have the same start and end, false otherwise.
            </summary>
            <param name="first">The first value to compare.</param>
            <param name="second">The second value to compare.</param>
            <returns>True if the two ranges have the same start and end, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Psi.Arrays.Range.op_Inequality(Microsoft.Psi.Arrays.Range,Microsoft.Psi.Arrays.Range)">
            <summary>
            Inequality comparer. Returns true if the two ranges have a different start and/or end, false otherwise.
            </summary>
            <param name="first">The first value to compare.</param>
            <param name="second">The second value to compare.</param>
            <returns>True if the two ranges have a different start and/or end, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Psi.Arrays.Range.Equals(System.Object)">
            <summary>
            Equality comparer. Returns true if the current range have the same start and end as the specified range, false otherwise.
            </summary>
            <param name="obj">The value to compare to.</param>
            <returns>True if the two ranges have the same start and end, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Psi.Arrays.Range.GetHashCode">
            <summary>
            Computes a hashcode based on start and end.
            </summary>
            <returns>A hash code for the range.</returns>
        </member>
        <member name="M:Microsoft.Psi.Arrays.Range.ToString">
            <summary>
            Returns a string representation of the range.
            </summary>
            <returns>A string that represents the range.</returns>
        </member>
        <member name="T:Microsoft.Psi.Arrays.RangeIndexDefinition">
            <summary>
            Defines the possible values of an index as a contiguous range.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Arrays.RangeIndexDefinition.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Arrays.RangeIndexDefinition"/> class.
            </summary>
            <param name="size">The size of the 0-based range.</param>
            <param name="elementStride">The spacing between consecutive cvalues of the index.</param>
        </member>
        <member name="M:Microsoft.Psi.Arrays.RangeIndexDefinition.#ctor(Microsoft.Psi.Arrays.Range,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Arrays.RangeIndexDefinition"/> class.
            </summary>
            <param name="range">The possible range of values.</param>
            <param name="elementStride">The spacing between consecutive cvalues of the index.</param>
        </member>
        <member name="P:Microsoft.Psi.Arrays.RangeIndexDefinition.Start">
            <summary>
            Gets the first valid value in the range.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.RangeIndexDefinition.End">
            <summary>
            Gets the last valid value in the range.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.RangeIndexDefinition.Values">
            <summary>
            Gets the set of possible values an index of this type can take.
            These values need to be multiplied by <see cref="P:Microsoft.Psi.Arrays.IndexDefinition.ElementStride"/> when computing absolute values.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.RangeIndexDefinition.Ranges">
            <summary>
            Gets the set of possible values an index can take, expressed as ranges.
            These values need to be multiplied by <see cref="P:Microsoft.Psi.Arrays.IndexDefinition.ElementStride"/> when computing absolute ranges.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Arrays.RangeIndexDefinition.Item(System.Int32)">
            <summary>
            Gets the domain-relative value of the specified index value.
            Example: if the index definition is [100-200], then index[1] == 101.
            Note: the returned value needs to be multiplied by <see cref="P:Microsoft.Psi.Arrays.IndexDefinition.ElementStride"/> to obtain an absolute value.
            </summary>
            <param name="index">The index value to use.</param>
            <returns>The domain-relative value.</returns>
        </member>
        <member name="M:Microsoft.Psi.Arrays.RangeIndexDefinition.Slice(Microsoft.Psi.Arrays.Range)">
            <summary>
            Takes a subset of the current index definition, expressed as a relative range within the [0, Count-1] range.
            </summary>
            <param name="subRange">The range of relative index values to take. Must be a subset of [0, Count-1].</param>
            <returns>An index definition for the specified range.</returns>
        </member>
        <member name="M:Microsoft.Psi.Arrays.RangeIndexDefinition.Take(System.Int32[])">
            <summary>
            Takes a subset of the current index definition, expressed as a discrete set of relative values in [0, Count-1] range.
            </summary>
            <param name="values">The set of relative index values to take. The values must be in the [0, Count-1] range.</param>
            <returns>An index definition for the specified range.</returns>
        </member>
        <member name="M:Microsoft.Psi.Arrays.RangeIndexDefinition.TryReduce(Microsoft.Psi.Arrays.IndexDefinition,Microsoft.Psi.Arrays.IndexDefinition@)">
            <summary>
            Attempts to combine this index definition with a subdimension definition.
            The two index definitions can be combined as long as
            - the subdimension size is the same as the stride of this definition, and
            - the two definitions have the same direction.
            </summary>
            <param name="subdimension">A subdimension of the current index.</param>
            <param name="combinedDefinition">The resulting combined definition, if any.</param>
            <returns>True if the two dimensions can be combined, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Psi.BatchProcessingTaskAttribute">
            <summary>
            Represents a batch processing task attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.BatchProcessingTaskAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.BatchProcessingTaskAttribute"/> class.
            </summary>
            <param name="name">Name of this task.</param>
        </member>
        <member name="P:Microsoft.Psi.BatchProcessingTaskAttribute.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.BatchProcessingTaskAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.BatchProcessingTaskAttribute.IconSourcePath">
            <summary>
            Gets or sets the path to the associated icon.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.BatchProcessingTaskAttribute.ReplayAllRealTime">
            <summary>
            Gets or sets a value indicating whether to use the <see cref="F:Microsoft.Psi.ReplayDescriptor.ReplayAllRealTime"/> descriptor when executing this batch task.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.BatchProcessingTaskAttribute.DeliveryPolicyLatestMessage">
            <summary>
            Gets or sets a value indicating whether to use the <see cref="P:Microsoft.Psi.DeliveryPolicy.LatestMessage"/> pipeline-level delivery policy when executing this batch task.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.BatchProcessingTaskAttribute.EnableDiagnostics">
            <summary>
            Gets or sets a value indicating whether to enable pipeline diagnostics when running this batch task.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.BatchProcessingTaskAttribute.OutputStoreName">
            <summary>
            Gets or sets the output store name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.BatchProcessingTaskAttribute.OutputStorePath">
            <summary>
            Gets or sets the output store path.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.BatchProcessingTaskAttribute.OutputPartitionName">
            <summary>
            Gets or sets the output partition name.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Common.BufferEx">
            <summary>
            Provides static methods to efficiently read and write simple value types as well as arrays of simple value types from/to memory buffers (managed or unmanaged).
            Similar to <see cref="T:System.Buffer"/>, but works with any simple struct, not just primitive types.
            The simple value types supported by this class can only contain fields of primitive types or other simple value types.
            For accessing unmanaged memory as an array of strong-typed elements, see <see cref="T:Microsoft.Psi.Common.UnmanagedArray`1"/>.
            For efficient reading and writing of complex types, see the <see cref="N:Microsoft.Psi.Serialization"/> namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferEx.Read``1(System.Byte[],System.Int32)">
            <summary>
            Reads a simple value type from a buffer starting at the specified byte offset.
            The method is equivalent to:
            <code>target = *(T*)(&amp;source + index)</code>
            </summary>
            <typeparam name="T">The type of the simple value type to read.</typeparam>
            <param name="source">The buffer to read from.</param>
            <param name="index">The byte offset in the buffer where the instance to read starts.</param>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferEx.Read``1(System.IntPtr)">
            <summary>
            Reads a simple value type from the beginning of the buffer.
            </summary>
            <typeparam name="T">The type of the simple value type to read.</typeparam>
            <param name="source">The buffer to read from.</param>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferEx.Write``1(``0,System.Byte[],System.Int32)">
            <summary>
            Writes a simple value type to a buffer at the specified byte offset.
            </summary>
            <typeparam name="T">The type of the simple value type to write.</typeparam>
            <param name="value">The value to write.</param>
            <param name="target">The buffer to write to.</param>
            <param name="index">The byte offset in the buffer where the specified value will be written.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferEx.Write``1(``0,System.IntPtr)">
            <summary>
            Writes a simple value type to buffer at the specified byte offset.
            </summary>
            <typeparam name="T">The type of the simple value type to write.</typeparam>
            <param name="value">The value to write.</param>
            <param name="target">The buffer to write to.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferEx.Copy``1(System.Byte[],System.Int32,``0[],System.Int32,System.Int32)">
            <summary>
            Copies a specified number of items from a buffer starting at a particular offset to a destination array starting at a particular index.
            Similar to <see cref="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)"/>, but works for any simple struct, not just primitive types.
            </summary>
            <typeparam name="T">The type of the simple value type to copy.</typeparam>
            <param name="src">The source buffer to copy from.</param>
            <param name="srcIndex">The zero-based byte offset into src from which copying begins.</param>
            <param name="dest">The one-dimensional destination array.</param>
            <param name="destIndex">The zero-based index in the destination array at which copying begins.</param>
            <param name="length">The number of elements to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferEx.Copy``1(System.IntPtr,System.Int32,``0[],System.Int32,System.Int32)">
            <summary>
            Copies a specified number of items from a buffer starting at a particular offset to a destination array starting at a particular index.
            Similar to <see cref="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)"/>, but works for any simple struct, not just primitive types.
            </summary>
            <typeparam name="T">The type of the simple value type to copy.</typeparam>
            <param name="src">The source buffer to copy from.</param>
            <param name="srcIndex">The zero-based byte offset into src from which copying begins.</param>
            <param name="dest">The one-dimensional destination array.</param>
            <param name="destIndex">The zero-based index in the destination array at which copying begins.</param>
            <param name="length">The number of elements to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferEx.Copy``1(``0[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies a specified number of items from a array starting at a particular index into a destination buffer starting at a particular offset.
            Similar to <see cref="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)"/>, but works for any simple struct, not just primitive types.
            </summary>
            <typeparam name="T">The type of the simple value type to copy.</typeparam>
            <param name="src">The source array to copy from.</param>
            <param name="srcIndex">The zero-based byte index into src from which copying begins.</param>
            <param name="dest">The destination buffer.</param>
            <param name="destIndex">The zero-based offset in the destination buffer at which copying begins.</param>
            <param name="length">The number of elements to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferEx.Copy``1(``0[],System.Int32,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Copies a specified number of items from a array starting at a particular index into a destination buffer starting at a particular offset.
            Similar to <see cref="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)"/>, but works for any simple struct, not just primitive types.
            </summary>
            <typeparam name="T">The type of the simple value type to copy.</typeparam>
            <param name="src">The source array to copy from.</param>
            <param name="srcIndex">The zero-based byte index into src from which copying begins.</param>
            <param name="dest">The destination buffer.</param>
            <param name="destIndex">The zero-based offset in the destination buffer at which copying begins.</param>
            <param name="length">The number of elements to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferEx.SizeOf``1">
            <summary>
            Computes the size, in bytes, of an instance of a simple struct.
            </summary>
            <typeparam name="T">The type of the simple value type.</typeparam>
            <returns>The size, in bytes, of an instance of a simple struct.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferEx.SizeOf``1(``0)">
            <summary>
            Computes the size, in bytes, of an instance of a simple value type.
            </summary>
            <typeparam name="T">The type of the simple value type.</typeparam>
            <param name="value">The simple value type.</param>
            <returns>The size, in bytes, of an instance of a simple value type.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferEx.SizeOf``1(``0[])">
            <summary>
            Computes the total size, in bytes, of an array of simple struct elements.
            </summary>
            <typeparam name="T">The type of the simple struct.</typeparam>
            <param name="array">The array of simple struct elements.</param>
            <returns>The total size, in bytes, of an array of simple struct elements.</returns>
        </member>
        <member name="T:Microsoft.Psi.Common.BufferReader">
            <summary>
            Auto-resizable buffer (similar to MemoryStream) but with methods to read arrays of any simple value type, not just byte[].
            This class is typically used in conjunction with <see cref="T:Microsoft.Psi.Common.BufferWriter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Common.BufferReader"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Common.BufferReader"/> class using the specified buffer.
            </summary>
            <param name="buffer">The buffer to read from.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Common.BufferReader"/> class using the specified buffer.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="length">The count of valid bytes in the buffer.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.#ctor(Microsoft.Psi.Common.BufferWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Common.BufferReader"/> class using the buffer already filled in by the specified <see cref="T:Microsoft.Psi.Common.BufferWriter"/>.
            Note that the underlying buffer is shared, and the writer could corrupt it.
            </summary>
            <param name="writer">The writer to share the buffer with.</param>
        </member>
        <member name="P:Microsoft.Psi.Common.BufferReader.Position">
            <summary>
            Gets the current position of the reader.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Common.BufferReader.Length">
            <summary>
            Gets the number of valid bytes in the underlying buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Common.BufferReader.RemainingLength">
            <summary>
            Gets the number of unread bytes.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Common.BufferReader.Buffer">
            <summary>
            Gets the underlying buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.Reset">
            <summary>
            Resets the position of the reader to the beginning of the buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.Seek(System.Int32)">
            <summary>
            Moves the current position to the specified place in the underlying buffer.
            </summary>
            <param name="position">The position to move the to.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.Reset(System.Int32)">
            <summary>
            Resets the reader to the beginning and resizes the buffer as needed. Note that any data in the buffer is lost.
            </summary>
            <param name="length">The new buffer length.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.Read(System.Void*,System.Int32)">
            <summary>
            Copies the specified number of bytes from the underlying buffer to the specified memory address.
            </summary>
            <param name="target">The target memory address.</param>
            <param name="lengthInBytes">The number of bytes to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.Read(System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from the underlying buffer into the specified array.
            </summary>
            <param name="target">The array to copy to.</param>
            <param name="count">The number of bytes to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.Read(System.Double[],System.Int32)">
            <summary>
            Copies the specified number of elements of type Double from the underlying buffer into the specified array.
            </summary>
            <param name="target">The array to copy to.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.Read(System.Single[],System.Int32)">
            <summary>
            Copies the specified number of elements of type Single from the underlying buffer into the specified array.
            </summary>
            <param name="target">The array to copy to.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.Read(System.UInt16[],System.Int32)">
            <summary>
            Copies the specified number of elements of type UInt16 from the underlying buffer into the specified array.
            </summary>
            <param name="target">The array to copy to.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.Read(System.Int16[],System.Int32)">
            <summary>
            Copies the specified number of elements of type Int16 from the underlying buffer into the specified array.
            </summary>
            <param name="target">The array to copy to.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.Read(System.Int32[],System.Int32)">
            <summary>
            Copies the specified number of elements of type Int32 from the underlying buffer into the specified array.
            </summary>
            <param name="target">The array to copy to.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.Read(System.Int64[],System.Int32)">
            <summary>
            Copies the specified number of elements of type Int64 from the underlying buffer into the specified array.
            </summary>
            <param name="target">The array to copy to.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.Read(System.Char[],System.Int32)">
            <summary>
            Copies the specified number of elements of type Char from the underlying buffer into the specified array.
            </summary>
            <param name="target">The array to copy to.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.CopyToStream(System.IO.Stream,System.Int32)">
            <summary>
            Copies the specified number of bytes from the underlying buffer into the specified stream.
            </summary>
            <param name="target">The stream to copy to.</param>
            <param name="count">The number of bytes to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.ReadInt16">
            <summary>
            Reads one Int16 value from the underlying buffer.
            </summary>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.ReadUInt16">
            <summary>
            Reads one UInt16 value from the underlying buffer.
            </summary>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.ReadInt32">
            <summary>
            Reads one Int32 value from the underlying buffer.
            </summary>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.ReadUInt32">
            <summary>
            Reads one UInt32 value from the underlying buffer.
            </summary>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.ReadInt64">
            <summary>
            Reads one Int64 value from the underlying buffer.
            </summary>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.ReadUInt64">
            <summary>
            Reads one UInt64 value from the underlying buffer.
            </summary>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.ReadByte">
            <summary>
            Reads one Byte value from the underlying buffer.
            </summary>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.ReadSByte">
            <summary>
            Reads one SByte value from the underlying buffer.
            </summary>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.ReadSingle">
            <summary>
            Reads one Single value from the underlying buffer.
            </summary>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.ReadDouble">
            <summary>
            Reads one Double value from the underlying buffer.
            </summary>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.ReadDateTime">
            <summary>
            Reads one DateTime value from the underlying buffer.
            </summary>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.ReadChar">
            <summary>
            Reads one Char value from the underlying buffer.
            </summary>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.ReadBool">
            <summary>
            Reads one Bool value from the underlying buffer.
            </summary>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.ReadString">
            <summary>
            Reads one String value from the underlying buffer.
            </summary>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferReader.ReadEnvelope">
            <summary>
            Reads one Envelope value from the underlying buffer.
            </summary>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="T:Microsoft.Psi.Common.BufferWriter">
            <summary>
            Auto-resizable buffer (similar to MemoryStream) but with methods to copy pointers any primitive arrays, not just byte[].
            This class is typically used in conjunction with <see cref="T:Microsoft.Psi.Common.BufferReader"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Common.BufferWriter"/> class.
            </summary>
            <param name="size">The initial size of the underlying buffer.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Common.BufferWriter"/> class.
            </summary>
            <param name="buffer">The underlying buffer to use in the beginning. The underlying buffer will change once it becomes insufficient.</param>
        </member>
        <member name="P:Microsoft.Psi.Common.BufferWriter.Position">
            <summary>
            Gets the current position of the writer.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Common.BufferWriter.Size">
            <summary>
            Gets the current size of the underlying buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Common.BufferWriter.Buffer">
            <summary>
            Gets the underlying buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Reset">
            <summary>
            Resets the writer without reallocating the underlying buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.Void*,System.Int32)">
            <summary>
            Writes the specified number of bytes from the specified address.
            </summary>
            <param name="source">The pointer to the memory to copy into the buffer.</param>
            <param name="lengthInBytes">The number of bytes to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.Byte[])">
            <summary>
            Writes an array of bytes to the underlying buffer.
            </summary>
            <param name="source">The array of bytes to read from.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.WriteEx(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a portion of an array of bytes to the underlying buffer.
            </summary>
            <param name="source">The array of bytes to read from.</param>
            <param name="start">The index into the source array to start reading from.</param>
            <param name="count">The count of bytes to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.SByte[])">
            <summary>
            Writes an array of values of type SByte to the underlying buffer.
            </summary>
            <param name="source">The array to read from.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.Boolean[])">
            <summary>
            Writes an array of values of type Bool to the underlying buffer.
            </summary>
            <param name="source">The array to read from.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.Double[])">
            <summary>
            Writes an array of values of type Double to the underlying buffer.
            </summary>
            <param name="source">The array to read from.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.Single[])">
            <summary>
            Writes an array of values of type Single to the underlying buffer.
            </summary>
            <param name="source">The array to read from.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.Int16[])">
            <summary>
            Writes an array of values of type Int16 to the underlying buffer.
            </summary>
            <param name="source">The array to read from.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.Int32[])">
            <summary>
            Writes an array of values of type Int32 to the underlying buffer.
            </summary>
            <param name="source">The array to read from.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.Int64[])">
            <summary>
            Writes an array of values of type Int64 to the underlying buffer.
            </summary>
            <param name="source">The array to read from.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.Char[])">
            <summary>
            Writes an array of values of type char to the underlying buffer.
            </summary>
            <param name="source">The array to read from.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.UInt16[])">
            <summary>
            Writes an array of values of type UInt16 to the underlying buffer.
            </summary>
            <param name="source">The array to read from.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.UInt32[])">
            <summary>
            Writes an array of values of type UInt32 to the underlying buffer.
            </summary>
            <param name="source">The array to read from.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.UInt64[])">
            <summary>
            Writes an array of values of type UInt64 to the underlying buffer.
            </summary>
            <param name="source">The array to read from.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.Byte)">
            <summary>
            Writes a value of type byte to the underlying buffer.
            </summary>
            <param name="source">The value to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.SByte)">
            <summary>
            Writes a value of type sbyte to the underlying buffer.
            </summary>
            <param name="source">The value to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.Boolean)">
            <summary>
            Writes a value of type bool to the underlying buffer.
            </summary>
            <param name="source">The value to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.Int16)">
            <summary>
            Writes a value of type Int16 to the underlying buffer.
            </summary>
            <param name="source">The value to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.UInt16)">
            <summary>
            Writes a value of type UInt16 to the underlying buffer.
            </summary>
            <param name="source">The value to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.Int32)">
            <summary>
            Writes a value of type Int32 to the underlying buffer.
            </summary>
            <param name="source">The value to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.UInt32)">
            <summary>
            Writes a value of type UInt32 to the underlying buffer.
            </summary>
            <param name="source">The value to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.Int64)">
            <summary>
            Writes a value of type Int64 to the underlying buffer.
            </summary>
            <param name="source">The value to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.UInt64)">
            <summary>
            Writes a value of type UInt64 to the underlying buffer.
            </summary>
            <param name="source">The value to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.Single)">
            <summary>
            Writes a value of type Single to the underlying buffer.
            </summary>
            <param name="source">The value to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.Double)">
            <summary>
            Writes a value of type Double to the underlying buffer.
            </summary>
            <param name="source">The value to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.DateTime)">
            <summary>
            Writes a value of type DateTime to the underlying buffer.
            </summary>
            <param name="source">The value to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.Char)">
            <summary>
            Writes a value of type Char to the underlying buffer.
            </summary>
            <param name="source">The value to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(System.String)">
            <summary>
            Writes a value of type String to the underlying buffer.
            </summary>
            <param name="source">The value to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.Write(Microsoft.Psi.Envelope)">
            <summary>
            Writes a value of type Envelope to the underlying buffer.
            </summary>
            <param name="envelope">The value to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.BufferWriter.CopyFromStream(System.IO.Stream,System.Int32)">
            <summary>
            Copies the specified number of bytes from a <see cref="T:System.IO.Stream"/> to the underlying buffer.
            </summary>
            <param name="stream">The stream from which to read.</param>
            <param name="count">The count of bytes to write.</param>
        </member>
        <member name="T:Microsoft.Psi.Common.Interpolators.AdjacentValuesInterpolator`2">
            <summary>
            Implements a interpolator based on the values adjacent to the interpolation time, i.e. the
            nearest values before and after the interpolation time.
            </summary>
            <typeparam name="TIn">The type of the messages to interpolate.</typeparam>
            <typeparam name="TOut">The type of the output interpolation result.</typeparam>
            <remarks>The interpolator results do not depend on the wall-clock time of the messages arriving
            on the secondary stream, i.e., they are based on originating times of messages. As a result,
            the interpolator might introduce an extra delay as it might have to wait for enough messages on the
            secondary stream to prove that the interpolation result is correct, irrespective of any other messages
            that might arrive later.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Common.Interpolators.AdjacentValuesInterpolator`2.#ctor(System.Func{`0,`0,System.Double,`1},System.Boolean,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Common.Interpolators.AdjacentValuesInterpolator`2"/> class.
            </summary>
            <param name="interpolator">An interpolator function which given the two nearest values and the ratio
            between them where the interpolation result should be produces the interpolation result.</param>
            <param name="orDefault">Indicates whether to output a default value when no result is found.</param>
            <param name="defaultValue">An optional default value to use.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.Interpolators.AdjacentValuesInterpolator`2.Interpolate(System.DateTime,System.Collections.Generic.IEnumerable{Microsoft.Psi.Message{`0}},System.Nullable{System.DateTime})">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Common.Interpolators.FirstAvailableInterpolator`1">
            <summary>
            Implements a greedy interpolator that selects the first value from a specified window. The
            interpolator only considers messages available in the window on the secondary stream at
            the moment the primary stream message arrives. As such, it belongs to the class of greedy
            interpolators and does not guarantee reproducible results.
            </summary>
            <typeparam name="T">The type of messages.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Common.Interpolators.FirstAvailableInterpolator`1.#ctor(Microsoft.Psi.RelativeTimeInterval,System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Common.Interpolators.FirstAvailableInterpolator`1"/> class.
            </summary>
            <param name="relativeTimeInterval">The relative time interval within which to search for the first message.</param>
            <param name="orDefault">Indicates whether to output a default value when no result is found.</param>
            <param name="defaultValue">An optional default value to use.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.Interpolators.FirstAvailableInterpolator`1.Interpolate(System.DateTime,System.Collections.Generic.IEnumerable{Microsoft.Psi.Message{`0}},System.Nullable{System.DateTime})">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Common.Interpolators.FirstReproducibleInterpolator`1">
            <summary>
            Implements a reproducible interpolator that selects the first value from a specified window.
            </summary>
            <typeparam name="T">The type of messages.</typeparam>
            <remarks>The interpolator results do not depend on the wall-clock time of the messages arriving
            on the secondary stream, i.e., they are based on originating times of messages. As a result,
            the interpolator might introduce an extra delay as it might have to wait for enough messages on the
            secondary stream to prove that the interpolation result is correct, irrespective of any other messages
            that might arrive later.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Common.Interpolators.FirstReproducibleInterpolator`1.#ctor(Microsoft.Psi.RelativeTimeInterval,System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Common.Interpolators.FirstReproducibleInterpolator`1"/> class.
            </summary>
            <param name="relativeTimeInterval">The relative time interval within which to search for the first message.</param>
            <param name="orDefault">Indicates whether to output a default value when no result is found.</param>
            <param name="defaultValue">An optional default value to use.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.Interpolators.FirstReproducibleInterpolator`1.Interpolate(System.DateTime,System.Collections.Generic.IEnumerable{Microsoft.Psi.Message{`0}},System.Nullable{System.DateTime})">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Common.Interpolators.LastAvailableInterpolator`1">
            <summary>
            Implements a greedy interpolator that selects the last value from a specified window. The
            interpolator only considers messages available in the window on the secondary stream at
            the moment the primary stream message arrives. As such, it belongs to the class of greedy
            interpolators and does not guarantee reproducible results.
            </summary>
            <typeparam name="T">The type of messages.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Common.Interpolators.LastAvailableInterpolator`1.#ctor(Microsoft.Psi.RelativeTimeInterval,System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Common.Interpolators.LastAvailableInterpolator`1"/> class.
            </summary>
            <param name="relativeTimeInterval">The relative time interval within which to search for the first message.</param>
            <param name="orDefault">Indicates whether to output a default value when no result is found.</param>
            <param name="defaultValue">An optional default value to use.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.Interpolators.LastAvailableInterpolator`1.Interpolate(System.DateTime,System.Collections.Generic.IEnumerable{Microsoft.Psi.Message{`0}},System.Nullable{System.DateTime})">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Common.Interpolators.LastReproducibleInterpolator`1">
            <summary>
            Implements a reproducible interpolator that selects the last value from a specified window.
            </summary>
            <typeparam name="T">The type of messages.</typeparam>
            <remarks>The interpolator results do not depend on the wall-clock time of the messages arriving
            on the secondary stream, i.e., they are based on originating times of messages. As a result,
            the interpolator might introduce an extra delay as it might have to wait for enough messages on the
            secondary stream to prove that the interpolation result is correct, irrespective of any other messages
            that might arrive later.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Common.Interpolators.LastReproducibleInterpolator`1.#ctor(Microsoft.Psi.RelativeTimeInterval,System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Common.Interpolators.LastReproducibleInterpolator`1"/> class.
            </summary>
            <param name="relativeTimeInterval">The relative time interval within which to search for the first message.</param>
            <param name="orDefault">Indicates whether to output a default value when no result is found.</param>
            <param name="defaultValue">An optional default value to use.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.Interpolators.LastReproducibleInterpolator`1.Interpolate(System.DateTime,System.Collections.Generic.IEnumerable{Microsoft.Psi.Message{`0}},System.Nullable{System.DateTime})">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Common.Interpolators.NearestAvailableInterpolator`1">
            <summary>
            Implements a greedy interpolator that selects the nearest value from a specified window. The
            interpolator only considers messages available in the window on the secondary stream at
            the moment the primary stream message arrives. As such, it belongs to the class of greedy
            interpolators and does not guarantee reproducible results.
            </summary>
            <typeparam name="T">The type of messages.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Common.Interpolators.NearestAvailableInterpolator`1.#ctor(Microsoft.Psi.RelativeTimeInterval,System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Common.Interpolators.NearestAvailableInterpolator`1"/> class.
            </summary>
            <param name="relativeTimeInterval">The relative time interval within which to search for the first message.</param>
            <param name="orDefault">Indicates whether to output a default value when no result is found.</param>
            <param name="defaultValue">An optional default value to use.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.Interpolators.NearestAvailableInterpolator`1.Interpolate(System.DateTime,System.Collections.Generic.IEnumerable{Microsoft.Psi.Message{`0}},System.Nullable{System.DateTime})">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Common.Interpolators.NearestReproducibleInterpolator`1">
            <summary>
            Implements a reproducible interpolator that selects the nearest value from a specified window.
            </summary>
            <typeparam name="T">The type of messages.</typeparam>
            <remarks>The interpolator results do not depend on the wall-clock time of the messages arriving
            on the secondary stream, i.e., they are based on originating times of messages. As a result,
            the interpolator might introduce an extra delay as it might have to wait for enough messages on the
            secondary stream to prove that the interpolation result is correct, irrespective of any other messages
            that might arrive later.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Common.Interpolators.NearestReproducibleInterpolator`1.#ctor(Microsoft.Psi.RelativeTimeInterval,System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Common.Interpolators.NearestReproducibleInterpolator`1"/> class.
            </summary>
            <param name="relativeTimeInterval">The relative time interval within which to search for the first message.</param>
            <param name="orDefault">Indicates whether to output a default value when no result is found.</param>
            <param name="defaultValue">An optional default value to use.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.Interpolators.NearestReproducibleInterpolator`1.Interpolate(System.DateTime,System.Collections.Generic.IEnumerable{Microsoft.Psi.Message{`0}},System.Nullable{System.DateTime})">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Common.RuntimeInfo">
            <summary>
            Runtime info metadata.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Common.RuntimeInfo.CurrentRuntimeVersion">
            <summary>
            The current version of the serialization subsystem. This is the default.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Common.RuntimeInfo.MachineName">
            <summary>
            Gets the NetBIOS name of the local machine.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Common.RuntimeInfo.CmdLine">
            <summary>
            Get the command line for the process.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Common.RuntimeInfo.RuntimeName">
            <summary>
            Gets name of the executing assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Common.RuntimeInfo.Current">
            <summary>
            Gets the current runtime info.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Common.AdditionalAssembliesWarning">
            <summary>
            Represents the security warning text displayed to the user
            when they elect to load additional third-party assemblies.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Common.AdditionalAssembliesWarning.Title">
            <summary>
            The warning title.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Common.AdditionalAssembliesWarning.Line1">
            <summary>
            The first line of the warning message, above the list of assemblies.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Common.AdditionalAssembliesWarning.Line2">
            <summary>
            The first line of the warning message, below the list of assemblies.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Common.AdditionalAssembliesWarning.Question">
            <summary>
            The question asking the user if they wish to proceed.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Common.UnmanagedArray`1">
            <summary>
            Provides efficient, array-style access to data stored in unmanaged memory.
            The element type can be any simple value type (a primitive type or a struct with no reference-type fields.
            The simple value types supported by this class can only contain fields of primitive types or other simple value types.
            For efficient reading and writing of complex types, see the <see cref="N:Microsoft.Psi.Serialization"/> namespace.
            </summary>
            <typeparam name="T">The element type. Must be a blitable, simple value type (a struct with no reference-type fields).</typeparam>
        </member>
        <member name="F:Microsoft.Psi.Common.UnmanagedArray`1.ElementSize">
            <summary>
            The size, in bytes, of one array element, as returned by the MSIL sizeof instruction.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.#ctor(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Common.UnmanagedArray`1"/> class from an existing allocation.
            </summary>
            <param name="buffer">The unmanaged buffer to wrap.</param>
            <param name="size">The size, in bytes, of the unmanaged memory allocation.</param>
            <param name="isReadOnly">True if the array should be read-only.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Common.UnmanagedArray`1"/> class.
            </summary>
            <param name="length">The array length (in number of elements) to allocate.</param>
            <param name="zeroMemory">Indicates whether the allocated array should be set to 0 before returning.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Microsoft.Psi.Common.UnmanagedArray`1"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Common.UnmanagedArray`1.Data">
            <summary>
            Gets the pointer to the underlying memory.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Common.UnmanagedArray`1.Length">
            <summary>
            Gets the number of elements in the array.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Common.UnmanagedArray`1.Count">
            <summary>
            Gets the number of elements in the array.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Common.UnmanagedArray`1.Size">
            <summary>
            Gets the size of the allocated memory, in bytes.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Common.UnmanagedArray`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the array can be modified or not.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Common.UnmanagedArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the value of the element at the specified index.
            </summary>
            <param name="index">The index of the element to set.</param>
            <returns>The value of the element at the specified index.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.UncheckedGet(System.Int32)">
            <summary>
            Gets the value at the specified index, without performing bounds checking.
            </summary>
            <param name="index">Index of the element to get.</param>
            <returns>The value at the specified index.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.UncheckedSet(System.Int32,`0)">
            <summary>
            Sets a value at the specified index, without performing bounds checking.
            </summary>
            <param name="index">Index of the element to set.</param>
            <param name="value">the value to set the element to.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.GetRef(System.Int32)">
            <summary>
            Gets a reference to the element at the specified index.
            Note that this method call is not inlined by the JIT compiler, potentially making it slower than get+set via the indexer.
            </summary>
            <param name="index">The index of the element to get.</param>
            <returns>A reference to the element at the specified index.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.Clear(System.Int32,System.Int32)">
            <summary>
            Clears the array.
            </summary>
            <param name="start">The index of the first element to clear.</param>
            <param name="length">The number of elements to clear.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.Clear">
            <summary>
            Clears the array.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.CopyTo(`0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the elements of the current one-dimensional array to the specified one-dimensional array.
            </summary>
            <param name="destination">The one-dimensional array that is the destination of the elements copied from the current array.</param>
            <param name="srcIndex">The index in the source array at which copying begins.</param>
            <param name="destIndex">The index in the destination array at which copying begins.</param>
            <param name="length">The number of elements to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.CopyTo(`0[])">
            <summary>
            Copies all the elements of the current one-dimensional array to the specified one-dimensional array.
            </summary>
            <param name="destination">The one-dimensional array that is the destination of the elements copied from the current array.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all the elements of the current one-dimensional array to the specified one-dimensional array.
            </summary>
            <param name="destination">The one-dimensional array that is the destination of the elements copied from the current array.</param>
            <param name="index">The index in the destination array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.CopyTo(Microsoft.Psi.Common.UnmanagedArray{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the elements of the current one-dimensional array to the specified one-dimensional array.
            </summary>
            <param name="destination">The one-dimensional array that is the destination of the elements copied from the current array.</param>
            <param name="srcIndex">The index in the source array at which copying begins.</param>
            <param name="destIndex">The index in the destination array at which copying begins.</param>
            <param name="length">The number of elements to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.CopyTo(Microsoft.Psi.Common.UnmanagedArray{`0})">
            <summary>
            Copies all the elements of the current one-dimensional array to the specified one-dimensional array.
            </summary>
            <param name="destination">The one-dimensional array that is the destination of the elements copied from the current array.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.CopyTo(Microsoft.Psi.Common.UnmanagedArray{`0},System.Int32)">
            <summary>
            Copies all the elements of the current one-dimensional array to the specified one-dimensional array.
            </summary>
            <param name="destination">The one-dimensional array that is the destination of the elements copied from the current array.</param>
            <param name="index">The index in the destination array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.Copy(`0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the specified number of elements from a one-dimensional array to the current array.
            </summary>
            <param name="source">The source one-dimensional array.</param>
            <param name="srcIndex">The index in the source array at which copying begins.</param>
            <param name="destIndex">The index in the destination array at which copying begins.</param>
            <param name="length">The number of elements to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.Copy(`0[])">
            <summary>
            Copies all the elements of the specified one-dimensional array to the current array.
            </summary>
            <param name="source">The source one-dimensional array.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.Copy(`0[],System.Int32)">
            <summary>
            Copies all the elements of the specified one-dimensional array to the current array.
            </summary>
            <param name="source">The source one-dimensional array.</param>
            <param name="index">The index in the destination array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.Resize(System.Int32,System.Boolean)">
            <summary>
            Resizes the underlying buffer, preserving the existing data.
            </summary>
            <param name="length">The new length, in count of elements.</param>
            <param name="zeroMemory">Indicates whether the trailing end of the new allocation should be set to 0 before returning.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.Dispose">
            <summary>
            Frees the underlying memory.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedArray`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Psi.Common.UnmanagedBuffer">
            <summary>
            Unmanaged buffer wrapper class.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedBuffer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Microsoft.Psi.Common.UnmanagedBuffer"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Common.UnmanagedBuffer.Data">
            <summary>
            Gets a pointer to underlying data.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Common.UnmanagedBuffer.Size">
            <summary>
            Gets size of underlying data.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedBuffer.Allocate(System.Int32)">
            <summary>
            Allocate unmanaged buffer.
            </summary>
            <param name="size">Size (bytes) to allocate.</param>
            <returns>Allocated unmanaged buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedBuffer.WrapIntPtr(System.IntPtr,System.Int32)">
            <summary>
            Wrap existing unmanaged memory.
            </summary>
            <param name="data">Pointer to data.</param>
            <param name="size">Data size (bytes).</param>
            <returns>Wrapped unmanaged buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedBuffer.CreateCopyFrom(System.IntPtr,System.Int32)">
            <summary>
            Create a copy of existing unmanaged memory.
            </summary>
            <param name="data">Pointer to data.</param>
            <param name="size">Data size (bytes).</param>
            <returns>Wrapped copy of unmanaged buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedBuffer.CreateCopyFrom(System.Byte[])">
            <summary>
            Create a copy of existing managed data.
            </summary>
            <param name="data">Data to be copied.</param>
            <returns>Wrapped copy to unmanaged buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedBuffer.Clone">
            <summary>
            Clone unmanaged buffer.
            </summary>
            <returns>Cloned unmanaged buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedBuffer.CopyTo(Microsoft.Psi.Common.UnmanagedBuffer)">
            <summary>
            Copy this unmanaged buffer to another instance.
            </summary>
            <param name="destination">Destination instance to which to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedBuffer.ReadBytes(System.Int32,System.Int32)">
            <summary>
            Read bytes from unmanaged buffer.
            </summary>
            <param name="count">Count of bytes to copy.</param>
            <param name="offset">Offset into buffer.</param>
            <returns>Bytes having been copied.</returns>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedBuffer.CopyTo(System.Byte[])">
            <summary>
            Copy unmanaged buffer to managed array.
            </summary>
            <param name="destination">Destination array to which to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedBuffer.CopyTo(System.IntPtr,System.Int32)">
            <summary>
            Copy unmanaged buffer to address.
            </summary>
            <param name="destination">Destination address to which to copy.</param>
            <param name="size">Size (bytes) to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedBuffer.CopyFrom(Microsoft.Psi.Common.UnmanagedBuffer)">
            <summary>
            Copy from unmanaged buffer.
            </summary>
            <param name="source">Unmanaged buffer from which to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedBuffer.CopyFrom(System.Byte[])">
            <summary>
            Copy from managed array.
            </summary>
            <param name="source">Managed array from which to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedBuffer.CopyFrom(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy from managed array.
            </summary>
            <param name="source">Managed array from which to copy.</param>
            <param name="offset">The zero-based index in the source array where copying should start.</param>
            <param name="length">The number of bytes to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedBuffer.CopyFrom(System.IntPtr,System.Int32)">
            <summary>
            Copy from address.
            </summary>
            <param name="source">Source address from which to copy.</param>
            <param name="size">Size (bytes) to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Common.UnmanagedBuffer.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Psi.Clock">
            <summary>
            Represents virtual time.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Clock.#ctor(System.TimeSpan,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Clock"/> class.
            </summary>
            <param name="virtualTimeOffset">The delta between virtual time and real time. A negative value will result in times in the past, a positive value will result in times in the future.</param>
            <param name="timeDilationFactor">if set to a value greater than 1, virtual time passes faster than real time by this factor.</param>
        </member>
        <member name="M:Microsoft.Psi.Clock.#ctor(System.DateTime,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Clock"/> class.
            </summary>
            <param name="virtualNow">The desired current virtual time.</param>
            <param name="replaySpeedFactor">if set to a value greater than 1, virtual time passes faster than real time by this factor.</param>
        </member>
        <member name="M:Microsoft.Psi.Clock.#ctor(Microsoft.Psi.Clock)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Clock"/> class.
            </summary>
            <param name="clock">Clock from which to take parameters.</param>
        </member>
        <member name="P:Microsoft.Psi.Clock.RealTimeOrigin">
            <summary>
            Gets the origin in real time.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Clock.Origin">
            <summary>
            Gets the offset origin in real time.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Clock.GetCurrentTime">
            <summary>
            Returns the virtual time with high resolution (1us), in the virtual time frame of reference.
            </summary>
            <returns>The current time in the adjusted frame of reference.</returns>
        </member>
        <member name="M:Microsoft.Psi.Clock.GetTimeFromElapsedTicks(System.Int64)">
            <summary>
            Returns the absolute time represented by the number of 100ns ticks from system boot.
            </summary>
            <param name="ticksFromSystemBoot">The number of 100ns ticks since system boot.</param>
            <returns>The absolute time.</returns>
        </member>
        <member name="M:Microsoft.Psi.Clock.ToVirtualTime(System.DateTime)">
            <summary>
            Returns the virtual time, given the current time mapping.
            </summary>
            <param name="realTime">A time in the real time frame.</param>
            <returns>The corresponding time in the adjusted frame of reference.</returns>
        </member>
        <member name="M:Microsoft.Psi.Clock.ToVirtualTime(System.TimeSpan)">
            <summary>
            Returns the virtual time span, given a real time span.
            </summary>
            <param name="realTimeInterval">Real time span.</param>
            <returns>Virtual time span.</returns>
        </member>
        <member name="M:Microsoft.Psi.Clock.ToRealTime(System.DateTime)">
            <summary>
            Returns the real time corresponding to the virtual time, given the current time mapping.
            </summary>
            <param name="virtualTime">A time in the virtual time frame.</param>
            <returns>The corresponding time in the real time frame of reference.</returns>
        </member>
        <member name="M:Microsoft.Psi.Clock.ToRealTime(System.TimeSpan)">
            <summary>
            Returns the real time span, given a virtual time span.
            </summary>
            <param name="virtualTimeInterval">Virtual time span.</param>
            <returns>Real time span.</returns>
        </member>
        <member name="T:Microsoft.Psi.DeliveryPolicy">
            <summary>
            Encapsulates the options for message delivery behavior.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.DeliveryPolicy.DefaultInitialQueueSize">
            <summary>
            The default initial size of receiver queues.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.DeliveryPolicy.UnlimitedPolicy">
            <summary>
            A delivery policy which lets the queue grow as much as needed, with no latency constraints.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.DeliveryPolicy.LatestMessagePolicy">
            <summary>
            A delivery policy which limits the queue to one message, with no latency constraints.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.DeliveryPolicy.ThrottlePolicy">
            <summary>
            The throttle policy limits the queue to one message and throttles its source as long as
            there is a message in the queue waiting to be processed.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.DeliveryPolicy.SynchronousOrThrottlePolicy">
            <summary>
            A delivery policy which attempts synchronous message delivery; if synchronous delivery fails, the source is throttled.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.DeliveryPolicy.#ctor(System.Int32,System.Int32,System.Nullable{System.TimeSpan},System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.DeliveryPolicy"/> class.
            </summary>
            <param name="initialQueueSize">The initial receiver queue size.</param>
            <param name="maximumQueueSize">The maximum receiver queue size.</param>
            <param name="maximumLatency">The maximum latency allowable for messages to be delivered.</param>
            <param name="throttleWhenFull">A value indicating whether to block the upstream producer if the receiver queue is full.</param>
            <param name="attemptSynchronous">A value indicating whether to attempt synchronous delivery.</param>
            <param name="name">Name used for debugging and diagnostics.</param>
        </member>
        <member name="P:Microsoft.Psi.DeliveryPolicy.Unlimited">
            <summary>
            Gets a lossless, unlimited delivery policy which lets the receiver queue grow as much as needed, with no latency constraints.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.DeliveryPolicy.LatestMessage">
            <summary>
            Gets a lossy delivery policy which limits the receiver queue to one message, with no latency constraints.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.DeliveryPolicy.Throttle">
            <summary>
            Gets a throttling delivery policy, which attempts to throttle its source as long as there is a message in the queue waiting to be processed.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.DeliveryPolicy.SynchronousOrThrottle">
            <summary>
            Gets a delivery policy which attempts synchronous message delivery; if synchronous delivery fails, the source is throttled.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.DeliveryPolicy.ThrottleWhenFull">
            <summary>
            Gets a value indicating whether to block the upstream producer if the receiver queue is full.
            </summary>
            <remarks>Use with care, as it affects all other subscribers to the same producer and can introduce deadlocks (a blocked producer cannot process control messages anymore).</remarks>
        </member>
        <member name="P:Microsoft.Psi.DeliveryPolicy.InitialQueueSize">
            <summary>
            Gets the initial size of the receiver queue that holds the messages pending delivery.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.DeliveryPolicy.MaximumQueueSize">
            <summary>
            Gets the maximum size of the receiver queue that holds the messages pending delivery.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.DeliveryPolicy.MaximumLatency">
            <summary>
            Gets the maximum latency of items to be delivered. Items with a latency larger than this are discarded.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.DeliveryPolicy.AttemptSynchronousDelivery">
            <summary>
            Gets a value indicating whether the runtime should attempt synchronous delivery when possible.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.DeliveryPolicy.Name">
            <summary>
            Gets name used for debugging and diagnostics.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.DeliveryPolicy.LatencyConstrained(System.TimeSpan)">
            <summary>
            Creates a latency-constrained delivery policy. Messages older than the specified maximum latency are discarded.
            </summary>
            <param name="maximumLatency">The maximum latency for messages to be delivered.</param>
            <returns>A latency-constrained delivery policy.</returns>
        </member>
        <member name="M:Microsoft.Psi.DeliveryPolicy.QueueSizeConstrained(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a queue-size constrained delivery policy. Messages will accumulate only up to the specified
            maximum queue size, after which they will be discarded.
            </summary>
            <param name="maximumQueueSize">The maximum queue size.</param>
            <param name="throttleWhenFull">A value indicating whether to block the upstream producer if the receiver queue is full.</param>
            <param name="attemptSynchronous">A value indicating whether to attempt synchronous delivery.</param>
            <returns>A queue-size constrained delivery policy.</returns>
        </member>
        <member name="M:Microsoft.Psi.DeliveryPolicy.WithGuarantees``1(Microsoft.Psi.DeliveryPolicy,System.Func{``0,System.Boolean})">
            <summary>
            Creates a typed delivery policy with guarantees by adding a message guaranteed function to an existing untyped delivery policy.
            </summary>
            <typeparam name="T">The type of the messages in the resulting delivery policy.</typeparam>
            <param name="deliveryPolicy">The untyped delivery policy.</param>
            <param name="guaranteeDelivery">A function that evaluates whether the delivery of a given message should be guaranteed.</param>
            <returns>The typed delivery policy with guarantees.</returns>
        </member>
        <member name="M:Microsoft.Psi.DeliveryPolicy.WithGuarantees``1(System.Func{``0,System.Boolean})">
            <summary>
            Creates a typed delivery policy with guarantees by adding a message guaranteed function to an existing untyped delivery policy.
            </summary>
            <typeparam name="T">The type of the messages in the resulting delivery policy.</typeparam>
            <param name="guaranteeDelivery">A function that evaluates whether the delivery of a given message should be guaranteed.</param>
            <returns>The typed delivery policy with guarantees.</returns>
        </member>
        <member name="T:Microsoft.Psi.DeliveryPolicy`1">
            <summary>
            Encapsulates the options for message delivery behavior.
            </summary>
            <typeparam name="T">The type of messages.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.DeliveryPolicy`1.#ctor(System.Int32,System.Int32,System.Nullable{System.TimeSpan},System.Boolean,System.Boolean,System.Func{`0,System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.DeliveryPolicy`1"/> class.
            </summary>
            <param name="initialQueueSize">The initial receiver queue size.</param>
            <param name="maximumQueueSize">The maximum receiver queue size.</param>
            <param name="maximumLatency">The maximum latency allowable for messages to be delivered.</param>
            <param name="throttleWhenFull">A value indicating whether to block the upstream producer if the receiver queue is full.</param>
            <param name="attemptSynchronous">A value indicating whether to attempt synchronous delivery.</param>
            <param name="guaranteeDelivery">A function that indicates for which messages delivery should be guaranteed.</param>
            <param name="name">Name used for debugging and diagnostics.</param>
        </member>
        <member name="P:Microsoft.Psi.DeliveryPolicy`1.ThrottleWhenFull">
            <summary>
            Gets a value indicating whether to block the upstream producer if the receiver queue is full.
            </summary>
            <remarks>Use with care, as it affects all other subscribers to the same producer and can introduce deadlocks (a blocked producer cannot process control messages anymore).</remarks>
        </member>
        <member name="P:Microsoft.Psi.DeliveryPolicy`1.InitialQueueSize">
            <summary>
            Gets the initial size of the receiver queue that holds the messages pending delivery.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.DeliveryPolicy`1.MaximumQueueSize">
            <summary>
            Gets the maximum size of the receiver queue that holds the messages pending delivery.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.DeliveryPolicy`1.MaximumLatency">
            <summary>
            Gets the maximum latency of items to be delivered. Items with a latency larger than this are discarded.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.DeliveryPolicy`1.AttemptSynchronousDelivery">
            <summary>
            Gets a value indicating whether the runtime should attempt synchronous delivery when possible.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.DeliveryPolicy`1.GuaranteeDelivery">
            <summary>
            Gets a function that indicates for which messages the delivery should be guaranteed.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.DeliveryPolicy`1.Name">
            <summary>
            Gets name used for debugging and diagnostics.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.DeliveryPolicy`1.op_Implicit(Microsoft.Psi.DeliveryPolicy)~Microsoft.Psi.DeliveryPolicy{`0}">
            <summary>
            Implicitly cast from an untyped to a typed delivery policy.
            </summary>
            <param name="policy">The untyped delivery policy.</param>
        </member>
        <member name="M:Microsoft.Psi.DeliveryPolicy`1.WithGuarantees(System.Func{`0,System.Boolean})">
            <summary>
            Creates a delivery policy with guarantees by adding a message guaranteed function to an existing delivery policy.
            </summary>
            <param name="guaranteeDelivery">A function that evaluates whether the delivery of a given message should be guaranteed.</param>
            <returns>The typed delivery policy with guarantees.</returns>
        </member>
        <member name="T:Microsoft.Psi.Envelope">
            <summary>
            Represents the envelope of a message published to a data stream.
            See <see cref="T:Microsoft.Psi.Message`1"/> for details.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Envelope.SourceId">
            <summary>
            The id of the stream that generated the message.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Envelope.SequenceId">
            <summary>
            The sequence number of this message, unique within the stream identified by <see cref="F:Microsoft.Psi.Envelope.SourceId"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Envelope.OriginatingTime">
            <summary>
            The originating time of the message, representing the time of the real-world event that led to the creation of this message.
            This value is used as a key when synchronizing messages across streams.
            This value must be propagated with any message derived from this message.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Envelope.CreationTime">
            <summary>
            The message creation time.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Envelope.#ctor(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Envelope"/> struct.
            </summary>
            <param name="originatingTime">The <see cref="F:Microsoft.Psi.Envelope.OriginatingTime"/> of this message.</param>
            <param name="creationTime">The <see cref="F:Microsoft.Psi.Envelope.CreationTime"/> of the message.</param>
            <param name="sourceId">The <see cref="F:Microsoft.Psi.Envelope.SourceId"/> of the message.</param>
            <param name="sequenceId">The unique <see cref="F:Microsoft.Psi.Envelope.SequenceId"/> of the message.</param>
        </member>
        <member name="M:Microsoft.Psi.Envelope.op_Equality(Microsoft.Psi.Envelope,Microsoft.Psi.Envelope)">
            <summary>
            Determines whether two instances are equal.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The object to compare to.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Microsoft.Psi.Envelope.op_Inequality(Microsoft.Psi.Envelope,Microsoft.Psi.Envelope)">
            <summary>
            Determines whether two instances are equal.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The object to compare to.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Microsoft.Psi.Envelope.ToString">
            <summary>
            Provide a string representation of this Timestamped instance.
            </summary>
            <returns>Payload preceded by originating time.</returns>
        </member>
        <member name="M:Microsoft.Psi.Envelope.Equals(System.Object)">
            <summary>
            Determines whether two instances are equal.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Microsoft.Psi.Envelope.GetHashCode">
            <summary>
            Returns a hash code for this instance, obtained by combining the hash codes of the instance fields.
            </summary>
            <returns>A hashcode.</returns>
        </member>
        <member name="T:Microsoft.Psi.IConsumer`1">
            <summary>
            Components that implement this interface are simple, single input consumers.
            </summary>
            <typeparam name="TIn">The type of message input.</typeparam>
        </member>
        <member name="P:Microsoft.Psi.IConsumer`1.In">
            <summary>
            Gets the input we receive messages on.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Available">
            <summary>
            Collection of greedy interpolators that act on immediately available data.
            </summary>
            <remarks>The interpolators defined by the <see cref="T:Microsoft.Psi.Available"/> class produce results
            based on what is available on the secondary stream at the moment the primary message
            arrives. As such, they depend on the wall-clock time of message arrival, and hence are
            not guaranteed to produce reproducible results. For reproducible interpolators, see
            the interpolators defined by the <see cref="T:Microsoft.Psi.Reproducible"/> static class.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Available.Exact``1">
            <summary>
            Greedy interpolator that selects the available value with an originating time exactly matching the interpolation time.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.ExactOrDefault``1(``0)">
            <summary>
            Greedy interpolator that selects the available value with an originating time exactly matching the interpolation time,
            or default if no such value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.Nearest``1">
            <summary>
            Greedy interpolator that selects the available value with an originating time nearest to the interpolation time.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.Nearest``1(Microsoft.Psi.RelativeTimeInterval)">
            <summary>
            Greedy interpolator that selects the available value with an originating time nearest to the interpolation time,
            within a specified <see cref="T:Microsoft.Psi.RelativeTimeInterval"/>.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="relativeTimeInterval">The relative time interval within which to search for the nearest message.</param>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.Nearest``1(System.TimeSpan)">
            <summary>
            Greedy interpolator that selects the available value with an originating time nearest to the interpolation time,
            within a given tolerance.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="tolerance">The tolerance within which to search for the nearest message.</param>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.NearestOrDefault``1(``0)">
            <summary>
            Greedy interpolator that selects the available value with an originating time nearest to the interpolation time,
            or default if no such value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.NearestOrDefault``1(Microsoft.Psi.RelativeTimeInterval,``0)">
            <summary>
            Greedy interpolator that selects the available value with an originating time nearest to the interpolation time,
            within a specified <see cref="T:Microsoft.Psi.RelativeTimeInterval"/>, or default if no such value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="relativeTimeInterval">The relative time interval within which to search for the nearest message.</param>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.NearestOrDefault``1(System.TimeSpan,``0)">
            <summary>
            Greedy interpolator that selects the available value with an originating time nearest to the interpolation time,
            within a given tolerance, or default if no such value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="tolerance">The tolerance within which to search for the nearest message.</param>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.First``1">
            <summary>
            Greedy interpolator that selects the first available value in the stream.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.First``1(Microsoft.Psi.RelativeTimeInterval)">
            <summary>
            Greedy interpolator that selects the first available value within a specified <see cref="T:Microsoft.Psi.RelativeTimeInterval"/>.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="relativeTimeInterval">The relative time interval within which to search for the first message.</param>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.First``1(System.TimeSpan)">
            <summary>
            Greedy interpolator that selects the first available value within a specified time tolerance.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="tolerance">The tolerance within which to search for the first message.</param>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.FirstOrDefault``1(``0)">
            <summary>
            Greedy interpolator that selects the first available value in the stream, or default if no such
            value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.FirstOrDefault``1(Microsoft.Psi.RelativeTimeInterval,``0)">
            <summary>
            Greedy interpolator that selects the first available value within a specified <see cref="T:Microsoft.Psi.RelativeTimeInterval"/>,
            or default if no such value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="relativeTimeInterval">The relative time interval within which to search for the first message.</param>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.FirstOrDefault``1(System.TimeSpan,``0)">
            <summary>
            Greedy interpolator that selects the first available value within a specified time tolerance, or default if
            no such value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="tolerance">The tolerance within which to search for the first message.</param>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.Last``1">
            <summary>
            Greedy interpolator that selects the last available value in the stream.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.Last``1(Microsoft.Psi.RelativeTimeInterval)">
            <summary>
            Greedy interpolator that selects the last available value within a specified <see cref="T:Microsoft.Psi.RelativeTimeInterval"/>.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="relativeTimeInterval">The relative time interval within which to search for the last message.</param>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.Last``1(System.TimeSpan)">
            <summary>
            Greedy interpolator that selects the first available value within a specified time tolerance.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="tolerance">The tolerance within which to search for the last message.</param>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.LastOrDefault``1(``0)">
            <summary>
            Greedy interpolator that selects the last available value in the stream, or default if no such
            value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.LastOrDefault``1(Microsoft.Psi.RelativeTimeInterval,``0)">
            <summary>
            Greedy interpolator that selects the last available value within a specified <see cref="T:Microsoft.Psi.RelativeTimeInterval"/>,
            or default if no such value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="relativeTimeInterval">The relative time interval within which to search for the last message.</param>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Available.LastOrDefault``1(System.TimeSpan,``0)">
            <summary>
            Greedy interpolator that selects the first available value within a specified time tolerance,
            or default if no such value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="tolerance">The tolerance within which to search for the last message.</param>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The greedy interpolator.</returns>
        </member>
        <member name="T:Microsoft.Psi.GreedyInterpolator`2">
            <summary>
            Defines a greedy stream interpolator.
            </summary>
            <typeparam name="TIn">The type of the input messages.</typeparam>
            <typeparam name="TResult">The type of the interpolation result.</typeparam>
            <remarks>Greedy interpolators produce results based on what is available on the secondary
            stream at the moment the primary message arrives. As such, they depend on the wall-clock
            time of message arrival, and hence are not guaranteed to produce reproducible results.</remarks>
        </member>
        <member name="T:Microsoft.Psi.GreedyInterpolator`1">
            <summary>
            Defines a greedy stream interpolator with the same input and output type.
            </summary>
            <typeparam name="T">The type of the input messages.</typeparam>
            <remarks>Greedy interpolators produce results based on what is available on the secondary
            stream at the moment the primary message arrives. As such, they depend on the wall-clock
            time of message arrival, and hence are not guaranteed to produce reproducible results.</remarks>
        </member>
        <member name="T:Microsoft.Psi.InterpolationResultType">
            <summary>
            Type of interpolation result.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.InterpolationResultType.DoesNotExist">
            <summary>
            No interpolation exists.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.InterpolationResultType.Created">
            <summary>
            An interpolation result was created based on the data.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.InterpolationResultType.InsufficientData">
            <summary>
            No interpolation result can be created due to insufficient data.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.InterpolationResult`1">
            <summary>
            Result of interpolation.
            </summary>
            <typeparam name="T">Type of values being interpolated.</typeparam>
        </member>
        <member name="F:Microsoft.Psi.InterpolationResult`1.Value">
            <summary>
            Interpolated value (if any).
            </summary>
        </member>
        <member name="F:Microsoft.Psi.InterpolationResult`1.Type">
            <summary>
            Type of interpolation result.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.InterpolationResult`1.ObsoleteTime">
            <summary>
            Time prior to which messages on the interpolation stream are obsolete and can safely be discarded.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.InterpolationResult`1.op_Equality(Microsoft.Psi.InterpolationResult{`0},Microsoft.Psi.InterpolationResult{`0})">
            <summary>
            Equality comparison.
            </summary>
            <param name="first">First interpolation result.</param>
            <param name="second">Second interpolation result.</param>
            <returns>A value indicating whether the interpolation results are equal.</returns>
        </member>
        <member name="M:Microsoft.Psi.InterpolationResult`1.op_Inequality(Microsoft.Psi.InterpolationResult{`0},Microsoft.Psi.InterpolationResult{`0})">
            <summary>
            Non-equality comparison.
            </summary>
            <param name="first">First interpolation result.</param>
            <param name="second">Second interpolation result.</param>
            <returns>A value indicating whether the interpolation results are non-equal.</returns>
        </member>
        <member name="M:Microsoft.Psi.InterpolationResult`1.InsufficientData">
            <summary>
            Construct interpolation result indicating insufficient data.
            </summary>
            <returns>Interpolation result indicating insufficient data.</returns>
        </member>
        <member name="M:Microsoft.Psi.InterpolationResult`1.DoesNotExist(System.DateTime)">
            <summary>
            Construct interpolation result indicating no interpolation can be constructed based on the data.
            </summary>
            <param name="obsoleteTime">Time prior to which messages on the interpolation stream are obsolete and can safely be discarded.</param>
            <returns>Interpolation result indicating no interpolation can be constructed based on the data.</returns>
        </member>
        <member name="M:Microsoft.Psi.InterpolationResult`1.Create(`0,System.DateTime)">
            <summary>
            Construct interpolation result indicating an interpolation was created based on the data.
            </summary>
            <param name="value">Resulting interpolation value.</param>
            <param name="obsoleteTime">Time prior to which messages on the interpolation stream are obsolete and can safely be discarded.</param>
            <returns>Interpolation result indicating an interpolation was created based on the data.</returns>
        </member>
        <member name="M:Microsoft.Psi.InterpolationResult`1.Equals(System.Object)">
            <summary>
            Equality comparison.
            </summary>
            <param name="obj">interpolation result to which to compare.</param>
            <returns>A value indicating equality.</returns>
        </member>
        <member name="M:Microsoft.Psi.InterpolationResult`1.GetHashCode">
            <summary>
            Generate a hashcode for the instance.
            </summary>
            <returns>The hashcode for the instance.</returns>
        </member>
        <member name="T:Microsoft.Psi.Interpolator`2">
            <summary>
            Defines a base abstract class for stream interpolators.
            </summary>
            <typeparam name="TIn">The type of the input messages.</typeparam>
            <typeparam name="TResult">The type of the interpolation result.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Interpolator`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Interpolator`2"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Interpolator`2.Interpolate(System.DateTime,System.Collections.Generic.IEnumerable{Microsoft.Psi.Message{`0}},System.Nullable{System.DateTime})">
            <summary>
            Interpolates a set of messages at a given time.
            </summary>
            <param name="interpolationTime">The time to interpolate.</param>
            <param name="messages">The set of messages from a stream.</param>
            <param name="closedOriginatingTime">An optional date-time that, when present, indicates at what time the stream was closed.</param>
            <returns>An interpolation result <see cref="T:Microsoft.Psi.InterpolationResult`1"/>.</returns>
        </member>
        <member name="T:Microsoft.Psi.Reproducible">
            <summary>
            Collection of reproducible interpolators.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.Exact``1">
            <summary>
            Reproducible interpolator that selects the value with an originating time exactly matching the interpolation time.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.ExactOrDefault``1(``0)">
            <summary>
            Reproducible interpolator that selects the value with an originating time exactly matching the interpolation time,
            or default if no such value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.Nearest``1">
            <summary>
            Reproducible interpolator that selects the value with an originating time nearest to the interpolation time.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)">
            <summary>
            Reproducible interpolator that selects the value with an originating time nearest to the interpolation time,
            within a specified <see cref="T:Microsoft.Psi.RelativeTimeInterval"/>.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="relativeTimeInterval">The relative time interval within which to search for the nearest message.</param>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.Nearest``1(System.TimeSpan)">
            <summary>
            Reproducible interpolator that selects the value with an originating time nearest to the interpolation time,
            within a given tolerance.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="tolerance">The tolerance within which to search for the nearest message.</param>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.NearestOrDefault``1(``0)">
            <summary>
            Reproducible interpolator that selects the value with an originating time nearest to the interpolation time,
            or default if no such value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.NearestOrDefault``1(Microsoft.Psi.RelativeTimeInterval,``0)">
            <summary>
            Reproducible interpolator that selects the value with an originating time nearest to the interpolation time,
            within a specified <see cref="T:Microsoft.Psi.RelativeTimeInterval"/>, or default if no such value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="relativeTimeInterval">The relative time interval within which to search for the nearest message.</param>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.NearestOrDefault``1(System.TimeSpan,``0)">
            <summary>
            Reproducible interpolator that selects the value with an originating time nearest to the interpolation time,
            within a given tolerance, or default if no such value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="tolerance">The tolerance within which to search for the nearest message.</param>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.First``1">
            <summary>
            Reproducible interpolator that selects the first value in the stream.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.First``1(Microsoft.Psi.RelativeTimeInterval)">
            <summary>
            Reproducible interpolator that selects the first value within a specified <see cref="T:Microsoft.Psi.RelativeTimeInterval"/>.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="relativeTimeInterval">The relative time interval within which to search for the first message.</param>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.First``1(System.TimeSpan)">
            <summary>
            Reproducible interpolator that selects the first value within a specified time tolerance.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="tolerance">The tolerance within which to search for the first message.</param>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.FirstOrDefault``1(``0)">
            <summary>
            Reproducible interpolator that selects the first value in the stream, or default if no such
            value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.FirstOrDefault``1(Microsoft.Psi.RelativeTimeInterval,``0)">
            <summary>
            Reproducible interpolator that selects the first value within a specified <see cref="T:Microsoft.Psi.RelativeTimeInterval"/>,
            or default if no such value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="relativeTimeInterval">The relative time interval within which to search for the first message.</param>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.FirstOrDefault``1(System.TimeSpan,``0)">
            <summary>
            Reproducible interpolator that selects the first value within a specified time tolerance, or default if
            no such value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="tolerance">The tolerance within which to search for the first message.</param>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.Last``1">
            <summary>
            Reproducible interpolator that selects the last value in the stream.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.Last``1(Microsoft.Psi.RelativeTimeInterval)">
            <summary>
            Reproducible interpolator that selects the last value within a specified <see cref="T:Microsoft.Psi.RelativeTimeInterval"/>.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="relativeTimeInterval">The relative time interval within which to search for the last message.</param>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.Last``1(System.TimeSpan)">
            <summary>
            Reproducible interpolator that selects the first value within a specified time tolerance.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="tolerance">The tolerance within which to search for the last message.</param>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.LastOrDefault``1(``0)">
            <summary>
            Reproducible interpolator that selects the last value in the stream, or default if no such
            value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.LastOrDefault``1(Microsoft.Psi.RelativeTimeInterval,``0)">
            <summary>
            Reproducible interpolator that selects the last value within a specified <see cref="T:Microsoft.Psi.RelativeTimeInterval"/>,
            or default if no such value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="relativeTimeInterval">The relative time interval within which to search for the last message.</param>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.LastOrDefault``1(System.TimeSpan,``0)">
            <summary>
            Reproducible interpolator that selects the first value within a specified time tolerance,
            or default if no such value is found.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="tolerance">The tolerance within which to search for the last message.</param>
            <param name="defaultValue">An optional default value to use.</param>
            <returns>The reproducible interpolator.</returns>
        </member>
        <member name="M:Microsoft.Psi.Reproducible.Linear">
            <summary>
            Reproducible interpolator that performs a linear interpolation, between
            the nearest messages to the originating time.
            </summary>
            <returns>The linear interpolator.</returns>
        </member>
        <member name="T:Microsoft.Psi.ReproducibleInterpolator`2">
            <summary>
            Defines a reproducible stream interpolator.
            </summary>
            <typeparam name="TIn">The type of the input messages.</typeparam>
            <typeparam name="TResult">The type of the interpolation result.</typeparam>
            <remarks>Reproducible interpolators produce results that do not depend on the wall-clock time of
            message arrival on a stream, i.e., they are based on originating times of messages. As a result,
            these interpolators might introduce extra delays as they might have to wait for enough messages on the
            secondary stream to prove that the interpolation result is correct, irrespective of any other messages
            that might arrive later.</remarks>
        </member>
        <member name="T:Microsoft.Psi.ReproducibleInterpolator`1">
            <summary>
            Defines a reproducible stream interpolator with the same input and output type.
            </summary>
            <typeparam name="T">The type of the input messages and of the result.</typeparam>
            <remarks>Reproducible interpolators produce results that do not depend on the wall-clock time of
            message arrival on a stream, i.e., they are based on originating times of messages. As a result,
            these interpolators might introduce extra delays as they might have to wait for enough messages on the
            secondary stream to prove that the interpolation result is correct, irrespective of any other messages
            that might arrive later.</remarks>
        </member>
        <member name="M:Microsoft.Psi.ReproducibleInterpolator`1.op_Implicit(Microsoft.Psi.RelativeTimeInterval)~Microsoft.Psi.ReproducibleInterpolator{`0}">
            <summary>
            Implicitly convert relative time intervals to the equivalent of a reproducible nearest match within that window.
            </summary>
            <param name="window">Window within which to match messages.</param>
        </member>
        <member name="M:Microsoft.Psi.ReproducibleInterpolator`1.op_Implicit(System.TimeSpan)~Microsoft.Psi.ReproducibleInterpolator{`0}">
            <summary>
            Implicitly convert timespan to the equivalent of a reproducible nearest match with that tolerance.
            </summary>
            <param name="tolerance">Relative window tolerance within which to match messages.</param>
        </member>
        <member name="T:Microsoft.Psi.IInterval`4">
            <summary>
            Represents an interval with bounded/unbounded and inclusive/exclusive end points.
            </summary>
            <typeparam name="TPoint">Type of point values.</typeparam>
            <typeparam name="TSpan">Type of spans between point values.</typeparam>
            <typeparam name="TEndpoint">Explicit endpoint type (instance of IIntervalEndpoint{TPoint}).</typeparam>
            <typeparam name="T">Concrete type implementing this interface.</typeparam>
        </member>
        <member name="P:Microsoft.Psi.IInterval`4.LeftEndpoint">
            <summary>
            Gets left interval endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IInterval`4.Left">
            <summary>
            Gets left endpoint value.
            </summary>
            <remarks>For convenience (same as LeftEnpoint.Point).</remarks>
        </member>
        <member name="P:Microsoft.Psi.IInterval`4.RightEndpoint">
            <summary>
            Gets right interval endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IInterval`4.Right">
            <summary>
            Gets right endpoint value.
            </summary>
            <remarks>For convenience (same as RightEnpoint.Point).</remarks>
        </member>
        <member name="P:Microsoft.Psi.IInterval`4.Span">
            <summary>
            Gets the span (or "diameter") of the interval.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IInterval`4.IsFinite">
            <summary>
            Gets a value indicating whether the interval is bounded at both ends.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IInterval`4.IsOpen">
            <summary>
            Gets a value indicating whether neither Left nor Right are inclusive.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IInterval`4.IsClosed">
            <summary>
            Gets a value indicating whether Left and Right are both inclusive.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IInterval`4.IsDegenerate">
            <summary>
            Gets a value indicating whether the interval represents a single point.
            </summary>
            <remarks>Same as !IsProper.</remarks>
        </member>
        <member name="P:Microsoft.Psi.IInterval`4.IsEmpty">
            <summary>
            Gets a value indicating whether the interval represents a single point with closed endpoints.
            </summary>
            <remarks>Same as !IsProper.</remarks>
        </member>
        <member name="P:Microsoft.Psi.IInterval`4.IsHalfBounded">
            <summary>
            Gets a value indicating whether the interval is unbounded at one end.
            </summary>
            <remarks>Same as !Left.Bounded || !Right.Bounded.</remarks>
        </member>
        <member name="P:Microsoft.Psi.IInterval`4.IsNegative">
            <summary>
            Gets a value indicating whether the interval is negative.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IInterval`4.Center">
            <summary>
            Gets a value indicating the center of the interval.
            </summary>
            <remarks>Throws when interval is unbounded.</remarks>
        </member>
        <member name="M:Microsoft.Psi.IInterval`4.PointIsWithin(`0)">
            <summary>
            Determines whether a point is within the interval.
            </summary>
            <remarks>Taking into account the inclusive/exclusive endpoints.</remarks>
            <param name="point">Point value to be tested.</param>
            <returns>Whether the point is within the interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.IInterval`4.Translate(`1)">
            <summary>
            Translate by a span distance.
            </summary>
            <remarks>Unbound points do not change.</remarks>
            <param name="span">Span by which to translate.</param>
            <returns>Translated interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.IInterval`4.Scale(`1,`1)">
            <summary>
            Scale from left point by a span distance.
            </summary>
            <param name="left">Span by which to scale left.</param>
            <param name="right">Span by which to scale right.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.IInterval`4.Scale(System.Single,System.Single)">
            <summary>
            Scale from left point by a factor.
            </summary>
            <param name="left">Factor by which to scale left.</param>
            <param name="right">Factor by which to scale right.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.IInterval`4.ScaleLeft(`1)">
            <summary>
            Scale from left point by a span distance.
            </summary>
            <param name="span">Span by which to scale.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.IInterval`4.ScaleLeft(System.Single)">
            <summary>
            Scale from left point by a factor.
            </summary>
            <param name="factor">Factor by which to scale.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.IInterval`4.ScaleCenter(`1)">
            <summary>
            Scale from center point by a span distance.
            </summary>
            <param name="span">Span by which to scale.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.IInterval`4.ScaleCenter(System.Single)">
            <summary>
            Scale from center point by a factor.
            </summary>
            <param name="factor">Factor by which to scale.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.IInterval`4.ScaleRight(`1)">
            <summary>
            Scale from right point by a span distance.
            </summary>
            <param name="span">Span by which to scale.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.IInterval`4.ScaleRight(System.Single)">
            <summary>
            Scale from right point by a factor.
            </summary>
            <param name="factor">Factor by which to scale.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.IInterval`4.IntersectsWith(Microsoft.Psi.IInterval{`0,`1,`2,`3})">
            <summary>
            Determine whether this interval intersects another.
            </summary>
            <remarks>Same as !Disjoint(...)</remarks>
            <param name="other">Other interval.</param>
            <returns>Whether there is an intersection.</returns>
        </member>
        <member name="M:Microsoft.Psi.IInterval`4.IsDisjointFrom(Microsoft.Psi.IInterval{`0,`1,`2,`3})">
            <summary>
            Determine whether this interval is disjoint with another.
            </summary>
            <remarks>Same as !Intersects(...)</remarks>
            <param name="other">Other interval.</param>
            <returns>Whether there is an intersection.</returns>
        </member>
        <member name="M:Microsoft.Psi.IInterval`4.IsSubsetOf(Microsoft.Psi.IInterval{`0,`1,`2,`3})">
            <summary>
            Determine whether this interval is a subset of another.
            </summary>
            <remarks>Subset may be equal (see <see cref="M:Microsoft.Psi.IInterval`4.IsProperSubsetOf(Microsoft.Psi.IInterval{`0,`1,`2,`3})"/>).</remarks>
            <param name="other">Other interval.</param>
            <returns>Whether this is a subset of the other.</returns>
        </member>
        <member name="M:Microsoft.Psi.IInterval`4.IsProperSubsetOf(Microsoft.Psi.IInterval{`0,`1,`2,`3})">
            <summary>
            Determine whether this interval is a proper subset of another.
            </summary>
            <remarks>Subset and not equal (see <see cref="M:Microsoft.Psi.IInterval`4.IsSubsetOf(Microsoft.Psi.IInterval{`0,`1,`2,`3})"/>).</remarks>
            <param name="other">Other interval.</param>
            <returns>Whether this is a subset of the other.</returns>
        </member>
        <member name="T:Microsoft.Psi.IIntervalEndpoint`1">
            <summary>
            Represents a bounded/unbounded, inclusive/exclusive interval endpoint value.
            </summary>
            <typeparam name="TPoint">Type of point value.</typeparam>
        </member>
        <member name="P:Microsoft.Psi.IIntervalEndpoint`1.Bounded">
            <summary>
            Gets a value indicating whether the endpoint is bounded.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IIntervalEndpoint`1.Inclusive">
            <summary>
            Gets a value indicating whether the endpoint is inclusive.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IIntervalEndpoint`1.Point">
            <summary>
            Gets the point value.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Interval`4">
            <summary>
            Represents an interval with bounded/unbounded and inclusive/exclusive end points.
            </summary>
            <typeparam name="TPoint">Type of point values.</typeparam>
            <typeparam name="TSpan">Type of spans between point values.</typeparam>
            <typeparam name="TEndpoint">Explicit endpoint type (instance of IIntervalEndpoint{TPoint}).</typeparam>
            <typeparam name="T">Concrete type implementing this interface.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.#ctor(`2,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Interval`4"/> class.
            </summary>
            <param name="left">Left interval endpoint.</param>
            <param name="right">Right interval endpoint.</param>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.LeftEndpoint">
            <summary>
            Gets left interval endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.Left">
            <summary>
            Gets left endpoint value.
            </summary>
            <remarks>For convenience (same as LeftEnpoint.Point).</remarks>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.RightEndpoint">
            <summary>
            Gets right interval endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.Right">
            <summary>
            Gets right endpoint value.
            </summary>
            <remarks>For convenience (same as LeftEnpoint.Point).</remarks>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.Span">
            <summary>
            Gets the span (or "diameter") of the interval.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.IsFinite">
            <summary>
            Gets a value indicating whether the interval is bounded at both ends.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.IsOpen">
            <summary>
            Gets a value indicating whether neither Left nor Right are inclusive.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.IsClosed">
            <summary>
            Gets a value indicating whether Left and Right are both inclusive.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.IsDegenerate">
            <summary>
            Gets a value indicating whether the interval represents a single point.
            </summary>
            <remarks>Same as !IsProper.</remarks>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.IsEmpty">
            <summary>
            Gets a value indicating whether the interval represents a single point with closed endpoints.
            </summary>
            <remarks>Same as !IsProperty.</remarks>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.IsHalfBounded">
            <summary>
            Gets a value indicating whether the interval is unbounded at one end.
            </summary>
            <remarks>Same as !Left.Bounded || !Right.Bounded.</remarks>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.IsNegative">
            <summary>
            Gets a value indicating whether the interval is negative.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.Center">
            <summary>
            Gets a value indicating the center of the interval.
            </summary>
            <remarks>Throws when interval is unbounded.</remarks>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.PointMinValue">
            <summary>
            Gets the point minimum value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.PointMaxValue">
            <summary>
            Gets the point maximum value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.SpanZeroValue">
            <summary>
            Gets the span zero value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.SpanMinValue">
            <summary>
            Gets the span minimum value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Interval`4.SpanMaxValue">
            <summary>
            Gets the span maximum value.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.op_Addition(Microsoft.Psi.Interval{`0,`1,`2,`3},`1)">
            <summary>
            Translate by a span distance.
            </summary>
            <remarks>Unbound points do not change.</remarks>
            <param name="interval">Interval to translate.</param>
            <param name="span">Span by which to translate.</param>
            <returns>Translated interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.op_Subtraction(Microsoft.Psi.Interval{`0,`1,`2,`3},`1)">
            <summary>
            Translate by a span distance.
            </summary>
            <remarks>Unbound points do not change.</remarks>
            <param name="interval">Interval to translate.</param>
            <param name="span">Span by which to translate.</param>
            <returns>Translated interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.PointIsWithin(`0)">
            <summary>
            Determines whether a point is within the interval.
            </summary>
            <remarks>Taking into account the inclusive/exclusive endpoints.</remarks>
            <param name="point">Point value to be tested.</param>
            <returns>Whether the point is within the interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.Translate(`1)">
            <summary>
            Translate by a span distance.
            </summary>
            <remarks>Unbound points do not change.</remarks>
            <param name="span">Span by which to translate.</param>
            <returns>Translated interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.Scale(`1,`1)">
            <summary>
            Scale endpoints by span distances.
            </summary>
            <param name="left">Span by which to scale left.</param>
            <param name="right">Span by which to scale right.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.Scale(System.Single,System.Single)">
            <summary>
            Scale endpoints by factors.
            </summary>
            <param name="left">Factor by which to scale left.</param>
            <param name="right">Factor by which to scale right.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.ScaleLeft(`1)">
            <summary>
            Scale left point by a span distance.
            </summary>
            <param name="span">Span by which to scale.</param>
            <returns>Constructed interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.ScaleLeft(System.Single)">
            <summary>
            Scale left point by a factor (helper for concrete instances).
            </summary>
            <param name="factor">Factor by which to scale.</param>
            <returns>Constructed interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.ScaleCenter(`1)">
            <summary>
            Scale center point by a span distance (helper for concrete instances).
            </summary>
            <param name="span">Span by which to scale.</param>
            <returns>Constructed interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.ScaleCenter(System.Single)">
            <summary>
            Scale center point by a factor (helper for concrete instances).
            </summary>
            <param name="factor">Factor by which to scale.</param>
            <returns>Constructed interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.ScaleRight(`1)">
            <summary>
            Scale right point by a span distance (helper for concrete instances).
            </summary>
            <param name="span">Span by which to scale.</param>
            <returns>Constructed interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.ScaleRight(System.Single)">
            <summary>
            Scale right point by a factor (helper for concrete instances).
            </summary>
            <param name="factor">Factor by which to scale.</param>
            <returns>Constructed interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.IntersectsWith(Microsoft.Psi.IInterval{`0,`1,`2,`3})">
            <summary>
            Determine whether this interval intersects another.
            </summary>
            <remarks>Same as !Disjoint(...)</remarks>
            <param name="other">Other interval.</param>
            <returns>Whether there is an intersection.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.IsDisjointFrom(Microsoft.Psi.IInterval{`0,`1,`2,`3})">
            <summary>
            Determine whether this interval is disjoint with another.
            </summary>
            <remarks>Same as !Intersects(...)</remarks>
            <param name="other">Other interval.</param>
            <returns>Whether there is an intersection.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.IsSubsetOf(Microsoft.Psi.IInterval{`0,`1,`2,`3})">
            <summary>
            Determine whether this interval is a subset of another.
            </summary>
            <remarks>Subset may be equal (see <see cref="M:Microsoft.Psi.Interval`4.IsProperSubsetOf(Microsoft.Psi.IInterval{`0,`1,`2,`3})"/>).</remarks>
            <param name="other">Other interval.</param>
            <returns>Whether this is a subset of the other.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.IsProperSubsetOf(Microsoft.Psi.IInterval{`0,`1,`2,`3})">
            <summary>
            Determine whether this interval is a proper subset of another.
            </summary>
            <remarks>Subset and not equal (see <see cref="M:Microsoft.Psi.Interval`4.IsSubsetOf(Microsoft.Psi.IInterval{`0,`1,`2,`3})"/>).</remarks>
            <param name="other">Other interval.</param>
            <returns>Whether this is a subset of the other.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.Coverage(System.Collections.Generic.IEnumerable{Microsoft.Psi.Interval{`0,`1,`2,`3}},System.Func{`2,`2,`3},Microsoft.Psi.Interval{`0,`1,`2,`3})">
            <summary>
            Determine coverage from minimum left to maximum right.
            </summary>
            <param name="intervals">Sequence of intervals.</param>
            <param name="ctor">Constructor function for interval type.</param>
            <param name="empty">Empty instance.</param>
            <remarks>Returns empty interval when sequence is empty or contains only empty intervals.</remarks>
            <returns>Interval from minimum left to maximum right value (or empty).</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.ComparePoints(`0,`0)">
            <summary>
            Compare points.
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>Less (-1), greater (+1) or equal (0).</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.ScaleSpan(`1,System.Double)">
            <summary>
            Scale a span by a given factor.
            </summary>
            <param name="span">Span value.</param>
            <param name="factor">Factor by which to scale.</param>
            <returns>Scaled span.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.NegateSpan(`1)">
            <summary>
            Negate span.
            </summary>
            <param name="span">Span to be negated.</param>
            <returns>Negated span.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.TranslatePoint(`0,`1)">
            <summary>
            Translate point by given span.
            </summary>
            <param name="point">Point value.</param>
            <param name="span">Span by which to translate.</param>
            <returns>Translated point.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.Difference(`0,`0)">
            <summary>
            Determine span between two given points.
            </summary>
            <param name="x">First point.</param>
            <param name="y">Second point.</param>
            <returns>Span between points.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.Translate(`1,System.Func{`0,System.Boolean,System.Boolean,`0,System.Boolean,System.Boolean,`3})">
            <summary>
            Translate by a span distance (helper for concrete instances).
            </summary>
            <remarks>Calls `ctor` function with constructor args.</remarks>
            <param name="span">Span by which to translate.</param>
            <param name="ctor">Constructor function for concrete instance (T).</param>
            <returns>Constructed T.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.Scale(`1,`1,System.Func{`0,System.Boolean,System.Boolean,`0,System.Boolean,System.Boolean,`3})">
            <summary>
            Scale by a span distance (helper for concrete instances).
            </summary>
            <remarks>Calls `ctor` function with constructor args.</remarks>
            <param name="left">Span by which to scale left.</param>
            <param name="right">Span by which to scale right.</param>
            <param name="ctor">Constructor function for concrete instance (T).</param>
            <returns>Constructed T.</returns>
        </member>
        <member name="M:Microsoft.Psi.Interval`4.Scale(System.Double,System.Double,System.Func{`0,System.Boolean,System.Boolean,`0,System.Boolean,System.Boolean,`3})">
            <summary>
            Scale by a factor (helper for concrete instances).
            </summary>
            <remarks>Calls `ctor` function with constructor args.</remarks>
            <param name="left">Factor by which to scale left.</param>
            <param name="right">Factor by which to scale right.</param>
            <param name="ctor">Constructor function for concrete instance (T).</param>
            <returns>Constructed T.</returns>
        </member>
        <member name="T:Microsoft.Psi.IntervalEndpoint`1">
            <summary>
            Represents a bounded/unbounded, inclusive/exclusive interval endpoint value.
            </summary>
            <typeparam name="TPoint">Type of point value.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.IntervalEndpoint`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.IntervalEndpoint`1"/> class.
            </summary>(arbitrary)
            <remarks>This is a bounded instance.</remarks>
            <param name="point">Point value.</param>
            <param name="inclusive">Whether the point itself is included.</param>
        </member>
        <member name="M:Microsoft.Psi.IntervalEndpoint`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.IntervalEndpoint`1"/> class.
            </summary>
            <remarks>This is an unbounded instance with a min/max point value.</remarks>
            <param name="minOrMax">Min/max point value (e.g. DateTime.MinValue, double.MinValue, ...)</param>
        </member>
        <member name="P:Microsoft.Psi.IntervalEndpoint`1.Bounded">
            <summary>
            Gets a value indicating whether the endpoint is bounded.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IntervalEndpoint`1.Inclusive">
            <summary>
            Gets a value indicating whether the endpoint is inclusive.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IntervalEndpoint`1.Point">
            <summary>
            Gets the point value.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.IntInterval">
            <summary>
            Represents an integer interval with bounded/unbounded and inclusive/exclusive end points.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.IntInterval.Infinite">
            <summary>
            Canonical infinite interval (unbounded on both ends).
            </summary>
        </member>
        <member name="F:Microsoft.Psi.IntInterval.Empty">
            <summary>
            Canonical empty instance (bounded, non-inclusive, single point).
            </summary>
        </member>
        <member name="F:Microsoft.Psi.IntInterval.Zero">
            <summary>
            Zero interval (unbounded but inclusive, zero value).
            </summary>
        </member>
        <member name="M:Microsoft.Psi.IntInterval.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.IntInterval"/> class.
            </summary>
            <remarks>Defaults to inclusive.</remarks>
            <param name="leftPoint">Left bound point.</param>
            <param name="rightPoint">Right bound point.</param>
        </member>
        <member name="M:Microsoft.Psi.IntInterval.#ctor(System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.IntInterval"/> class.
            </summary>
            <param name="leftPoint">Left bound point.</param>
            <param name="leftInclusive">Whether left point is inclusive.</param>
            <param name="rightPoint">Right bound point.</param>
            <param name="rightInclusive">Whether right point is inclusive.</param>
        </member>
        <member name="M:Microsoft.Psi.IntInterval.#ctor(System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.IntInterval"/> class.
            </summary>
            <param name="leftPoint">Left bound point (or min value if unbound).</param>
            <param name="leftInclusive">Whether left point is inclusive (always false if unbound).</param>
            <param name="leftBounded">Whether left point is bounded.</param>
            <param name="rightPoint">Right bound point (or min value if unbound).</param>
            <param name="rightInclusive">Whether right point is inclusive (always false if unbound).</param>
            <param name="rightBounded">Whether right point is bounded.</param>
        </member>
        <member name="M:Microsoft.Psi.IntInterval.#ctor(Microsoft.Psi.IntervalEndpoint{System.Int32},Microsoft.Psi.IntervalEndpoint{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.IntInterval"/> class.
            </summary>
            <param name="leftEndpoint">Left endpoint.</param>
            <param name="rightEndpoint">Right endpoint.</param>
        </member>
        <member name="P:Microsoft.Psi.IntInterval.PointMinValue">
            <summary>
            Gets the point minimum value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IntInterval.PointMaxValue">
            <summary>
            Gets the point maximum value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IntInterval.SpanZeroValue">
            <summary>
            Gets the span zero value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IntInterval.SpanMinValue">
            <summary>
            Gets the span minimum value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IntInterval.SpanMaxValue">
            <summary>
            Gets the span maximum value.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.IntInterval.Coverage(System.Collections.Generic.IEnumerable{Microsoft.Psi.IntInterval})">
            <summary>
            Determine coverage from minimum left to maximum right.
            </summary>
            <param name="intervals">Sequence of intervals.</param>
            <remarks>Returns negative interval from max to min point when sequence is empty.</remarks>
            <returns>Interval from minimum left to maximum right value.</returns>
        </member>
        <member name="M:Microsoft.Psi.IntInterval.LeftBounded(System.Int32,System.Boolean)">
            <summary>
            Constructor helper for left-bound instances.
            </summary>
            <param name="left">Left bound point.</param>
            <param name="inclusive">Whether left point is inclusive.</param>
            <returns>A left-bound instance of the <see cref="T:Microsoft.Psi.IntInterval"/> class.</returns>
        </member>
        <member name="M:Microsoft.Psi.IntInterval.LeftBounded(System.Int32)">
            <summary>
            Constructor helper for left-bound instances.
            </summary>
            <remarks>Defaults to inclusive.</remarks>
            <param name="left">Left bound point.</param>
            <returns>A left-bound instance of the <see cref="T:Microsoft.Psi.IntInterval"/> class.</returns>
        </member>
        <member name="M:Microsoft.Psi.IntInterval.RightBounded(System.Int32,System.Boolean)">
            <summary>
            Constructor helper for right-bound instances.
            </summary>
            <param name="right">Right bound point.</param>
            <param name="inclusive">Whether right point is inclusive.</param>
            <returns>A right-bound instance of the <see cref="T:Microsoft.Psi.IntInterval"/> class.</returns>
        </member>
        <member name="M:Microsoft.Psi.IntInterval.RightBounded(System.Int32)">
            <summary>
            Constructor helper for right-bound instances.
            </summary>
            <remarks>Defaults to inclusive.</remarks>
            <param name="right">Right bound point.</param>
            <returns>A right-bound instance of the <see cref="T:Microsoft.Psi.IntInterval"/> class.</returns>
        </member>
        <member name="M:Microsoft.Psi.IntInterval.Translate(System.Int32)">
            <summary>
            Translate by a span distance.
            </summary>
            <remarks>Unbound points do not change.</remarks>
            <param name="span">Span by which to translate.</param>
            <returns>Translated interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.IntInterval.Scale(System.Int32,System.Int32)">
            <summary>
            Scale endpoints by span distances.
            </summary>
            <param name="left">Span by which to scale left.</param>
            <param name="right">Span by which to scale right.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.IntInterval.Scale(System.Single,System.Single)">
            <summary>
            Scale endpoints by factors.
            </summary>
            <param name="left">Factor by which to scale left.</param>
            <param name="right">Factor by which to scale right.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.IntInterval.ScaleSpan(System.Int32,System.Double)">
            <summary>
            Scale a span by a given factor.
            </summary>
            <param name="span">Span value.</param>
            <param name="factor">Factor by which to scale.</param>
            <returns>Scaled span.</returns>
        </member>
        <member name="M:Microsoft.Psi.IntInterval.NegateSpan(System.Int32)">
            <summary>
            Negate span.
            </summary>
            <param name="span">Span to be negated.</param>
            <returns>Negated span..</returns>
        </member>
        <member name="M:Microsoft.Psi.IntInterval.TranslatePoint(System.Int32,System.Int32)">
            <summary>
            Translate point by given span.
            </summary>
            <param name="point">Point value.</param>
            <param name="span">Span by which to translate.</param>
            <returns>Translated point.</returns>
        </member>
        <member name="M:Microsoft.Psi.IntInterval.Difference(System.Int32,System.Int32)">
            <summary>
            Determine span between two given points.
            </summary>
            <param name="x">First point.</param>
            <param name="y">Second point.</param>
            <returns>Span between points.</returns>
        </member>
        <member name="M:Microsoft.Psi.IntInterval.ComparePoints(System.Int32,System.Int32)">
            <summary>
            Compare points.
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>Less (-1), greater (+1) or equal (0).</returns>
        </member>
        <member name="T:Microsoft.Psi.RealInterval">
            <summary>
            Represents a real (double) interval with bounded/unbounded and inclusive/exclusive end points.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.RealInterval.Infinite">
            <summary>
            Canonical infinite interval (unbounded on both ends).
            </summary>
        </member>
        <member name="F:Microsoft.Psi.RealInterval.Empty">
            <summary>
            Canonical empty instance (bounded, non-inclusive, single point).
            </summary>
        </member>
        <member name="F:Microsoft.Psi.RealInterval.Zero">
            <summary>
            Zero interval (unbounded but inclusive, zero value).
            </summary>
        </member>
        <member name="M:Microsoft.Psi.RealInterval.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.RealInterval"/> class.
            </summary>
            <remarks>Defaults to inclusive.</remarks>
            <param name="leftPoint">Left bound point.</param>
            <param name="rightPoint">Right bound point.</param>
        </member>
        <member name="M:Microsoft.Psi.RealInterval.#ctor(System.Double,System.Boolean,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.RealInterval"/> class.
            </summary>
            <param name="leftPoint">Left bound point.</param>
            <param name="leftInclusive">Whether left point is inclusive.</param>
            <param name="rightPoint">Right bound point.</param>
            <param name="rightInclusive">Whether right point is inclusive.</param>
        </member>
        <member name="M:Microsoft.Psi.RealInterval.#ctor(System.Double,System.Boolean,System.Boolean,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.RealInterval"/> class.
            </summary>
            <param name="leftPoint">Left bound point (or min value if unbound).</param>
            <param name="leftInclusive">Whether left point is inclusive (always false if unbound).</param>
            <param name="leftBounded">Whether left point is bounded.</param>
            <param name="rightPoint">Right bound point (or min value if unbound).</param>
            <param name="rightInclusive">Whether right point is inclusive (always false if unbound).</param>
            <param name="rightBounded">Whether right point is bounded.</param>
        </member>
        <member name="M:Microsoft.Psi.RealInterval.#ctor(Microsoft.Psi.IntervalEndpoint{System.Double},Microsoft.Psi.IntervalEndpoint{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.RealInterval"/> class.
            </summary>
            <param name="leftEndpoint">Left endpoint.</param>
            <param name="rightEndpoint">Right endpoint.</param>
        </member>
        <member name="P:Microsoft.Psi.RealInterval.PointMinValue">
            <summary>
            Gets the point minimum value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.RealInterval.PointMaxValue">
            <summary>
            Gets the point maximum value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.RealInterval.SpanZeroValue">
            <summary>
            Gets the span zero value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.RealInterval.SpanMinValue">
            <summary>
            Gets the span minimum value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.RealInterval.SpanMaxValue">
            <summary>
            Gets the span maximum value.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.RealInterval.Coverage(System.Collections.Generic.IEnumerable{Microsoft.Psi.RealInterval})">
            <summary>
            Determine coverage from minimum left to maximum right.
            </summary>
            <param name="intervals">Sequence of intervals.</param>
            <remarks>Returns negative interval from max to min point when sequence is empty.</remarks>
            <returns>Interval from minimum left to maximum right value.</returns>
        </member>
        <member name="M:Microsoft.Psi.RealInterval.LeftBounded(System.Double,System.Boolean)">
            <summary>
            Constructor helper for left-bound instances.
            </summary>
            <param name="left">Left bound point.</param>
            <param name="inclusive">Whether left point is inclusive.</param>
            <returns>A left-bound instance of the <see cref="T:Microsoft.Psi.RealInterval"/> class.</returns>
        </member>
        <member name="M:Microsoft.Psi.RealInterval.LeftBounded(System.Double)">
            <summary>
            Constructor helper for left-bound instances.
            </summary>
            <remarks>Defaults to inclusive.</remarks>
            <param name="left">Left bound point.</param>
            <returns>A left-bound instance of the <see cref="T:Microsoft.Psi.RealInterval"/> class.</returns>
        </member>
        <member name="M:Microsoft.Psi.RealInterval.RightBounded(System.Double,System.Boolean)">
            <summary>
            Constructor helper for right-bound instances.
            </summary>
            <param name="right">Right bound point.</param>
            <param name="inclusive">Whether right point is inclusive.</param>
            <returns>A right-bound instance of the <see cref="T:Microsoft.Psi.RealInterval"/> class.</returns>
        </member>
        <member name="M:Microsoft.Psi.RealInterval.RightBounded(System.Double)">
            <summary>
            Constructor helper for right-bound instances.
            </summary>
            <remarks>Defaults to inclusive.</remarks>
            <param name="right">Right bound point.</param>
            <returns>A right-bound instance of the <see cref="T:Microsoft.Psi.RealInterval"/> class.</returns>
        </member>
        <member name="M:Microsoft.Psi.RealInterval.Translate(System.Double)">
            <summary>
            Translate by a span distance.
            </summary>
            <remarks>Unbound points do not change.</remarks>
            <param name="span">Span by which to translate.</param>
            <returns>Translated interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.RealInterval.Scale(System.Double,System.Double)">
            <summary>
            Scale endpoints by span distances.
            </summary>
            <param name="left">Span by which to scale left.</param>
            <param name="right">Span by which to scale right.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.RealInterval.Scale(System.Single,System.Single)">
            <summary>
            Scale endpoints by factors.
            </summary>
            <param name="left">Factor by which to scale left.</param>
            <param name="right">Factor by which to scale right.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.RealInterval.ScaleSpan(System.Double,System.Double)">
            <summary>
            Scale a span by a given factor.
            </summary>
            <param name="span">Span value.</param>
            <param name="factor">Factor by which to scale.</param>
            <returns>Scaled span.</returns>
        </member>
        <member name="M:Microsoft.Psi.RealInterval.NegateSpan(System.Double)">
            <summary>
            Negate span.
            </summary>
            <param name="span">Span to be negated.</param>
            <returns>Negated span.</returns>
        </member>
        <member name="M:Microsoft.Psi.RealInterval.TranslatePoint(System.Double,System.Double)">
            <summary>
            Translate point by given span.
            </summary>
            <param name="point">Point value.</param>
            <param name="span">Span by which to translate.</param>
            <returns>Translated point.</returns>
        </member>
        <member name="M:Microsoft.Psi.RealInterval.Difference(System.Double,System.Double)">
            <summary>
            Determine span between two given points.
            </summary>
            <param name="x">First point.</param>
            <param name="y">Second point.</param>
            <returns>Span between points.</returns>
        </member>
        <member name="M:Microsoft.Psi.RealInterval.ComparePoints(System.Double,System.Double)">
            <summary>
            Compare points.
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>Less (-1), greater (+1) or equal (0).</returns>
        </member>
        <member name="T:Microsoft.Psi.RelativeTimeInterval">
            <summary>
            Represents a TimeSpan interval with bounded/unbounded and inclusive/exclusive end points.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.RelativeTimeInterval.Infinite">
            <summary>
            Canonical infinite interval (unbounded on both ends).
            </summary>
        </member>
        <member name="F:Microsoft.Psi.RelativeTimeInterval.Empty">
            <summary>
            Canonical empty instance (bounded, non-inclusive, single point).
            </summary>
        </member>
        <member name="F:Microsoft.Psi.RelativeTimeInterval.Zero">
            <summary>
            Zero interval (unbounded but inclusive, zero value).
            </summary>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.RelativeTimeInterval"/> class.
            </summary>
            <remarks>Defaults to inclusive.</remarks>
            <param name="leftPoint">Left bound point.</param>
            <param name="rightPoint">Right bound point.</param>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.#ctor(System.TimeSpan,System.Boolean,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.RelativeTimeInterval"/> class.
            </summary>
            <param name="leftPoint">Left bound point.</param>
            <param name="leftInclusive">Whether left point is inclusive.</param>
            <param name="rightPoint">Right bound point.</param>
            <param name="rightInclusive">Whether right point is inclusive.</param>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.#ctor(System.TimeSpan,System.Boolean,System.Boolean,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.RelativeTimeInterval"/> class.
            </summary>
            <param name="leftPoint">Left bound point (or min value if unbound).</param>
            <param name="leftInclusive">Whether left point is inclusive (always false if unbound).</param>
            <param name="leftBounded">Whether left point is bounded.</param>
            <param name="rightPoint">Right bound point (or min value if unbound).</param>
            <param name="rightInclusive">Whether right point is inclusive (always false if unbound).</param>
            <param name="rightBounded">Whether right point is bounded.</param>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.#ctor(Microsoft.Psi.IntervalEndpoint{System.TimeSpan},Microsoft.Psi.IntervalEndpoint{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.RelativeTimeInterval"/> class.
            </summary>
            <param name="leftEndpoint">Left endpoint.</param>
            <param name="rightEndpoint">Right endpoint.</param>
        </member>
        <member name="P:Microsoft.Psi.RelativeTimeInterval.PointMinValue">
            <summary>
            Gets the point minimum value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.RelativeTimeInterval.PointMaxValue">
            <summary>
            Gets the point maximum value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.RelativeTimeInterval.SpanZeroValue">
            <summary>
            Gets the span zero value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.RelativeTimeInterval.SpanMinValue">
            <summary>
            Gets the span minimum value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.RelativeTimeInterval.SpanMaxValue">
            <summary>
            Gets the span maximum value.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.op_Equality(Microsoft.Psi.RelativeTimeInterval,Microsoft.Psi.RelativeTimeInterval)">
            <summary>
            Equality operator that returns true if the operands are equal, false otherwise.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>A value indicating whether the operands are equal.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.op_Inequality(Microsoft.Psi.RelativeTimeInterval,Microsoft.Psi.RelativeTimeInterval)">
            <summary>
            Inequality operator that returns true if the operands are not equal, false otherwise.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>A value indicating whether the operands are not equal.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.op_Addition(System.DateTime,Microsoft.Psi.RelativeTimeInterval)">
            <summary>
            Construct TimeInterval relative to an origin (DateTime).
            </summary>
            <param name="origin">Origin time point.</param>
            <param name="relative">Relative endpoints.</param>
            <returns>Translated interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.Past">
            <summary>
            Returns a relative time interval describing the past. The returned interval includes the present moment.
            </summary>
            <returns>A relative time interval describing the past.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.Past(System.TimeSpan,System.Boolean)">
            <summary>
            Returns a relative time interval of a specified duration in the past. The returned interval includes the present moment.
            </summary>
            <param name="duration">The duration of the time interval.</param>
            <param name="inclusive">Indicates if the interval should be inclusive of the left endpoint.</param>
            <returns>A relative time interval of a specified duration in the past.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.Future">
            <summary>
            Returns a relative time interval describing the future. The returned interval includes the present moment.
            </summary>
            <returns>A relative time interval describing the future.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.Future(System.TimeSpan,System.Boolean)">
            <summary>
            Returns a relative time interval of a specified duration in the future. The returned interval includes the present moment.
            </summary>
            <param name="duration">The duration of the time interval.</param>
            <param name="inclusive">Indicates if the interval should be inclusive of the right endpoint.</param>
            <returns>A relative time interval of a specified duration in the future.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.Coverage(System.Collections.Generic.IEnumerable{Microsoft.Psi.RelativeTimeInterval})">
            <summary>
            Determine coverage from minimum left to maximum right.
            </summary>
            <param name="intervals">Sequence of intervals.</param>
            <remarks>Returns negative interval from max to min point when sequence is empty.</remarks>
            <returns>Interval from minimum left to maximum right value.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.LeftBounded(System.TimeSpan,System.Boolean)">
            <summary>
            Constructor helper for left-bound instances.
            </summary>
            <param name="left">Left bound point.</param>
            <param name="inclusive">Whether left point is inclusive.</param>
            <returns>A left-bound instance of the <see cref="T:Microsoft.Psi.RelativeTimeInterval"/> class.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.LeftBounded(System.TimeSpan)">
            <summary>
            Constructor helper for left-bound instances.
            </summary>
            <remarks>Defaults to inclusive.</remarks>
            <param name="left">Left bound point.</param>
            <returns>A left-bound instance of the <see cref="T:Microsoft.Psi.RelativeTimeInterval"/> class.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.RightBounded(System.TimeSpan,System.Boolean)">
            <summary>
            Constructor helper for right-bound instances.
            </summary>
            <param name="right">Right bound point.</param>
            <param name="inclusive">Whether right point is inclusive.</param>
            <returns>A right-bound instance of the <see cref="T:Microsoft.Psi.RelativeTimeInterval"/> class.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.RightBounded(System.TimeSpan)">
            <summary>
            Constructor helper for right-bound instances.
            </summary>
            <remarks>Defaults to inclusive.</remarks>
            <param name="right">Right bound point.</param>
            <returns>A right-bound instance of the <see cref="T:Microsoft.Psi.RelativeTimeInterval"/> class.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.Translate(System.TimeSpan)">
            <summary>
            Translate by a span distance.
            </summary>
            <remarks>Unbound points do not change.</remarks>
            <param name="span">Span by which to translate.</param>
            <returns>Translated interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.Scale(System.TimeSpan,System.TimeSpan)">
            <summary>
            Scale endpoints by span distances.
            </summary>
            <param name="left">Span by which to scale left.</param>
            <param name="right">Span by which to scale right.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.Scale(System.Single,System.Single)">
            <summary>
            Scale endpoints by factors.
            </summary>
            <param name="left">Factor by which to scale left.</param>
            <param name="right">Factor by which to scale right.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.Equals(Microsoft.Psi.RelativeTimeInterval)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.ScaleSpan(System.TimeSpan,System.Double)">
            <summary>
            Scale a span by a given factor.
            </summary>
            <param name="span">Span value.</param>
            <param name="factor">Factor by which to scale.</param>
            <returns>Scaled span.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.NegateSpan(System.TimeSpan)">
            <summary>
            Negate span.
            </summary>
            <param name="span">Span to be negated.</param>
            <returns>Negated span.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.TranslatePoint(System.TimeSpan,System.TimeSpan)">
            <summary>
            Translate point by given span.
            </summary>
            <param name="point">Point value.</param>
            <param name="span">Span by which to translate.</param>
            <returns>Translated point.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.Difference(System.TimeSpan,System.TimeSpan)">
            <summary>
            Determine span between two given points.
            </summary>
            <param name="x">First point.</param>
            <param name="y">Second point.</param>
            <returns>Span between points.</returns>
        </member>
        <member name="M:Microsoft.Psi.RelativeTimeInterval.ComparePoints(System.TimeSpan,System.TimeSpan)">
            <summary>
            Compare points.
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>Less (-1), greater (+1) or equal (0).</returns>
        </member>
        <member name="T:Microsoft.Psi.TimeInterval">
            <summary>
            Represents a time interval with bounded/unbounded and inclusive/exclusive end points.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.TimeInterval.Infinite">
            <summary>
            Canonical infinite interval (unbounded on both ends).
            </summary>
        </member>
        <member name="F:Microsoft.Psi.TimeInterval.Empty">
            <summary>
            Canonical empty instance (bounded, non-inclusive, single point).
            </summary>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.#ctor(System.DateTime,Microsoft.Psi.RelativeTimeInterval)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.TimeInterval"/> class.
            </summary>
            <param name="origin">Origin around which interval is to be created.</param>
            <param name="relative">Time span interval specifying relative endpoints, bounding and inclusivity.</param>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.TimeInterval"/> class.
            </summary>
            <remarks>Defaults to inclusive.</remarks>
            <param name="leftPoint">Left bound point.</param>
            <param name="rightPoint">Right bound point.</param>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.#ctor(System.DateTime,System.Boolean,System.DateTime,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.TimeInterval"/> class.
            </summary>
            <param name="leftPoint">Left bound point.</param>
            <param name="leftInclusive">Whether left point is inclusive.</param>
            <param name="rightPoint">Right bound point.</param>
            <param name="rightInclusive">Whether right point is inclusive.</param>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.#ctor(System.DateTime,System.Boolean,System.Boolean,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.TimeInterval"/> class.
            </summary>
            <param name="leftPoint">Left bound point (or min value if unbound).</param>
            <param name="leftInclusive">Whether left point is inclusive (always false if unbound).</param>
            <param name="leftBounded">Whether left point is bounded.</param>
            <param name="rightPoint">Right bound point (or min value if unbound).</param>
            <param name="rightInclusive">Whether right point is inclusive (always false if unbound).</param>
            <param name="rightBounded">Whether right point is bounded.</param>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.#ctor(Microsoft.Psi.IntervalEndpoint{System.DateTime},Microsoft.Psi.IntervalEndpoint{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.TimeInterval"/> class.
            </summary>
            <param name="leftEndpoint">Left endpoint.</param>
            <param name="rightEndpoint">Right endpoint.</param>
        </member>
        <member name="P:Microsoft.Psi.TimeInterval.PointMinValue">
            <summary>
            Gets the point minimum value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.TimeInterval.PointMaxValue">
            <summary>
            Gets the point maximum value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.TimeInterval.SpanZeroValue">
            <summary>
            Gets the span zero value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.TimeInterval.SpanMinValue">
            <summary>
            Gets the span minimum value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.TimeInterval.SpanMaxValue">
            <summary>
            Gets the span maximum value.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.Coverage(System.Collections.Generic.IEnumerable{Microsoft.Psi.TimeInterval})">
            <summary>
            Determine coverage from minimum left to maximum right.
            </summary>
            <param name="intervals">Sequence of intervals.</param>
            <remarks>Returns negative interval from max to min point when sequence is empty.</remarks>
            <returns>Interval from minimum left to maximum right value.</returns>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.LeftBounded(System.DateTime,System.Boolean)">
            <summary>
            Constructor helper for left-bound instances.
            </summary>
            <param name="left">Left bound point.</param>
            <param name="inclusive">Whether left point is inclusive.</param>
            <returns>A left-bound instance of the <see cref="T:Microsoft.Psi.TimeInterval"/> class.</returns>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.LeftBounded(System.DateTime)">
            <summary>
            Constructor helper for left-bound instances.
            </summary>
            <remarks>Defaults to inclusive.</remarks>
            <param name="left">Left bound point.</param>
            <returns>A left-bound instance of the <see cref="T:Microsoft.Psi.TimeInterval"/> class.</returns>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.RightBounded(System.DateTime,System.Boolean)">
            <summary>
            Constructor helper for right-bound instances.
            </summary>
            <param name="right">Right bound point.</param>
            <param name="inclusive">Whether right point is inclusive.</param>
            <returns>A right-bound instance of the <see cref="T:Microsoft.Psi.TimeInterval"/> class.</returns>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.RightBounded(System.DateTime)">
            <summary>
            Constructor helper for right-bound instances.
            </summary>
            <remarks>Defaults to inclusive.</remarks>
            <param name="right">Right bound point.</param>
            <returns>A right-bound instance of the <see cref="T:Microsoft.Psi.TimeInterval"/> class.</returns>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.Translate(System.TimeSpan)">
            <summary>
            Translate by a span distance.
            </summary>
            <remarks>Unbound points do not change.</remarks>
            <param name="span">Span by which to translate.</param>
            <returns>Translated interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.Scale(System.TimeSpan,System.TimeSpan)">
            <summary>
            Scale endpoints by span distances.
            </summary>
            <param name="left">Span by which to scale left.</param>
            <param name="right">Span by which to scale right.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.Scale(System.Single,System.Single)">
            <summary>
            Scale endpoints by factors.
            </summary>
            <param name="left">Factor by which to scale left.</param>
            <param name="right">Factor by which to scale right.</param>
            <returns>Scaled interval.</returns>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.ScaleSpan(System.TimeSpan,System.Double)">
            <summary>
            Scale a span by a given factor.
            </summary>
            <param name="span">Span value.</param>
            <param name="factor">Factor by which to scale.</param>
            <returns>Scaled span.</returns>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.NegateSpan(System.TimeSpan)">
            <summary>
            Negate span.
            </summary>
            <param name="span">Span to be negated.</param>
            <returns>Negated span.</returns>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.TranslatePoint(System.DateTime,System.TimeSpan)">
            <summary>
            Translate point by given span.
            </summary>
            <param name="point">Point value.</param>
            <param name="span">Span by which to translate.</param>
            <returns>Translated point.</returns>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.Difference(System.DateTime,System.DateTime)">
            <summary>
            Determine span between two given points.
            </summary>
            <param name="x">First point.</param>
            <param name="y">Second point.</param>
            <returns>Span between points.</returns>
        </member>
        <member name="M:Microsoft.Psi.TimeInterval.ComparePoints(System.DateTime,System.DateTime)">
            <summary>
            Compare points.
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>Less (-1), greater (+1) or equal (0).</returns>
        </member>
        <member name="T:Microsoft.Psi.IProducer`1">
            <summary>
            Components that implement this interface are simple, single output generators.
            </summary>
            <typeparam name="TOut">The type of the component output.</typeparam>
        </member>
        <member name="P:Microsoft.Psi.IProducer`1.Out">
            <summary>
            Gets the stream to write messages to.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.IStreamMetadata">
            <summary>
            Represents metadata used in storing stream data in a store.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IStreamMetadata.Name">
            <summary>
            Gets the name of the stream the metadata represents.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IStreamMetadata.Id">
            <summary>
            Gets the id of the stream the metadata represents.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IStreamMetadata.TypeName">
            <summary>
            Gets the name of the type of data contained in the stream the metadata represents.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IStreamMetadata.SupplementalMetadataTypeName">
            <summary>
            Gets the name of the type of supplemental metadata for the stream the metadata represents.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IStreamMetadata.StoreName">
            <summary>
            Gets the name of the store containing the stream.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IStreamMetadata.StorePath">
            <summary>
            Gets the path of the store containing the stream.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IStreamMetadata.OpenedTime">
            <summary>
            Gets the time when the stream was opened.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IStreamMetadata.ClosedTime">
            <summary>
            Gets the time when the stream was closed.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IStreamMetadata.IsClosed">
            <summary>
            Gets a value indicating whether the stream has been closed.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IStreamMetadata.FirstMessageCreationTime">
            <summary>
            Gets the first creation time of a message in the stream.
            </summary>
            <seealso cref="F:Microsoft.Psi.Envelope.CreationTime"/>
        </member>
        <member name="P:Microsoft.Psi.IStreamMetadata.LastMessageCreationTime">
            <summary>
            Gets the last creation time of a message in the stream.
            </summary>
            <seealso cref="F:Microsoft.Psi.Envelope.CreationTime"/>
        </member>
        <member name="P:Microsoft.Psi.IStreamMetadata.FirstMessageOriginatingTime">
            <summary>
            Gets the first originating time of a message in the stream.
            </summary>
            <seealso cref="F:Microsoft.Psi.Envelope.OriginatingTime"/>
        </member>
        <member name="P:Microsoft.Psi.IStreamMetadata.LastMessageOriginatingTime">
            <summary>
            Gets the last originating time of a message in the stream.
            </summary>
            <seealso cref="F:Microsoft.Psi.Envelope.OriginatingTime"/>
        </member>
        <member name="P:Microsoft.Psi.IStreamMetadata.MessageCount">
            <summary>
            Gets the number of messages in the stream.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IStreamMetadata.AverageMessageSize">
            <summary>
            Gets the average size (bytes) of messages in the stream.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IStreamMetadata.AverageMessageLatencyMs">
            <summary>
            Gets the average latency (milliseconds) of messages in the stream.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.IStreamMetadata.GetSupplementalMetadata``1">
            <summary>
            Gets supplemental stream metadata.
            </summary>
            <typeparam name="T">Type of supplemental metadata.</typeparam>
            <returns>Supplemental metadata.</returns>
        </member>
        <member name="M:Microsoft.Psi.IStreamMetadata.Update(Microsoft.Psi.Envelope,System.Int32)">
            <summary>
            Updates this stream metadata with the specified envelope and size.
            </summary>
            <param name="envelope">The envelope.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Microsoft.Psi.IStreamMetadata.Update(Microsoft.Psi.TimeInterval,Microsoft.Psi.TimeInterval)">
            <summary>
            Updates this stream metadata with the times and originating times of the first and last messages.
            </summary>
            <param name="messagesTimeInterval">A TimeInterval representing the times of the first and last messages in the stream.</param>
            <param name="messagesOriginatingTimeInterval">A TimeInterval representing the originating times of the first and last messages in the stream.</param>
        </member>
        <member name="T:Microsoft.Psi.KeyedSharedPool`2">
            <summary>
            Provides a pool of shared objects organized by a key. The key is used both to group
            interchangeable objects as well as a parameter to the object allocation function.
            </summary>
            <typeparam name="T">The type of the objects managed by this pool.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.KeyedSharedPool`2.#ctor(System.Func{`1,`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.KeyedSharedPool`2"/> class.
            </summary>
            <param name="allocator">The allocation function for constructing a new object.</param>
            <param name="initialSize">Initial size of each pool.</param>
        </member>
        <member name="M:Microsoft.Psi.KeyedSharedPool`2.GetOrCreate(`1)">
            <summary>
            Get or creates a shared object from the pool.
            </summary>
            <param name="key">The shared object key.</param>
            <returns>A shared object from the pool.</returns>
        </member>
        <member name="M:Microsoft.Psi.KeyedSharedPool`2.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Psi.MathExtensions">
            <summary>
            Extension methods for certain math operations.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.MathExtensions.Min(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the minimum value in a sequence of double values.
            </summary>
            <param name="source">A sequence of double values to determine the minimum value of.</param>
            <returns>The minimum value in the sequence.</returns>
            <remarks>
            A sequence containing one or more NaN values will return a minimum value of NaN.
            An empty sequence will throw an InvalidOperationException.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.MathExtensions.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the minimum value in a sequence of nullable double values.
            </summary>
            <param name="source">A sequence of nullable double values to determine the minimum value of.</param>
            <returns>The minimum value in the sequence.</returns>
            <remarks>
            A sequence containing one or more NaN values will return a minimum value of NaN.
            Null values in the sequence are ignored. An empty sequence will return null.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.MathExtensions.Min(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns the minimum value in a sequence of float values.
            </summary>
            <param name="source">A sequence of float values to determine the minimum value of.</param>
            <returns>The minimum value in the sequence.</returns>
            <remarks>
            A sequence containing one or more NaN values will return a minimum value of NaN.
            An empty sequence will throw an InvalidOperationException.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.MathExtensions.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Returns the minimum value in a sequence of nullable float values.
            </summary>
            <param name="source">A sequence of nullable float values to determine the minimum value of.</param>
            <returns>The minimum value in the sequence.</returns>
            <remarks>
            A sequence containing one or more NaN values will return a minimum value of NaN.
            Null values in the sequence are ignored. An empty sequence will return null.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.MathExtensions.Max(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the maximum value in a sequence of double values.
            </summary>
            <param name="source">A sequence of double values to determine the maximum value of.</param>
            <returns>The maximum value in the sequence.</returns>
            <remarks>
            A sequence containing one or more NaN values will return a maximum value of NaN.
            An empty sequence will throw an InvalidOperationException.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.MathExtensions.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the maximum value in a sequence of nullable double values.
            </summary>
            <param name="source">A sequence of nullable double values to determine the maximum value of.</param>
            <returns>The maximum value in the sequence.</returns>
            <remarks>
            A sequence containing one or more NaN values will return a maximum value of NaN.
            Null values in the sequence are ignored. An empty sequence will return null.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.MathExtensions.Max(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns the maximum value in a sequence of float values.
            </summary>
            <param name="source">A sequence of float values to determine the maximum value of.</param>
            <returns>The maximum value in the sequence.</returns>
            <remarks>
            A sequence containing one or more NaN values will return a maximum value of NaN.
            An empty sequence will throw an InvalidOperationException.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.MathExtensions.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Returns the maximum value in a sequence of nullable float values.
            </summary>
            <param name="source">A sequence of nullable float values to determine the maximum value of.</param>
            <returns>The maximum value in the sequence.</returns>
            <remarks>
            A sequence containing one or more NaN values will return a maximum value of NaN.
            Null values in the sequence are ignored. An empty sequence will return null.
            </remarks>
        </member>
        <member name="T:Microsoft.Psi.Message">
            <summary>
            Static methods that simplify <see cref="T:Microsoft.Psi.Message`1"/> creation.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Message.Create``1(``0,System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Psi.Message`1"/> struct.
            </summary>
            <typeparam name="T">The payload of the message.</typeparam>
            <param name="data">The data to time-stamp.</param>
            <param name="originatingTime">The time of the real-world event that led to the creation of this message.</param>
            <param name="time">The time of this message.</param>
            <param name="sourceId">The source id of this message.</param>
            <param name="sequenceId">The sequence id of this message.</param>
            <returns>The newly created message.</returns>
        </member>
        <member name="M:Microsoft.Psi.Message.Create``1(``0,Microsoft.Psi.Envelope)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Psi.Message`1"/> struct.
            </summary>
            <typeparam name="T">The payload of the message.</typeparam>
            <param name="data">The data to time-stamp.</param>
            <param name="envelope">The envelope of the message.</param>
            <returns>The newly created message.</returns>
        </member>
        <member name="T:Microsoft.Psi.Message`1">
            <summary>
            Represents a message that can be published to a data stream.
            </summary>
            <typeparam name="T">The payload of the message.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Message`1.#ctor(`0,System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Message`1"/> struct.
            </summary>
            <param name="data">The data to time-stamp.</param>
            <param name="originatingTime">The time of the real-world event that led to the creation of this message.</param>
            <param name="time">The time of this message.</param>
            <param name="sourceId">The source id of this message.</param>
            <param name="sequenceId">The sequence id of this message.</param>
        </member>
        <member name="M:Microsoft.Psi.Message`1.#ctor(`0,Microsoft.Psi.Envelope)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Message`1"/> struct.
            </summary>
            <param name="data">The data to time-stamp.</param>
            <param name="envelope">The envelope of the message.</param>
        </member>
        <member name="P:Microsoft.Psi.Message`1.Data">
            <summary>
            Gets the payload of the message.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Message`1.OriginatingTime">
            <summary>
            Gets the time when the source message was created.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Message`1.CreationTime">
            <summary>
            Gets the time when the message was created and posted.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Message`1.SequenceId">
            <summary>
            Gets the sequence id of the message in the data stream.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Message`1.SourceId">
            <summary>
            Gets the ID of the stream that created the message.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Message`1.Envelope">
            <summary>
            Gets the message envelope.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Message`1.op_Equality(Microsoft.Psi.Message{`0},Microsoft.Psi.Message{`0})">
            <summary>
            Determines whether two instances are equal.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The object to compare to.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Microsoft.Psi.Message`1.op_Inequality(Microsoft.Psi.Message{`0},Microsoft.Psi.Message{`0})">
            <summary>
            Determines whether two instances are equal.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The object to compare to.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Microsoft.Psi.Message`1.ToString">
            <summary>
            Provide a string representation of this Timestamped instance.
            </summary>
            <returns>Payload preceded by originating time.</returns>
        </member>
        <member name="M:Microsoft.Psi.Message`1.Equals(System.Object)">
            <summary>
            Determines whether two instances are equal.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Microsoft.Psi.Message`1.GetHashCode">
            <summary>
            Returns a hash code for this instance, obtained by combining the hash codes of the instance fields.
            </summary>
            <returns>A hashcode.</returns>
        </member>
        <member name="T:Microsoft.Psi.MetadataKind">
            <summary>
            Specifies the kind of <see cref="T:Microsoft.Psi.Metadata"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.MetadataKind.StreamMetadata">
            <summary>
            Metadata used in storing stream data in a Psi store.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.MetadataKind.RuntimeInfo">
            <summary>
            Metadata used in storing runtime data in a Psi store.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.MetadataKind.TypeSchema">
            <summary>
            Metadata using in storing the schema definitions used when serializing and deserializing a type in a Psi Store.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Metadata">
            <summary>
            Represents common metadata used in Psi stores.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Metadata.Name">
            <summary>
            Gets or sets the name of the object the metadata represents.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Metadata.Id">
            <summary>
            Gets or sets the id of the object the metadata represents.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Metadata.TypeName">
            <summary>
            Gets or sets the name of the type of data contained in the object the metadata represents.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Metadata.SerializerTypeName">
            <summary>
            Gets or sets the metadata serializer type name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Metadata.Version">
            <summary>
            Gets or sets the metadata version number.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Metadata.SerializerVersion">
            <summary>
            Gets or sets the metadata serializer version number.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Metadata.Kind">
            <summary>
            Gets or sets the metadata kind.
            </summary>
            <seealso cref="T:Microsoft.Psi.MetadataKind"/>
        </member>
        <member name="P:Microsoft.Psi.Metadata.CustomFlags">
            <summary>
            Gets or sets custom flags implemented in derived types.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.ObjectDisposedWithHistoryException">
            <summary>
            The exception that is thrown, including history, when an operation is performed on a disposed object.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.ObjectDisposedWithHistoryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.ObjectDisposedWithHistoryException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="P:Microsoft.Psi.ObjectDisposedWithHistoryException.History">
            <summary>
            Gets the exception history. List of tuples of descriptions and <see cref="T:System.Diagnostics.StackTrace"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.ObjectDisposedWithHistoryException.AddHistory(System.String)">
            <summary>
            Adds history to the exception with the given description and the caller's stack frame.
            </summary>
            <param name="description">The description for the history.</param>
        </member>
        <member name="M:Microsoft.Psi.ObjectDisposedWithHistoryException.AddHistory(System.String,System.Diagnostics.StackTrace)">
            <summary>
            Adds history to the exception with the given description and stack frame.
            </summary>
            <param name="description">The description for the history.</param>
            <param name="trace">The stack frame for the history.</param>
        </member>
        <member name="M:Microsoft.Psi.ObjectDisposedWithHistoryException.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Psi.IPerfCounterCollection`1">
            <summary>
            Represents a performance counter collection.
            </summary>
            <typeparam name="TKey">Performance counter key type.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.IPerfCounterCollection`1.Increment(`0)">
            <summary>
            Increment counter.
            </summary>
            <param name="counter">Counter to increment.</param>
        </member>
        <member name="M:Microsoft.Psi.IPerfCounterCollection`1.IncrementBy(`0,System.Int64)">
            <summary>
            Increment counter by given value.
            </summary>
            <param name="counter">Counter to increment.</param>
            <param name="value">Value by which to increment.</param>
        </member>
        <member name="M:Microsoft.Psi.IPerfCounterCollection`1.Decrement(`0)">
            <summary>
            Decrement counter.
            </summary>
            <param name="counter">Counter to decrement.</param>
        </member>
        <member name="M:Microsoft.Psi.IPerfCounterCollection`1.RawValue(`0,System.Int64)">
            <summary>
            Set counter raw value.
            </summary>
            <param name="counter">Counter to set.</param>
            <param name="value">Raw value.</param>
        </member>
        <member name="M:Microsoft.Psi.IPerfCounterCollection`1.Clear">
            <summary>
            Clear collection.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.PerfCounterType">
            <summary>
            Specifies the formula used to update the performance counters.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.PerfCounterType.RateOfCountsPerSecond32">
            <summary>
            A difference counter that shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.PerfCounterType.NumberOfItems32">
            <summary>
            An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of items or operations.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.PerfCounterType.AverageCount64">
            <summary>
            An average counter that shows how many items are processed, on average, during an operation. Counters of this type display a ratio of the items processed to the number of operations
            completed. The ratio is calculated by comparing the number of items processed during the last interval to the number of operations completed during the last interval.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.PerfCounterType.AverageBase">
            <summary>
            A base counter that is used in the calculation of time or count averages, such as <see cref="F:Microsoft.Psi.PerfCounterType.AverageCount64"/>. Stores the denominator for calculating a counter to present
            "time per operation" or "count per operation".
            </summary>
        </member>
        <member name="T:Microsoft.Psi.IPerfCounters`1">
            <summary>
            Represents methods for creating and updating the performance counters.
            </summary>
            <typeparam name="TKey">Performance counter key type.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.IPerfCounters`1.Enable(System.String,System.String)">
            <summary>
            Enable performance counters.
            </summary>
            <param name="category">Category name.</param>
            <param name="instance">Instance name.</param>
            <returns>Performance counter collection.</returns>
        </member>
        <member name="M:Microsoft.Psi.IPerfCounters`1.AddCounterDefinitions(System.String,System.Collections.Generic.IEnumerable{System.Tuple{`0,System.String,System.String,Microsoft.Psi.PerfCounterType}})">
            <summary>
            Add performance counter definitions.
            </summary>
            <param name="category">Category name.</param>
            <param name="definitions">Performance counter definitions (key, name, help, type).</param>
        </member>
        <member name="T:Microsoft.Psi.Platform">
            <summary>
            Internal class to hold native P/Invoke methods.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.StreamMetadataFlags">
            <summary>
            Specifies custom flags for Psi data streams.
            </summary>
            <seealso cref="P:Microsoft.Psi.Metadata.CustomFlags"/>
        </member>
        <member name="F:Microsoft.Psi.StreamMetadataFlags.NotPersisted">
            <summary>
            Flag indicating stream is being persisted.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.StreamMetadataFlags.Closed">
            <summary>
            Flag indicating stream has been closed.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.StreamMetadataFlags.Indexed">
            <summary>
            Flag indicating stream is indexed.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.StreamMetadataFlags.Polymorphic">
            <summary>
            Flag indicating stream contains polymorphic types.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.PsiStreamMetadata">
            <summary>
            Represents metadata used in storing stream data in a Psi store.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.OpenedTime">
            <summary>
            Gets the time when the stream was opened.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.ClosedTime">
            <summary>
            Gets the time when the stream was closed.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.StoreName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.StorePath">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.FirstMessageCreationTime">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.LastMessageCreationTime">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.FirstMessageOriginatingTime">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.LastMessageOriginatingTime">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.MessageCount">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.MessageSizeCumulativeSum">
            <summary>
            Gets the total size (bytes) of messages in the stream.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.LatencyCumulativeSum">
            <summary>
            Gets the cumulative sum of latencies of messages in the stream.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.AverageMessageSize">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.AverageMessageLatencyMs">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.RuntimeTypes">
            <summary>
            Gets a dictionary of runtime type names referenced in stream.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.IsClosed">
            <summary>
            Gets a value indicating whether the stream has been closed.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.IsPersisted">
            <summary>
            Gets a value indicating whether the stream is persisted.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.IsIndexed">
            <summary>
            Gets a value indicating whether the stream is indexed.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.IsPolymorphic">
            <summary>
            Gets a value indicating whether the stream is persisted.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.SupplementalMetadataTypeName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.StreamTimeInterval">
            <summary>
            Gets the time interval this stream was in existence (from open to close).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.MessageCreationTimeInterval">
            <summary>
            Gets the interval between the creation times of the first and last messages written to this stream.
            If the stream contains no messages, an empty interval is returned.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.PsiStreamMetadata.MessageOriginatingTimeInterval">
            <summary>
            Gets the interval between the originating times of the first and last messages written to this stream.
            If the stream contains no messages, an empty interval is returned.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.PsiStreamMetadata.Update(Microsoft.Psi.Envelope,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.PsiStreamMetadata.Update(Microsoft.Psi.TimeInterval,Microsoft.Psi.TimeInterval)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.PsiStreamMetadata.GetSupplementalMetadata``1(Microsoft.Psi.Serialization.KnownSerializers)">
            <summary>
            Gets supplemental stream metadata.
            </summary>
            <typeparam name="T">Type of supplemental metadata.</typeparam>
            <param name="serializers">Known serializers.</param>
            <returns>Supplemental metadata.</returns>
        </member>
        <member name="M:Microsoft.Psi.PsiStreamMetadata.GetSupplementalMetadata``1">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.PsiStreamMetadata.SetSupplementalMetadata``1(``0,Microsoft.Psi.Serialization.KnownSerializers)">
            <summary>
            Sets supplemental stream metadata.
            </summary>
            <typeparam name="T">Type of supplemental metadata.</typeparam>
            <param name="value">Supplemental metadata value.</param>
            <param name="serializers">Known serializers.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStreamMetadata.UpdateSupplementalMetadataFrom(Microsoft.Psi.PsiStreamMetadata)">
            <summary>
            Update supplemental stream metadata from another stream metadata.
            </summary>
            <param name="other">Other stream metadata from which to copy supplemental metadata.</param>
            <returns>Updated stream metadata.</returns>
        </member>
        <member name="T:Microsoft.Psi.ReplayDescriptor">
            <summary>
            Descriptor for pipeline replay.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.ReplayDescriptor.ReplayAll">
            <summary>
            Replay all messages (not in real time, disregarding originating time and not enforcing replay clock).
            </summary>
        </member>
        <member name="F:Microsoft.Psi.ReplayDescriptor.ReplayAllRealTime">
            <summary>
            Replay all messages in real time (preserving originating time and enforcing replay clock).
            </summary>
        </member>
        <member name="M:Microsoft.Psi.ReplayDescriptor.#ctor(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.ReplayDescriptor"/> class.
            </summary>
            <param name="start">Starting message time.</param>
            <param name="end">Ending message time.</param>
            <param name="enforceReplayClock">Whether to enforce replay clock.</param>
        </member>
        <member name="M:Microsoft.Psi.ReplayDescriptor.#ctor(System.DateTime,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.ReplayDescriptor"/> class.
            </summary>
            <remarks>No ending message time (infinite).</remarks>
            <param name="start">Starting message time.</param>
            <param name="enforceReplayClock">Whether to enforce replay clock (optional).</param>
        </member>
        <member name="M:Microsoft.Psi.ReplayDescriptor.#ctor(Microsoft.Psi.TimeInterval,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.ReplayDescriptor"/> class.
            </summary>
            <param name="interval">Time interval to replay.</param>
            <param name="enforceReplayClock">Whether to enforce replay clock.</param>
        </member>
        <member name="P:Microsoft.Psi.ReplayDescriptor.Interval">
            <summary>
            Gets time interval to replay.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.ReplayDescriptor.Start">
            <summary>
            Gets starting message time.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.ReplayDescriptor.End">
            <summary>
            Gets ending message time.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.ReplayDescriptor.EnforceReplayClock">
            <summary>
            Gets a value indicating whether to enforce replay clock.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.ReplayDescriptor.Intersect(Microsoft.Psi.TimeInterval)">
            <summary>
            Reduce this replay descriptor to that which intersects the given time interval.
            </summary>
            <param name="interval">Intersecting time interval.</param>
            <returns>Reduced replay descriptor.</returns>
        </member>
        <member name="T:Microsoft.Psi.Shared">
            <summary>
            Shared resource utility.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Shared.Create``1(``0)">
            <summary>
            Creates a <see cref="T:Microsoft.Psi.Shared`1"/> instance wrapping the specified resource.
            The returned instance must be disposed.
            </summary>
            <remarks>
            The reference count of the resource is incremented before this method returns.
            When the returned <see cref="T:Microsoft.Psi.Shared`1"/> is disposed, resource's reference count is decremented.
            When the reference count reaches 0, the wrapped resource is released and disposed.
            </remarks>
            <typeparam name="T">The type of resource being wrapped.</typeparam>
            <param name="resource">The resource to wrap. Usually a large memory allocation.</param>
            <returns>A <see cref="T:Microsoft.Psi.Shared`1"/> instance wrapping the specified resource.</returns>
        </member>
        <member name="T:Microsoft.Psi.Shared`1">
            <summary>
            Provides a container that tracks the usage of a shared resource (such as a large memory allocation).
            Follow the Cloning pattern and use the Shared.DeepClone extension method instead of direct assignment
            to create long-lived references to the same shared resource.
            </summary>
            <typeparam name="T">The type of data held by this container.</typeparam>
            <remarks>
            The .Net model of delayed memory management via garbage collection is ill suited for frequent large allocations.
            The memory allocated for an object can only reused after the object is garbage collected.
            Since garbage collection is relatively infrequent, and independent of the lifespan of the allocated objects,
            the time interval between the object becoming available for garbage collection
            (that is, when nobody alive references it anymore) and the memory becoming available for reuse
            can be quite large. More importantly, the memory is only reclaimed as a
            result of a garbage collection pass, with a cost proportional to the number of objects allocated since
            the last garbage collection pass. The generational model of the .Net garbage collector mitigates this issue
            to some extent, but not enough to avoid large garbage collection pauses in memory-intensive streaming systems,
            e.g. when allocating video frames at frame rate.
            The Shared class is designed to provide full control over memory allocations,
            to make it possible to exchange buffers between concurrent components but also reuse them once they are not needed anymore.
            It uses explicit reference counting to decide when the memory can be released back to an allocation pool,
            without having to rely on the garbage collector.
            The behavior of Shared is as follows:
            - when a Shared instance is instantiated, the reference count of the resource is set to 1.
            - when a Shared instance is cloned (via Shared.DeepClone or Shared.AddRef), the reference count is incremented by 1.
            - when a Shared instance is disposed (via Shared.Dispose or by the "using" keyword) the reference count is decremented by 1.
            - the ref count is not affected when using the assignment operator (e.g. var copy = shared).
            Thus, for it to function properly, the handling of Shared instances requires following special rules:
            - avoid using the assignment operator to capture references to a Shared instance beyond local scope.
            - call myShared.AddRef() to create a new reference to the underlying resource, and remember to call Dispose when done with it.
            - use myShared.DeepClone(ref this.myStoredCopy) to store a long-lived reference to a Shared instance in a class field.
            DeepClone will Dispose the target object first if needed, before cloning.
            - there is no need to clone or AddRef when posting a Shared instance to a message stream.
            - never store a long-lived reference to the underlying resource.
            Note that Shared doesn't provide any facilities for concurrent access to the underlying resource.
            Once a resource is wrapped in a Shared object, it should be considered read-only.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Shared`1.#ctor(`0,Microsoft.Psi.SharedPool{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Shared`1"/> class.
            </summary>
            <param name="resource">The shared resource.</param>
            <param name="sharedPool">The shared object pool.</param>
        </member>
        <member name="M:Microsoft.Psi.Shared`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Microsoft.Psi.Shared`1"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Shared`1.Resource">
            <summary>
            Gets underlying resource.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Shared`1.SharedPool">
            <summary>
            Gets the shared object pool.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Shared`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Shared`1.AddRef">
            <summary>
            Add reference.
            </summary>
            <returns>Shared resource.</returns>
        </member>
        <member name="M:Microsoft.Psi.Shared`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Shared`1.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.SharedArrayPool`1">
            <summary>
            Provides a pool of shared arrays.
            </summary>
            <typeparam name="T">The element type of the array.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.SharedArrayPool`1.GetOrCreate(System.Int32)">
            <summary>
            Gets or creates a shared array of the specified size.
            </summary>
            <param name="size">The size of the array.</param>
            <returns>A shared array of the requested size.</returns>
        </member>
        <member name="T:Microsoft.Psi.SharedContainer`1">
            <summary>
            Provides a container that tracks the usage of a resource (such as a large memory allocation) and allows reusing it once not in use
            This class performs AddRef and Release and overrides serialization to preempt cloning from making deep copies of the resource.
            This class is for internal use only. The Shared class is the public-facing API for this functionality.
            </summary>
            <typeparam name="T">The type of data held by this container.</typeparam>
        </member>
        <member name="T:Microsoft.Psi.SharedPool`1">
            <summary>
            Provides a pool of shared objects.
            Use this class in conjunction with <see cref="T:Microsoft.Psi.Shared`1"/>.
            </summary>
            <typeparam name="T">The type of the objects managed by this pool.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.SharedPool`1.#ctor(System.Func{`0},System.Int32,Microsoft.Psi.Serialization.KnownSerializers)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.SharedPool`1"/> class.
            </summary>
            <param name="allocator">The allocation function for constructing a new object.</param>
            <param name="initialSize">The initial size of the pool. The size will be adjusted up as needed, but never down.</param>
            <param name="knownSerializers">An optional set of known serializers. Only required if the pool holds objects that are deserialized from an older store.</param>
        </member>
        <member name="P:Microsoft.Psi.SharedPool`1.AvailableCount">
            <summary>
            Gets the number of objects available in the pool.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.SharedPool`1.TotalCount">
            <summary>
            Gets the total number of objects managed by this pool.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.SharedPool`1.TryGet(`0@)">
            <summary>
            Attempts to retrieve an unused object from the pool.
            </summary>
            <param name="recyclable">An unused object from the pool, if there is one.</param>
            <returns>True if an unused object was available, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Psi.SharedPool`1.TryGet(Microsoft.Psi.Shared{`0}@)">
            <summary>
            Attempts to retrieve an unused object from the pool.
            </summary>
            <param name="recyclable">An unused object, wrapped in a ref-counted <see cref="T:Microsoft.Psi.Shared`1"/> instance.</param>
            <returns>True if an unused object was available, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Psi.SharedPool`1.GetOrCreate">
            <summary>
            Attempts to retrieve an unused object from the pool if one is available, otherwise creates and returns a new instance.
            </summary>
            <returns>An unused object, wrapped in a ref-counted <see cref="T:Microsoft.Psi.Shared`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Psi.SharedPool`1.Dispose">
            <summary>
            Releases all unused objects in the pool.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.SharedPool`1.Recycle(`0)">
            <summary>
            Returns an object to the pool.
            This method is meant for internal use. Use <see cref="M:Microsoft.Psi.Shared`1.Dispose"/> instead.
            </summary>
            <param name="recyclable">The object to return to the pool.</param>
        </member>
        <member name="T:Microsoft.Psi.StreamMetadataBase">
            <summary>
            Stream metadata base class.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.StreamMetadataBase.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int64,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.StreamMetadataBase"/> class.
            </summary>
            <param name="name">Stream name.</param>
            <param name="id">Stream ID.</param>
            <param name="typeName">Stream type name.</param>
            <param name="partitionName">Partition/file name.</param>
            <param name="partitionPath">Partition/file path.</param>
            <param name="first">First message time.</param>
            <param name="last">Last message time.</param>
            <param name="messageCount">Total message count.</param>
            <param name="averageMessageSize">Average message size (bytes).</param>
            <param name="averageLatencyMs">Average message latency (milliseconds).</param>
        </member>
        <member name="P:Microsoft.Psi.StreamMetadataBase.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.StreamMetadataBase.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.StreamMetadataBase.TypeName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.StreamMetadataBase.SupplementalMetadataTypeName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.StreamMetadataBase.StoreName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.StreamMetadataBase.StorePath">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.StreamMetadataBase.OpenedTime">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.StreamMetadataBase.ClosedTime">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.StreamMetadataBase.IsClosed">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.StreamMetadataBase.FirstMessageCreationTime">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.StreamMetadataBase.LastMessageCreationTime">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.StreamMetadataBase.FirstMessageOriginatingTime">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.StreamMetadataBase.LastMessageOriginatingTime">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.StreamMetadataBase.MessageCount">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.StreamMetadataBase.AverageMessageSize">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.StreamMetadataBase.AverageMessageLatencyMs">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.StreamMetadataBase.GetSupplementalMetadata``1">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.StreamMetadataBase.Update(Microsoft.Psi.Envelope,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.StreamMetadataBase.Update(Microsoft.Psi.TimeInterval,Microsoft.Psi.TimeInterval)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Psi.TickCalibration">
            <summary>
            Provides functionality for synchronizing and calibrating tick values to the system clock.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.TickCalibration.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Microsoft.Psi.TickCalibration"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.TickCalibration.#ctor(System.Int32,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.TickCalibration"/> class.
            </summary>
            <param name="capacity">The capacity of the calibration data array.</param>
            <param name="tickSyncPrecision">The maximum number of 100 ns ticks allowed for a sync operation.</param>
            <param name="maxClockDrift">The maximum allowable clock drift which, if exceeded, will update the calibration.</param>
        </member>
        <member name="M:Microsoft.Psi.TickCalibration.ConvertToFileTime(System.Int64,System.Boolean)">
            <summary>
            Returns the system file time corresponding to the number of 100ns ticks from system boot.
            </summary>
            <param name="ticks">The number of 100ns ticks since system boot.</param>
            <param name="recalibrate">Recalibrates if necessary before conversion.</param>
            <returns>The system file time.</returns>
        </member>
        <member name="M:Microsoft.Psi.TickCalibration.Recalibrate(System.Boolean)">
            <summary>
            Attempts to recalibrate elapsed ticks against the system time. The current elapsed ticks from
            the performance counter will be compared against the current system time and the calibration
            data will be modified only if it is determined that the times have drifted by more than the
            maximum allowed amount since the last calibration.
            </summary>
            <param name="force">Forces the calibration data to be modified regardless of the observed drift.</param>
        </member>
        <member name="M:Microsoft.Psi.TickCalibration.AddCalibrationData(System.Int64,System.Int64)">
            <summary>
            Adds a new calibration data point, adjusted accordingly in order to guarantee stability and monotonicity.
            </summary>
            <param name="ticks">The elapsed ticks.</param>
            <param name="fileTime">The corresponding system file time.</param>
        </member>
        <member name="M:Microsoft.Psi.TickCalibration.EnsureCapacity">
            <summary>
            Ensures that the calibration buffer has enough space for at least one new entry.
            If not, the oldest entry is removed.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.TickCalibration.CalibrationData">
            <summary>
            Defines a single calibration point between elapsed ticks and the system file time.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.TickCalibration.CalibrationData.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.TickCalibration.CalibrationData"/> struct.
            </summary>
            <param name="ticks">The elapsed ticks.</param>
            <param name="fileTime">The system file time.</param>
        </member>
        <member name="P:Microsoft.Psi.TickCalibration.CalibrationData.Ticks">
            <summary>
            Gets the calibration tick value.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.TickCalibration.CalibrationData.FileTime">
            <summary>
            Gets the calibration system file time.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Time">
            <summary>
            Static class providing access and methods to handle absolute time.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Time.tickCalibration">
            <summary>
            Ticks to system file time calibration.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Time.TimerDelegate">
            <summary>
            Delegate definition for the API callback.
            </summary>
            <param name="timerID">The identifier of the timer. The identifier is returned by the timeSetEvent function.</param>
            <param name="msg">The parameter is not used.</param>
            <param name="userCtx">The value that was specified for the parameter of the timeSetEvent function.</param>
            <param name="dw1">The parameter is not used.</param>
            <param name="dw2">The parameter is not used.</param>
        </member>
        <member name="M:Microsoft.Psi.Time.GetCurrentTime">
            <summary>
            Returns the current time with high resolution (1us).
            </summary>
            <returns>The current time.</returns>
        </member>
        <member name="M:Microsoft.Psi.Time.GetTime(System.TimeSpan)">
            <summary>
            Returns the absolute time relative to the current time, with high resolution (1us).
            </summary>
            <param name="offset">An offset from current time.</param>
            <returns>The absolute time.</returns>
        </member>
        <member name="M:Microsoft.Psi.Time.GetTimeFromElapsedTicks(System.Int64)">
            <summary>
            Returns the system UTC time represented by the number of 100ns ticks from system boot.
            The tick counter is calibrated against system time to a precision that is determined
            by the tickSyncPrecision argument of the <see cref="T:Microsoft.Psi.TickCalibration"/> constructor
            (1 microsecond by default). To account for OS system clock adjustments which may cause
            the tick counter to drift relative to the system clock, the calibration is repeated
            whenever the drift exceeds a predefined maximum (1 millisecond by default).
            </summary>
            <param name="ticksFromSystemBoot">The number of 100ns ticks since system boot.</param>
            <returns>The corresponding system UTC time.</returns>
        </member>
        <member name="M:Microsoft.Psi.Time.MakeTimerDelegate(System.Action)">
            <summary>
            Wraps the action into a timer delegate that can be used with TimeSetEvent and RunOnce.
            The delegate needs to be kept alive (referenced) until the timer is done firing.
            </summary>
            <param name="handler">The handler to wrap.</param>
            <returns>A timer delegate.</returns>
        </member>
        <member name="M:Microsoft.Psi.Time.RunOnce(System.TimeSpan,Microsoft.Psi.Time.TimerDelegate)">
            <summary>
            Schedules a timer that calls the specified delegate once after the given time has elapsed.
            </summary>
            <param name="delay">The amount of time to wait before invoking the delegate, rounded to ms.</param>
            <param name="handler">The delegate to call once time is up.</param>
        </member>
        <member name="T:Microsoft.Psi.TypeResolutionHelper">
            <summary>
            Helper class for type resolution.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.TypeResolutionHelper.GetVerifiedType(System.String)">
            <summary>
            Gets a type by its type name.  This method will only return types from loaded
            assemblies, i.e. assemblies explicitly referenced or loaded by this application.
            </summary>
            <param name="typeName">The name of the type to retrieve.</param>
            <returns>The requested type, or null if the type was not found.</returns>
        </member>
        <member name="M:Microsoft.Psi.TypeResolutionHelper.RemoveAssemblyName(System.String)">
            <summary>
            Removes the assembly name from an assembly-qualified type name, returning the fully
            qualified name of the type, including its namespace but not the assembly name.
            </summary>
            <param name="assemblyQualifiedName">A string representing the assembly-qualified name of a type.</param>
            <returns>The fully qualified name of the type, including its namespace but not the assembly name.</returns>
        </member>
        <member name="M:Microsoft.Psi.TypeResolutionHelper.RemoveCoreAssemblyName(System.String)">
            <summary>
            Removes all mscorlib/System.Private.CoreLib assembly names from an assembly-qualified
            type name while keeping all other assembly names intact. This is primarily to facilitate
            creation of base class library types across different .NET runtimes (e.g. Core and Framework).
            </summary>
            <param name="assemblyQualifiedName">A string representing the assembly-qualified name of a type.</param>
            <returns>The fully qualified name of the type, including its namespace but not the assembly name.</returns>
        </member>
        <member name="T:Microsoft.Psi.Components.Aggregator`3">
            <summary>
            A stateful transform.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TIn">The input message type.</typeparam>
            <typeparam name="TOut">The output message type.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.Aggregator`3.#ctor(Microsoft.Psi.Pipeline,`0,System.Func{`0,`1,Microsoft.Psi.Envelope,Microsoft.Psi.Emitter{`2},`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Aggregator`3"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
            <param name="init">Initial state.</param>
            <param name="aggregator">Aggregation function.</param>
        </member>
        <member name="M:Microsoft.Psi.Components.Aggregator`3.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Components.Aggregator`3.Receive(`1,Microsoft.Psi.Envelope)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Psi.Components.AsyncConsumerProducer`2">
            <summary>
            A simple transform component.
            </summary>
            <typeparam name="TIn">The input message type.</typeparam>
            <typeparam name="TOut">The output message type.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.AsyncConsumerProducer`2.#ctor(Microsoft.Psi.Pipeline)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.AsyncConsumerProducer`2"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
        </member>
        <member name="P:Microsoft.Psi.Components.AsyncConsumerProducer`2.In">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Components.AsyncConsumerProducer`2.Out">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Components.AsyncConsumerProducer`2.ReceiveAsync(`0,Microsoft.Psi.Envelope)">
            <summary>
            Async receiver to be implemented by subclass.
            </summary>
            <param name="value">Value received.</param>
            <param name="envelope">Message envelope.</param>
            <returns>Async task.</returns>
        </member>
        <member name="T:Microsoft.Psi.Components.BranchTerminationPolicy`2">
            <summary>
            Static class containing branch termination functions for the parallel sparse operators.
            </summary>
            <typeparam name="TBranchKey">The key type.</typeparam>
            <typeparam name="TBranchIn">The input message type.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.BranchTerminationPolicy`2.WhenKeyNotPresent">
            <summary>
            Constructs a branch termination policy function instance to terminate when corresponding key is not longer present.
            </summary>
            <remarks>This is the default policy.</remarks>
            <returns>Function indicating whether and when (originating time) to terminate the given branch.</returns>
            <remarks>The closing time for the branch is the time of the last message that contains the key.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Components.BranchTerminationPolicy`2.AfterKeyNotPresent(System.Int32)">
            <summary>
            Constructs a branch termination policy function instance to terminate after a number of messages have elapsed
            and the corresponding key was no longer present.
            </summary>
            <param name="count">The number of messages that have to elapse with the key not present for the branch to close.</param>
            <returns>Function indicating whether and when (originating time) to terminate the given branch.</returns>
            <remarks>The closing time for the branch is the time of the count-th message that does not contain the key.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Components.BranchTerminationPolicy`2.Never">
            <summary>
            Constructs a branch termination policy function instance that never terminates the branch.
            </summary>
            <returns>Function indicating whether and when (originating time) to terminate the given branch.</returns>
        </member>
        <member name="T:Microsoft.Psi.Components.ConsumerProducer`2">
            <summary>
            This is the base class for any component that transforms an input type into an output type.
            Derive from thsi class if your component has more than one input or more than one output.
            Otherwise, use one of the the <see cref="M:Microsoft.Psi.Operators.Select``2(Microsoft.Psi.IProducer{``0},System.Func{``0,Microsoft.Psi.Envelope,``1},Microsoft.Psi.DeliveryPolicy{``0})"/>
            or <see cref="M:Microsoft.Psi.Operators.Process``2(Microsoft.Psi.IProducer{``0},System.Action{``0,Microsoft.Psi.Envelope,Microsoft.Psi.Emitter{``1}},Microsoft.Psi.DeliveryPolicy{``0})"/> operators.
            </summary>
            <typeparam name="TIn">The input message type.</typeparam>
            <typeparam name="TOut">The output message type.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.ConsumerProducer`2.#ctor(Microsoft.Psi.Pipeline)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.ConsumerProducer`2"/> class.
            </summary>
            <param name="pipeline">The pipeline to attach to.</param>
        </member>
        <member name="P:Microsoft.Psi.Components.ConsumerProducer`2.In">
            <summary>
            Gets the input to receive messages on.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Components.ConsumerProducer`2.Out">
            <summary>
            Gets the stream to write messages to.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Components.ConsumerProducer`2.Receive(`0,Microsoft.Psi.Envelope)">
            <summary>
            Override this method to process the incomming message and potentially publish one or more output messages.
            The input message payload is only valid for the duration of the call.
            If the data needs to be stored beyond the scope of this method,
            use the extension method <see cref="M:Microsoft.Psi.Serializer.DeepClone``1(``0,``0@)"/> to create a private copy.
            </summary>
            <param name="data">The input message payload.</param>
            <param name="envelope">The input message envelope.</param>
        </member>
        <member name="T:Microsoft.Psi.Components.DynamicWindow`3">
            <summary>
            Component that implements a dynamic window stream operator.
            </summary>
            <typeparam name="TWindow">The type of messages on the window stream.</typeparam>
            <typeparam name="TInput">The type of messages on the input stream.</typeparam>
            <typeparam name="TOutput">The type of messages on the output stream.</typeparam>
            <remarks>The component implements a dynamic window operator over a stream of data. Messages
            on the incoming <see cref="P:Microsoft.Psi.Components.DynamicWindow`3.WindowIn"/>stream are used to compute a relative time
            interval over the in input stream. The output is created by a function that has access
            to the window message and the computed buffer of messages on the input stream.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Components.DynamicWindow`3.#ctor(Microsoft.Psi.Pipeline,System.Func{Microsoft.Psi.Message{`0},System.ValueTuple{Microsoft.Psi.TimeInterval,System.DateTime}},System.Func{Microsoft.Psi.Message{`0},System.Collections.Generic.IEnumerable{Microsoft.Psi.Message{`1}},`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.DynamicWindow`3"/> class.
            </summary>
            <param name="pipeline">The pipeline to add the component to.</param>
            <param name="windowCreator">The function that creates the actual window to use at every point, and specified the time point previous to which no future windows will extend.</param>
            <param name="outputCreator">A function that creates output messages given a message on the window-defining stream and a buffer of messages on the source stream.</param>
        </member>
        <member name="P:Microsoft.Psi.Components.DynamicWindow`3.WindowIn">
            <summary>
            Gets the received for the input stream of window messages.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Components.DynamicWindow`3.Receive(`1,Microsoft.Psi.Envelope)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Components.EventSource`2">
            <summary>
            A generator component that publishes messages of a specified type whenever an event is raised.
            </summary>
            <typeparam name="TEventHandler">The event handler delegate type.</typeparam>
            <typeparam name="TOut">The output stream type.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.EventSource`2.#ctor(Microsoft.Psi.Pipeline,System.Action{`0},System.Action{`0},System.Func{System.Action{`1},`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.EventSource`2"/> class.
            The component will subscribe to an event on startup via the <paramref name="subscribe"/>
            delegate, using the supplied <paramref name="converter"/> function to transform the
            <see cref="M:Microsoft.Psi.Components.EventSource`2.Post(`1)"/> action delegate into an event handler compatible with the external
            event that is being subscribed to.
            </summary>
            <param name="pipeline">The Psi pipeline.</param>
            <param name="subscribe">The delegate that subscribes to the external event.</param>
            <param name="unsubscribe">The delegate that unsubscribes from the external event.</param>
            <param name="converter">
            A function used to convert the <see cref="M:Microsoft.Psi.Components.EventSource`2.Post(`1)"/> action delegate into an event
            handler of type <typeparamref name="TEventHandler"/> that will be subscribed to the
            external event by the <paramref name="subscribe"/> delegate.
            </param>
        </member>
        <member name="P:Microsoft.Psi.Components.EventSource`2.Out">
            <summary>
            Gets the stream of output messages.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Components.EventSource`2.Start(System.Action{System.DateTime})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Components.EventSource`2.Stop(System.DateTime,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Components.EventSource`2.Post(`1)">
            <summary>
            Posts a value on the output stream.
            </summary>
            <param name="e">The value to post.</param>
        </member>
        <member name="T:Microsoft.Psi.Components.Fuse`4">
            <summary>
            Component that fuses multiple streams based on a specified interpolator.
            </summary>
            <typeparam name="TPrimary">The type the messages on the primary stream.</typeparam>
            <typeparam name="TSecondary">The type messages on the secondary stream.</typeparam>
            <typeparam name="TInterpolation">The type of the interpolation result on the secondary stream.</typeparam>
            <typeparam name="TOut">The type of output message.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.Fuse`4.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.Interpolator{`1,`2},System.Func{`0,`2[],`3},System.Int32,System.Func{`0,System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Fuse`4"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
            <param name="interpolator">Interpolator to use when joining the streams.</param>
            <param name="outputCreator">Mapping function from messages to output.</param>
            <param name="secondaryCount">Number of secondary streams.</param>
            <param name="secondarySelector">Selector function mapping primary messages to a set of secondary stream indices.</param>
        </member>
        <member name="P:Microsoft.Psi.Components.Fuse`4.Out">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Components.Fuse`4.InPrimary">
            <summary>
            Gets primary input receiver.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Components.Fuse`4.InSecondaries">
            <summary>
            Gets collection of secondary receivers.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Components.Fuse`4.AddInput">
            <summary>
            Add input receiver.
            </summary>
            <returns>Receiver.</returns>
        </member>
        <member name="T:Microsoft.Psi.Components.Generator">
            <summary>
            Generates a sequence of messages at the pace dictated by the pipeline.
            Use this base class when your generator has multiple output streams.
            Use the static functions of the <see cref="T:Microsoft.Psi.Generators"/> class for the single-stream case.
            </summary>
            <remarks>
            When playing back data from offline sources, it is typically desirable that data not be dropped
            even when resource constraints prevent the pipeline from running in real time.
            Thus, source components that generate data from offline sources (e.g. from a file)
            must be able to slow down production of data as requested by the hosting pipeline.
            Since the runtime will not interfere with any threads it doesn’t own (by design),
            reading and publishing offline data on a dedicated thread doesn't achieve the desired effect.
            Rather, such source components must implement the Generator pattern, in which an internal emitter/receiver
            pair is used to yield back to the runtime.
            The following example shows how to implement a multi-stream generator:
            /include ..\..\Test.Psi\GeneratorSample.cs.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Components.Generator.#ctor(Microsoft.Psi.Pipeline,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Generator"/> class.
            </summary>
            <param name="pipeline">The pipeline to attach to.</param>
            <param name="isInfiniteSource">If true, mark this Generator instance as representing an infinite source (e.g., a live-running sensor).
            If false (default), it represents a finite source (e.g., Generating messages based on a finite file or IEnumerable).</param>
        </member>
        <member name="M:Microsoft.Psi.Components.Generator.Start(System.Action{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Components.Generator.Stop(System.DateTime,System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Components.Generator.GenerateNext(System.DateTime)">
            <summary>
            Function that gets called to produce more data once the pipeline is ready to consume it.
            Override to post data to the appropriate stream.
            </summary>
            <param name="currentTime">The originating time of the message that triggered the current call to GenerateNext.</param>
            <returns>
            The originating time of the next message that will trigger the next call to GenerateNext.
            The next call will occur only after this time (based on the pipeline clock).
            </returns>
        </member>
        <member name="T:Microsoft.Psi.Components.Generator`1">
            <summary>
            Generates messages by lazily enumerating a sequence of data,
            at the pace dictated by the pipeline.
            </summary>
            <typeparam name="T">The output type.</typeparam>
            <remarks>
            The static functions provided by the <see cref="T:Microsoft.Psi.Generators"/> wrap <see cref="T:Microsoft.Psi.Components.Generator`1"/>
            and are designed to make the common cases easier.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Components.Generator`1.#ctor(Microsoft.Psi.Pipeline,System.Collections.Generic.IEnumerator{`0},System.TimeSpan,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Generator`1"/> class.
            </summary>
            <param name="pipeline">The pipeline to attach to.</param>
            <param name="enumerator">A lazy enumerator of data.</param>
            <param name="interval">The interval used to increment time on each generated message.</param>
            <param name="alignDateTime">If non-null, this parameter specifies a time to align the generator messages with. If the parameter
            is non-null, the messages will have originating times that align with the specified time.</param>
            <param name="isInfiniteSource">If true, mark this Generator instance as representing an infinite source (e.g., a live-running sensor).
            If false (default), it represents a finite source (e.g., Generating messages based on a finite file or IEnumerable).</param>
        </member>
        <member name="M:Microsoft.Psi.Components.Generator`1.#ctor(Microsoft.Psi.Pipeline,System.Collections.Generic.IEnumerator{System.ValueTuple{`0,System.DateTime}},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Generator`1"/> class.
            </summary>
            <param name="pipeline">The pipeline to attach to.</param>
            <param name="enumerator">A lazy enumerator of data.</param>
            <param name="startTime">The explicit start time of the data in the enumeration. Supply this parameter when the enumeration contains
            data values with absolute originating times (e.g. [value, time] pairs read from a file), and you want to propose a pipeline replay
            time to take this into account. Otherwise, pipeline playback will be determined by the prevailing replay descriptor (taking into
            account any other components in the pipeline which may have proposed replay times.</param>
            <param name="isInfiniteSource">If true, mark this Generator instance as representing an infinite source (e.g., a live-running sensor).
            If false (default), it represents a finite source (e.g., Generating messages based on a finite file or IEnumerable).</param>
        </member>
        <member name="P:Microsoft.Psi.Components.Generator`1.Out">
            <summary>
            Gets the output stream.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Components.Generator`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Components.Generator`1.GenerateNext(System.DateTime)">
            <summary>
            Called to generate the next value.
            </summary>
            <param name="currentTime">The originating time that triggered the current call.</param>
            <returns>The originating time at which to generate the next value.</returns>
        </member>
        <member name="T:Microsoft.Psi.Components.Generator`1.Enumerator">
            <summary>
            Wraps an enumerator and provides the ability to look-ahead to the next value.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Components.Generator`1.Enumerator.#ctor(System.Collections.Generic.IEnumerator{System.ValueTuple{`0,System.DateTime}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Generator`1.Enumerator"/> class.
            </summary>
            <param name="enumerator">The underlying enumerator of values.</param>
        </member>
        <member name="P:Microsoft.Psi.Components.Generator`1.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Psi.Components.Generator`1.Enumerator.Next">
            <summary>
            Gets the next value in the enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Components.Generator`1.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Components.Generator`1.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Components.Generator`1.Enumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Components.Generator`1.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Components.IConsumerProducer`2">
            <summary>
            Interface representing a component that is both a consumer and producer of messages.
            </summary>
            <typeparam name="TIn">Type of input stream messages.</typeparam>
            <typeparam name="TOut">Type of output stream messages.</typeparam>
        </member>
        <member name="T:Microsoft.Psi.Components.ISourceComponent">
            <summary>
            Interface indicating that a component is a "source" of messages (e.g. sensor inputs, generators, etc.), or otherwise
            posts messages from outside a receiver (e.g. from an internal thread or an event handler that is not in response to
            incoming messages). Components that implement this interface should advise the pipeline when they are done posting
            messages via the <c>notifyCompletionTime</c> action delegate that is supplied when the pipeline calls the
            <see cref="M:Microsoft.Psi.Components.ISourceComponent.Start(System.Action{System.DateTime})"/> method. This delegate may be saved and invoked later once the pipeline completion time is known,
            or in the case of components that do not have the concept of "completion" (i.e. infinite sources), it may be invoked
            immediately with a completion time of <see cref="F:System.DateTime.MaxValue"/>. Reactive components that generate messages only
            in response to incoming messages should not implement this interface. A pipeline containing source components will
            shut down only once all sources have notified the pipeline of completion (or earlier if explicitly stopped/disposed).
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Components.ISourceComponent.Start(System.Action{System.DateTime})">
            <summary>
            Called by the pipeline to start the component once all the subscriptions are established.
            </summary>
            <param name="notifyCompletionTime">
            Delegate to call to notify the pipeline at what time the component will complete. Finite source components
            should invoke this delegate, passing in the time at which the component completes after which it will post
            no further messages. If this time is not yet known, the component may store a reference to the
            <paramref name="notifyCompletionTime"/> delegate and call it once the completion time is known. Source
            components that do not have the concept of "completion" must invoke <paramref name="notifyCompletionTime"/>
            with a completion time of <see cref="F:System.DateTime.MaxValue"/>. Similarly, reactive components that implement
            the <see cref="T:Microsoft.Psi.Components.ISourceComponent"/> due to the fact that they post messages from outside of a receiver method
            should also notify with a completion time of <see cref="F:System.DateTime.MaxValue"/>.
            </param>
        </member>
        <member name="M:Microsoft.Psi.Components.ISourceComponent.Stop(System.DateTime,System.Action)">
            <summary>
            Called by the pipeline when shutting down. The component should stop generating new messages once this
            method completes. However, the component might still receive new messages (if it is subscribed to other
            components) after this call and is expected to handle them.
            </summary>
            <param name="finalOriginatingTime">
            The last originating time of any message which may be posted, after which the component should stop
            posting non-reactive source messages.
            </param>
            <param name="notifyCompleted">
            Delegate to call to notify the pipeline that the component has completed posting non-reactive source
            messages. This delegate should be called once the component has posted its last non-reactive source
            message, but only up to (and possibly including) <paramref name="finalOriginatingTime"/>.
            </param>
        </member>
        <member name="T:Microsoft.Psi.Components.Join`4">
            <summary>
            Component that joins multiple streams using a reproducible interpolator.
            </summary>
            <typeparam name="TPrimary">The type the messages on the primary stream.</typeparam>
            <typeparam name="TSecondary">The type messages on the secondary stream.</typeparam>
            <typeparam name="TInterpolation">The type of the interpolation result on the secondary stream.</typeparam>
            <typeparam name="TOut">The type of output message.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.Join`4.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.ReproducibleInterpolator{`1,`2},System.Func{`0,`2[],`3},System.Int32,System.Func{`0,System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Join`4"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="outputCreator">Mapping function from message pair to output.</param>
            <param name="secondaryCount">Number of secondary streams.</param>
            <param name="secondarySelector">Selector function mapping primary messages to secondary stream indices.</param>
        </member>
        <member name="T:Microsoft.Psi.Components.Join`3">
            <summary>
            Component that joins multiple streams using a reproducible interpolator.
            </summary>
            <typeparam name="TPrimary">The type the messages on the primary stream.</typeparam>
            <typeparam name="TSecondary">The type messages on the secondary stream.</typeparam>
            <typeparam name="TOut">The type of output message.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.Join`3.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.ReproducibleInterpolator{`1,`1},System.Func{`0,`1[],`2},System.Int32,System.Func{`0,System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Join`3"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="outputCreator">Mapping function from message pair to output.</param>
            <param name="secondaryCount">Number of secondary streams.</param>
            <param name="secondarySelector">Selector function mapping primary messages to secondary stream indices.</param>
        </member>
        <member name="T:Microsoft.Psi.Components.Merge`1">
            <summary>
            Merge one or more streams (T) into a single stream (Message{T}) interleaved in wall-clock time.
            </summary>
            <remarks>Messages are produced in the order they arrive, in wall-clock time; not necessarily in originating-time order.</remarks>
            <typeparam name="T">The type of the messages.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.Merge`1.#ctor(Microsoft.Psi.Pipeline)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Merge`1"/> class.
            </summary>
            <param name="pipeline">The pipeline to which to attach.</param>
        </member>
        <member name="P:Microsoft.Psi.Components.Merge`1.Out">
            <summary>
            Gets the output emitter.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Components.Merge`1.AddInput(System.String)">
            <summary>
            Add input receiver.
            </summary>
            <param name="name">The unique debug name of the receiver.</param>
            <returns>Receiver.</returns>
        </member>
        <member name="T:Microsoft.Psi.Components.Merger`2">
            <summary>
            Combines the input messages from multiple inputs; invoking given lambda for each.
            </summary>
            <typeparam name="TIn">The message type.</typeparam>
            <typeparam name="TKey">The key type to use to identify the inputs.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.Merger`2.#ctor(Microsoft.Psi.Pipeline,System.Action{`1,Microsoft.Psi.Message{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Merger`2"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
            <param name="action">Action invoked for each key/message.</param>
        </member>
        <member name="M:Microsoft.Psi.Components.Merger`2.Add(`1)">
            <summary>
            Add a key to which a receiver will be mapped.
            </summary>
            <param name="key">Key to which to map a receiver.</param>
            <returns>Receiver having been mapped.</returns>
        </member>
        <member name="T:Microsoft.Psi.Components.Pair`3">
            <summary>
            Performs a wall-clock based pairing of streams; taking the last (or provided initial) value from the secondary.
            </summary>
            <typeparam name="TPrimary">The type the messages on the primary stream.</typeparam>
            <typeparam name="TSecondary">The type messages on the secondary stream.</typeparam>
            <typeparam name="TOut">The type of output message.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.Pair`3.#ctor(Microsoft.Psi.Pipeline,System.Func{`0,`1,`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Pair`3"/> class.
            </summary>
            <param name="pipeline">The pipeline to which to attach.</param>
            <param name="outputCreator">Mapping function from primary/secondary stream values to output type.</param>
        </member>
        <member name="M:Microsoft.Psi.Components.Pair`3.#ctor(Microsoft.Psi.Pipeline,System.Func{`0,`1,`2},`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Pair`3"/> class.
            </summary>
            <param name="pipeline">The pipeline to which to attach.</param>
            <param name="outputCreator">Mapping function from primary/secondary stream values to output type.</param>
            <param name="initialSecondaryValue">An initial secondary value to be used until the first message arrives on the secondary stream.</param>
        </member>
        <member name="P:Microsoft.Psi.Components.Pair`3.Out">
            <summary>
            Gets the output emitter.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Components.Pair`3.InPrimary">
            <summary>
            Gets the primary receiver.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Components.Pair`3.InSecondary">
            <summary>
            Gets the secondary receiver.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Components.ParallelFixedLength`2">
            <summary>
            Creates and applies a sub-pipeline to each element in the input array. The input array must have the same length across all messages.
            The sub-pipelines have index affinity, meaning the same sub-pipeline is re-used across multiple messages for the entry with the same index.
            </summary>
            <typeparam name="TIn">The input message type.</typeparam>
            <typeparam name="TOut">The result type.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.ParallelFixedLength`2.#ctor(Microsoft.Psi.Pipeline,System.Int32,System.Action{System.Int32,Microsoft.Psi.IProducer{`0}},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.ParallelFixedLength`2"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
            <param name="vectorSize">Vector size.</param>
            <param name="action">Action to apply to output producers.</param>
            <param name="name">Name for this component (defaults to ParallelFixedLength).</param>
            <param name="defaultDeliveryPolicy">Pipeline-level default delivery policy to be used by this component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
        </member>
        <member name="M:Microsoft.Psi.Components.ParallelFixedLength`2.#ctor(Microsoft.Psi.Pipeline,System.Int32,System.Func{System.Int32,Microsoft.Psi.IProducer{`0},Microsoft.Psi.IProducer{`1}},System.Boolean,`1,System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.ParallelFixedLength`2"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
            <param name="vectorSize">Vector size.</param>
            <param name="transform">Function mapping keyed input producers to output producers.</param>
            <param name="outputDefaultIfDropped">When true, a result is produced even if a message is dropped in processing one of the input elements. In this case the corresponding output element is set to a default value.</param>
            <param name="defaultValue">Default value to use when messages are dropped in processing one of the input elements.</param>
            <param name="name">Name for this component (defaults to ParallelFixedLength).</param>
            <param name="defaultDeliveryPolicy">Pipeline-level default delivery policy to be used by this component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
        </member>
        <member name="P:Microsoft.Psi.Components.ParallelFixedLength`2.In">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Components.ParallelFixedLength`2.Out">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Psi.Components.ParallelSparseDo`3">
            <summary>
            Creates and executes parallel subpipelines based on an input stream and a splitter function.
            </summary>
            <typeparam name="TIn">The input message type.</typeparam>
            <typeparam name="TBranchKey">The branch key type.</typeparam>
            <typeparam name="TBranchIn">The branch input message type.</typeparam>
            <remarks>A splitter function is applied to each input message to generate a dictionary, and
            a subpipeline is created and executed for every key in the dictionary. A branch termination
            policy function governs when branches are terminated.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Components.ParallelSparseDo`3.#ctor(Microsoft.Psi.Pipeline,System.Func{`0,System.Collections.Generic.Dictionary{`1,`2}},System.Action{`1,Microsoft.Psi.IProducer{`2}},System.Func{`1,System.Collections.Generic.Dictionary{`1,`2},System.DateTime,System.ValueTuple{System.Boolean,System.DateTime}},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.ParallelSparseDo`3"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
            <param name="splitter">A function that generates a dictionary of key-value pairs for each given input message.</param>
            <param name="action">Action to perform in parallel.</param>
            <param name="branchTerminationPolicy">Predicate function determining whether and when (originating time) to terminate branches (defaults to when key no longer present), given the current key, message payload (dictionary) and originating time.</param>
            <param name="name">Name for this component (defaults to ParallelSparse).</param>
            <param name="defaultDeliveryPolicy">Pipeline-level default delivery policy to be used by this component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
        </member>
        <member name="P:Microsoft.Psi.Components.ParallelSparseDo`3.In">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Psi.Components.ParallelSparseSelect`5">
            <summary>
            Transforms a stream of messages by splitting it into a set of sub-streams (indexed by a branch key),
            applying a sub-pipeline to each of these streams, and assembling the results into a corresponding
            output stream.
            </summary>
            <typeparam name="TIn">The input message type.</typeparam>
            <typeparam name="TBranchKey">The key type.</typeparam>
            <typeparam name="TBranchIn">The branch input message type.</typeparam>
            <typeparam name="TBranchOut">The branch output message type.</typeparam>
            <typeparam name="TOut">The output type.</typeparam>
            <remarks>A splitter function is applied to each input message to generate a dictionary, and
            a subpipeline is created and executed for every new key in the dictionary. The results generated
            on individual branches are combined to create the output via an output creator function. A branch
            termination policy function governs when branches are terminated.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Components.ParallelSparseSelect`5.#ctor(Microsoft.Psi.Pipeline,System.Func{`0,System.Collections.Generic.Dictionary{`1,`2}},System.Func{`1,Microsoft.Psi.IProducer{`2},Microsoft.Psi.IProducer{`3}},System.Func{System.Collections.Generic.Dictionary{`1,`3},`4},System.Boolean,`3,System.Func{`1,System.Collections.Generic.Dictionary{`1,`2},System.DateTime,System.ValueTuple{System.Boolean,System.DateTime}},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.ParallelSparseSelect`5"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
            <param name="splitter">A function that splits the input by generating a dictionary of key-value pairs for each given input message.</param>
            <param name="transform">Function mapping keyed input producers to output producers.</param>
            <param name="outputDefaultIfDropped">When true, a result is produced even if a message is dropped in processing one of the input elements. In this case the corresponding output element is set to a default value.</param>
            <param name="defaultValue">Default value to use when messages are dropped in processing one of the input elements.</param>
            <param name="outputCreator">A function that creates the output message based on a dictionary containing the branch outputs.</param>
            <param name="branchTerminationPolicy">Predicate function determining whether and when (originating time) to terminate branches (defaults to when key no longer present), given the current key, message payload (dictionary) and originating time.</param>
            <param name="name">Name for this component (defaults to ParallelSparse).</param>
            <param name="defaultDeliveryPolicy">Pipeline-level default delivery policy to be used by this component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
        </member>
        <member name="P:Microsoft.Psi.Components.ParallelSparseSelect`5.In">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Components.ParallelSparseSelect`5.Out">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Psi.Components.ParallelSparseSplitter`4">
            <summary>
            Implements the splitter for the <see cref="T:Microsoft.Psi.Components.ParallelSparseDo`3"/>
            and <see cref="T:Microsoft.Psi.Components.ParallelSparseSelect`5"/> components.
            </summary>
            <typeparam name="TIn">The input message type.</typeparam>
            <typeparam name="TBranchKey">The key type.</typeparam>
            <typeparam name="TBranchIn">The branch input message type.</typeparam>
            <typeparam name="TBranchOut">The branch output message type.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.ParallelSparseSplitter`4.#ctor(Microsoft.Psi.Pipeline,System.Func{`0,System.Collections.Generic.Dictionary{`1,`2}},System.Func{`1,Microsoft.Psi.IProducer{`2},Microsoft.Psi.IProducer{`3}},System.Func{`1,System.Collections.Generic.Dictionary{`1,`2},System.DateTime,System.ValueTuple{System.Boolean,System.DateTime}},System.Action{Microsoft.Psi.IProducer{`3}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.ParallelSparseSplitter`4"/> class.
            </summary>
            <param name="pipeline">The pipeline to add the component to.</param>
            <param name="splitter">A function that splits the input by generating a dictionary of key-value pairs for each given input message.</param>
            <param name="transform">Function mapping keyed input producers to output producers.</param>
            <param name="branchTerminationPolicy">Predicate function determining whether and when (originating time) to terminate branches (defaults to when key no longer present), given the current key.</param>
            <param name="connectToJoin">Action that connects the results of a parallel branch back to join.</param>
        </member>
        <member name="M:Microsoft.Psi.Components.ParallelSparseSplitter`4.#ctor(Microsoft.Psi.Pipeline,System.Func{`0,System.Collections.Generic.Dictionary{`1,`2}},System.Action{`1,Microsoft.Psi.IProducer{`2}},System.Func{`1,System.Collections.Generic.Dictionary{`1,`2},System.DateTime,System.ValueTuple{System.Boolean,System.DateTime}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.ParallelSparseSplitter`4"/> class.
            </summary>
            <param name="pipeline">The pipeline to add the component to.</param>
            <param name="splitter">A function that generates a dictionary of key-value pairs for each given input message.</param>
            <param name="action">Action to perform in parallel.</param>
            <param name="branchTerminationPolicy">Predicate function determining whether and when (originating time) to terminate branches (defaults to when key no longer present), given the current key.</param>
        </member>
        <member name="P:Microsoft.Psi.Components.ParallelSparseSplitter`4.In">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Psi.Components.ParallelSparseSplitter`4.ActiveBranches">
            <summary>
            Gets the active branches emitter.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Components.ParallelVariableLength`2">
            <summary>
            Creates and applies a sub-pipeline to each element in the input array. The input array can have variable length.
            The sub-pipelines have index affinity, meaning the same sub-pipeline is re-used across multiple messages for the entry with the same index in the array.
            </summary>
            <typeparam name="TIn">The input message type.</typeparam>
            <typeparam name="TOut">The result type.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.ParallelVariableLength`2.#ctor(Microsoft.Psi.Pipeline,System.Action{System.Int32,Microsoft.Psi.IProducer{`0}},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.ParallelVariableLength`2"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
            <param name="action">Function mapping keyed input producers to output producers.</param>
            <param name="name">Name for this component (defaults to ParallelVariableLength).</param>
            <param name="defaultDeliveryPolicy">Pipeline-level default delivery policy to be used by this component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
        </member>
        <member name="M:Microsoft.Psi.Components.ParallelVariableLength`2.#ctor(Microsoft.Psi.Pipeline,System.Func{System.Int32,Microsoft.Psi.IProducer{`0},Microsoft.Psi.IProducer{`1}},System.Boolean,`1,System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.ParallelVariableLength`2"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
            <param name="transform">Function mapping keyed input producers to output producers.</param>
            <param name="outputDefaultIfDropped">When true, a result is produced even if a message is dropped in processing one of the input elements. In this case the corresponding output element is set to a default value.</param>
            <param name="defaultValue">Default value to use when messages are dropped in processing one of the input elements.</param>
            <param name="name">Name for this component (defaults to ParallelVariableLength).</param>
            <param name="defaultDeliveryPolicy">Pipeline-level default delivery policy to be used by this component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
        </member>
        <member name="P:Microsoft.Psi.Components.ParallelVariableLength`2.In">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Components.ParallelVariableLength`2.Out">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Psi.Components.Processor`2">
            <summary>
            Component that wraps a transform delegate which processes input messages and optionally publishes results.
            There is no assumption regarding the number of input messages needed to produce a result, or the number of output messages
            resulting from one input message.
            If the transform is stateful, special care needs to be taken when storing input message data.
            The input message payload is only valid for the duration of the transform call.
            If the data needs to be stored beyond the scope of this method,
            use the extension method <see cref="M:Microsoft.Psi.Serializer.DeepClone``1(``0,``0@)"/> to create a private copy.
            </summary>
            <typeparam name="TIn">The input message type.</typeparam>
            <typeparam name="TOut">The result type.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.Processor`2.#ctor(Microsoft.Psi.Pipeline,System.Action{`0,Microsoft.Psi.Envelope,Microsoft.Psi.Emitter{`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Processor`2"/> class.
            </summary>
            <param name="pipeline">The pipeline to attach to.</param>
            <param name="transform">A delegate that processes the input data and potentially publishes a result on the provided <see cref="T:Microsoft.Psi.Emitter`1"/>.</param>
        </member>
        <member name="M:Microsoft.Psi.Components.Processor`2.Receive(`0,Microsoft.Psi.Envelope)">
            <summary>
            Override this method to process the incoming message and potentially publish one or more output messages.
            The input message payload is only valid for the duration of the call.
            If the data needs to be stored beyond the scope of this method,
            use the extension method <see cref="M:Microsoft.Psi.Serializer.DeepClone``1(``0,``0@)"/> to create a private copy.
            </summary>
            <param name="data">The input message payload.</param>
            <param name="envelope">The input message envelope.</param>
        </member>
        <member name="T:Microsoft.Psi.Components.RelativeIndexWindow`2">
            <summary>
            Implements an index-based windowing component.
            </summary>
            <typeparam name="TInput">The type of input messages.</typeparam>
            <typeparam name="TOutput">The type of output messages.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.RelativeIndexWindow`2.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.IntInterval,System.Func{System.Collections.Generic.IEnumerable{Microsoft.Psi.Message{`0}},`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.RelativeIndexWindow`2"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
            <param name="relativeIndexInterval">The relative index interval over which to gather messages.</param>
            <param name="selector">Select output message from collected window of input messages.</param>
        </member>
        <member name="M:Microsoft.Psi.Components.RelativeIndexWindow`2.Receive(`0,Microsoft.Psi.Envelope)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Psi.Components.RelativeTimeWindow`2">
            <summary>
            Implements a time-based windowing component.
            </summary>
            <typeparam name="TInput">The type of input messages.</typeparam>
            <typeparam name="TOutput">The type of output messages.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.RelativeTimeWindow`2.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.RelativeTimeInterval,System.Func{System.Collections.Generic.IEnumerable{Microsoft.Psi.Message{`0}},`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.RelativeTimeWindow`2"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
            <param name="relativeTimeInterval">The relative time interval over which to gather messages.</param>
            <param name="selector">Select output message from collected window of input messages.</param>
        </member>
        <member name="M:Microsoft.Psi.Components.RelativeTimeWindow`2.Receive(`0,Microsoft.Psi.Envelope)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Psi.Components.SerializerComponent`1">
            <summary>
            Serializer optimized for streaming scenarios, where buffers and instances can be cached.
            </summary>
            <typeparam name="T">The type of messages to serialize.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.SerializerComponent`1.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.Serialization.KnownSerializers)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.SerializerComponent`1"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
            <param name="serializers">Known serializers.</param>
        </member>
        <member name="M:Microsoft.Psi.Components.SerializerComponent`1.Receive(Microsoft.Psi.Message{`0},Microsoft.Psi.Envelope)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Psi.Components.SimpleConsumer`1">
            <summary>
            A simple consumer.
            </summary>
            <typeparam name="TIn">The input message type.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.SimpleConsumer`1.#ctor(Microsoft.Psi.Pipeline)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.SimpleConsumer`1"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
        </member>
        <member name="P:Microsoft.Psi.Components.SimpleConsumer`1.In">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Components.SimpleConsumer`1.Receive(Microsoft.Psi.Message{`0})">
            <summary>
            Message receiver.
            </summary>
            <param name="message">Message received.</param>
        </member>
        <member name="T:Microsoft.Psi.Components.Splitter`2">
            <summary>
            Sends the input message to at most one of the dynamic outputs, selected using the specified output selector.
            </summary>
            <typeparam name="TIn">The input message type.</typeparam>
            <typeparam name="TKey">The type of key to use when identifying the correct output.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.Splitter`2.#ctor(Microsoft.Psi.Pipeline,System.Func{`0,Microsoft.Psi.Envelope,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Splitter`2"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
            <param name="outputSelector">Selector function identifying the output.</param>
        </member>
        <member name="P:Microsoft.Psi.Components.Splitter`2.In">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Components.Splitter`2.Add(`1)">
            <summary>
            Add emitter mapping.
            </summary>
            <param name="key">Key to which to map emitter.</param>
            <returns>Emitter having been mapped.</returns>
        </member>
        <member name="T:Microsoft.Psi.Components.Timer">
            <summary>
            A simple producer component that wakes up on a predefined interval and publishes a simple message.
            This is useful for components that need to poll some resource. Such components can simply subscribe to this
            clock component rather than registering a timer on their own.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Components.Timer.timerInterval">
            <summary>
            The interval on which to publish messages.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Components.Timer.timerDelegate">
            <summary>
            Delegate we need to hold on to, so that it doesn't get garbage collected.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Components.Timer.timer">
            <summary>
            The id of the multimedia timer we use under the covers.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Components.Timer.startTime">
            <summary>
            The start time of the timer.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Components.Timer.endTime">
            <summary>
            The end time of the timer.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Components.Timer.running">
            <summary>
            True if the timer is set.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Components.Timer.notifyCompletionTime">
            <summary>
            An action to call when done.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Components.Timer.#ctor(Microsoft.Psi.Pipeline,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Timer"/> class.
            The timer fires off messages at the rate specified  by timerInterval.
            </summary>
            <param name="pipeline">The pipeline to add the component to.</param>
            <param name="timerInterval">The timer firing interval, in ms.</param>
        </member>
        <member name="M:Microsoft.Psi.Components.Timer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Microsoft.Psi.Components.Timer"/> class.
            Releases the underlying unmanaged timer.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Components.Timer.Dispose">
            <summary>
            Called when the component is stopped.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Components.Timer.Start(System.Action{System.DateTime})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Components.Timer.Stop(System.DateTime,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Components.Timer.Generate(System.DateTime,System.TimeSpan)">
            <summary>
            Called by the timer. Override to publish actual messages.
            </summary>
            <param name="absoluteTime">The current (virtual) time.</param>
            <param name="relativeTime">The time elapsed since the generator was started.</param>
        </member>
        <member name="M:Microsoft.Psi.Components.Timer.PublishTime(System.UInt32,System.UInt32,System.UIntPtr,System.UIntPtr,System.UIntPtr)">
            <summary>
            Wakes up every timerInterval to publish a new message.
            </summary>
            <param name="timerID">The parameter is not used.</param>
            <param name="msg">The parameter is not used.</param>
            <param name="userCtx">The parameter is not used.</param>
            <param name="dw1">The parameter is not used.</param>
            <param name="dw2">The parameter is not used.</param>
        </member>
        <member name="T:Microsoft.Psi.Components.Timer`1">
            <summary>
            A simple producer component that wakes up on a predefined interval and publishes one message.
            </summary>
            <typeparam name="TOut">The type of messages published by the generator.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.Timer`1.#ctor(Microsoft.Psi.Pipeline,System.UInt32,System.Func{System.DateTime,System.TimeSpan,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Timer`1"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
            <param name="timerInterval">Time interval with which to produce messages.</param>
            <param name="generator">Message generation function.</param>
        </member>
        <member name="P:Microsoft.Psi.Components.Timer`1.Out">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Components.Timer`1.Generate(System.DateTime,System.TimeSpan)">
            <summary>
            Generate timer message from current and elapsed time.
            </summary>
            <param name="absoluteTime">The current (virtual) time.</param>
            <param name="relativeTime">The time elapsed since the generator was started.</param>
        </member>
        <member name="T:Microsoft.Psi.Components.Zip`1">
            <summary>
            Zip one or more streams (T) into a single stream while ensuring delivery in originating time order.
            </summary>
            <remarks>Messages are produced in originating-time order; potentially delayed in wall-clock time.
            If multiple messages arrive with the same originating time, they are added in the output array in
            the order of stream ids.</remarks>
            <typeparam name="T">The type of the messages.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.Zip`1.#ctor(Microsoft.Psi.Pipeline)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Zip`1"/> class.
            </summary>
            <param name="pipeline">The pipeline to which to attach.</param>
        </member>
        <member name="P:Microsoft.Psi.Components.Zip`1.Out">
            <summary>
            Gets the output emitter.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Components.Zip`1.AddInput(System.String)">
            <summary>
            Add input receiver.
            </summary>
            <param name="name">The unique debug name of the receiver.</param>
            <returns>Receiver.</returns>
        </member>
        <member name="T:Microsoft.Psi.Components.Connector`1">
            <summary>
            A pass-through component, that can relay messages from one pipeline to another and can be used when
            writing composite components via subpipelines. The composite component can create input and output
            connectors instead of receivers.
            </summary>
            <typeparam name="T">The message type.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.Connector`1.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.Pipeline,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Connector`1"/> class.
            </summary>
            <param name="from">The source pipeline.</param>
            <param name="to">The target pipeline.</param>
            <param name="name">The name of the connector.</param>
            <param name="preserveEnvelope">Whether or not the source message envelopes should be preserved.</param>
        </member>
        <member name="M:Microsoft.Psi.Components.Connector`1.#ctor(Microsoft.Psi.Pipeline,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.Connector`1"/> class.
            </summary>
            <param name="pipeline">The pipeline to create the connector in.</param>
            <param name="name">The name of the connector.</param>
            <param name="preserveEnvelope">Whether or not the source message envelopes should be preserved.</param>
        </member>
        <member name="P:Microsoft.Psi.Components.Connector`1.In">
            <summary>
            Gets the connector input.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Components.Connector`1.Out">
            <summary>
            Gets the connector output.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Components.Connector`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Psi.Components.IConnector">
            <summary>
            Defines a marker interface for connectors, e.g. entities used to bridge pipelines.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Components.MessageConnector`1">
            <summary>
            A pass-through component that connects two different pipelines, and sends the entire message (including
            envelope) from the source pipeline to the target pipeline. This connector is internal for now, and
            used by the <see cref="T:Microsoft.Psi.Data.Exporter"/> component, which requires the entire envelope.
            </summary>
            <typeparam name="T">The message type.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.MessageConnector`1.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.Pipeline,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.MessageConnector`1"/> class.
            </summary>
            <param name="from">The source pipeline to bridge from.</param>
            <param name="to">The target pipeline to bridge to.</param>
            <param name="name">The name of the connector.</param>
            <remarks>The `MessageConnector` to bridge `from` a source pipeline into a `target` pipeline, while carrying all
            the envelope information from the source into the target pipeline.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Components.MessageConnector`1.#ctor(Microsoft.Psi.Pipeline,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.MessageConnector`1"/> class.
            </summary>
            <param name="pipeline">The pipeline to add the connector to.</param>
            <param name="name">The name of the connector.</param>
        </member>
        <member name="P:Microsoft.Psi.Components.MessageConnector`1.In">
            <summary>
            Gets the connector input.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Components.MessageConnector`1.Out">
            <summary>
            Gets the connector output.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Components.MessageConnector`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Psi.Components.MessageEnvelopeConnector`1">
            <summary>
            A pass-through component that connects two different pipelines, and sends the envelope of the message
            with a 0 (int) payload from the source pipeline to the target pipeline. This connector is internal
            for now, and used by the <see cref="T:Microsoft.Psi.Data.Exporter"/> component, to write stream envelopes to store.
            </summary>
            <typeparam name="T">The message type.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Components.MessageEnvelopeConnector`1.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.Pipeline,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.MessageEnvelopeConnector`1"/> class.
            </summary>
            <param name="from">The source pipeline to bridge from.</param>
            <param name="to">The target pipeline to bridge to.</param>
            <param name="name">The name of the connector.</param>
            <remarks>The `MessageEnvelope` to bridge `from` a source pipeline into a `target` pipeline, while carrying all
            the envelope information from the source into the target pipeline.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Components.MessageEnvelopeConnector`1.#ctor(Microsoft.Psi.Pipeline,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Components.MessageEnvelopeConnector`1"/> class.
            </summary>
            <param name="pipeline">The pipeline to add the connector to.</param>
            <param name="name">The name of the connector.</param>
        </member>
        <member name="P:Microsoft.Psi.Components.MessageEnvelopeConnector`1.In">
            <summary>
            Gets the connector input.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Components.MessageEnvelopeConnector`1.Out">
            <summary>
            Gets the connector output.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Components.MessageEnvelopeConnector`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Psi.ConfigurationHelper`1">
            <summary>
            A component helper for managing component configuration.
            </summary>
            <typeparam name="T">The type of the configuration class.</typeparam>
        </member>
        <member name="F:Microsoft.Psi.ConfigurationHelper`1.configuration">
            <summary>
            The configuration class.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.ConfigurationHelper`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.ConfigurationHelper`1"/> class.
            </summary>
            <param name="configurationFilename">The name of the configuration file to load.</param>
        </member>
        <member name="P:Microsoft.Psi.ConfigurationHelper`1.Configuration">
            <summary>
            Gets the configuration object.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.ConfigurationHelper`1.LoadFromXml(System.String)">
            <summary>
            Loads an object of type T from XML.
            </summary>
            <param name="filename">The name of the file to load from.</param>
        </member>
        <member name="M:Microsoft.Psi.ConfigurationHelper`1.SaveToXml(System.String)">
            <summary>
            Saves the configuration to XML.
            </summary>
            <param name="filename">The name of the file to save to.</param>
        </member>
        <member name="T:Microsoft.Psi.Data.Exporter">
            <summary>
            Component that writes messages to a multi-stream store.
            </summary>
            <remarks>
            The store can be backed by a file on disk, can be ephemeral (in-memory) for inter-process communication
            or can be a network protocol for cross-machine communication.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Data.Exporter.#ctor(Microsoft.Psi.Pipeline,System.String,System.String,System.Boolean,Microsoft.Psi.Serialization.KnownSerializers)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Data.Exporter"/> class.
            </summary>
            <param name="pipeline">The pipeline to add the component to.</param>
            <param name="name">The name of the application that generated the persisted files, or the root name of the files.</param>
            <param name="path">The directory in which the main persisted file resides or will reside, or null to create a volatile data store.</param>
            <param name="createSubdirectory">If true, a numbered sub-directory is created for this store.</param>
            <param name="serializers">
            A collection of known serializers, or null to infer it from the data being written to the store.
            The known serializer set can be accessed and modified afterwards via the <see cref="P:Microsoft.Psi.Data.Exporter.Serializers"/> property.
            </param>
        </member>
        <member name="P:Microsoft.Psi.Data.Exporter.Name">
            <summary>
            Gets the name of the store being written to.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Data.Exporter.Path">
            <summary>
            Gets the path to the store being written to if the store is persisted to disk, or null if the store is volatile.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Data.Exporter.Serializers">
            <summary>
            Gets the set of types that this Importer can deserialize.
            Types can be added or re-mapped using the <see cref="M:Microsoft.Psi.Serialization.KnownSerializers.Register``1(System.String,Microsoft.Psi.Serialization.CloningFlags)"/> method.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Data.Exporter.Throttle">
            <summary>
            Gets the event that allows remoting to throttle data reading to match a specified network bandwidth.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Data.Exporter.Dispose">
            <summary>
            Closes the store.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Data.Exporter.Write``1(Microsoft.Psi.IProducer{``0},System.String,System.Boolean,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Writes the messages from the specified stream to the matching stream in this store.
            </summary>
            <typeparam name="TMessage">The type of messages in the stream.</typeparam>
            <param name="source">The source stream to write.</param>
            <param name="name">The name of the stream.</param>
            <param name="largeMessages">Indicates whether the stream contains large messages (typically >4k). If true, the messages will be written to the large message file.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
        </member>
        <member name="M:Microsoft.Psi.Data.Exporter.Write``2(Microsoft.Psi.IProducer{``0},``1,System.String,System.Boolean,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Writes the messages from the specified stream to the matching stream in this store.
            Additionally stores supplemental metadata value.
            </summary>
            <typeparam name="TMessage">The type of messages in the stream.</typeparam>
            <typeparam name="TSupplementalMetadata">The type of supplemental stream metadata.</typeparam>
            <param name="source">The source stream to write.</param>
            <param name="supplementalMetadataValue">Supplemental metadata value.</param>
            <param name="name">The name of the stream.</param>
            <param name="largeMessages">Indicates whether the stream contains large messages (typically >4k). If true, the messages will be written to the large message file.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
        </member>
        <member name="M:Microsoft.Psi.Data.Exporter.SummarizeDistinctKeysInSupplementalMetadata``2(Microsoft.Psi.Emitter{System.Collections.Generic.Dictionary{``0,``1}})">
            <summary>
            Stores supplemental metadata representing distinct dictionary keys seen on the stream.
            </summary>
            <typeparam name="TKey">The type of dictionary key in the stream.</typeparam>
            <typeparam name="TValue">The type of dictionary value in the stream.</typeparam>
            <param name="source">The source stream to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Data.Exporter.WriteEnvelopes``1(Microsoft.Psi.IProducer{``0},System.String,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Writes the envelopes of messages from the specified stream to the store.
            </summary>
            <typeparam name="T">The type of messages in the stream.</typeparam>
            <param name="source">The source stream to write.</param>
            <param name="name">The name of the stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
        </member>
        <member name="M:Microsoft.Psi.Data.Exporter.Write``1(Microsoft.Psi.Emitter{``0},System.String,Microsoft.Psi.PsiStreamMetadata,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Writes the messages from the specified stream to the matching stream in this store.
            </summary>
            <typeparam name="TMessage">The type of messages in the stream.</typeparam>
            <param name="source">The source stream to write.</param>
            <param name="name">The name of the stream.</param>
            <param name="metadata">Source stream metadata.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
        </member>
        <member name="M:Microsoft.Psi.Data.Exporter.WriteToStorage``1(Microsoft.Psi.Emitter{``0},System.String,System.Boolean,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Writes the messages from the specified stream to the matching stream in this store.
            </summary>
            <typeparam name="TMessage">The type of messages in the stream.</typeparam>
            <param name="source">The source stream to write.</param>
            <param name="name">The name of the stream.</param>
            <param name="largeMessages">Indicates whether the stream contains large messages (typically >4k). If true, the messages will be written to the large message file.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream metadata.</returns>
        </member>
        <member name="T:Microsoft.Psi.Data.Exporter.DistinctKeysSupplementalMetadata`1">
            <summary>
            Represents distinct keys on a dictionary stream.
            </summary>
            <typeparam name="T">Type of keys.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Data.Exporter.DistinctKeysSupplementalMetadata`1.#ctor(System.Collections.Generic.SortedSet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Data.Exporter.DistinctKeysSupplementalMetadata`1"/> class.
            </summary>
            <param name="keys">Set of distinct keys.</param>
        </member>
        <member name="P:Microsoft.Psi.Data.Exporter.DistinctKeysSupplementalMetadata`1.Keys">
            <summary>
            Gets distinct keys.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Data.Importer">
            <summary>
            Component that reads messages via a specified <see cref="T:Microsoft.Psi.Data.IStreamReader"/> and publishes them on streams.
            </summary>
            <remarks>
            Reads either at the full speed allowed by available resources or at the desired rate
            specified by the <see cref="T:Microsoft.Psi.Pipeline"/>. The store metadata is available immediately after open
            (before the pipeline is running) via the <see cref="P:Microsoft.Psi.Data.Importer.AvailableStreams"/> property.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.Data.IStreamReader,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Data.Importer"/> class.
            </summary>
            <param name="pipeline">The pipeline to add the component to.</param>
            <param name="streamReader">Stream reader.</param>
            <param name="usePerStreamReaders">Flag indicating whether to use per-stream readers.</param>
        </member>
        <member name="P:Microsoft.Psi.Data.Importer.StoreName">
            <summary>
            Gets the name of the store, or null if this is a volatile store.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Data.Importer.StorePath">
            <summary>
            Gets the path of the store, or null if this is a volatile store.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Data.Importer.Serializers">
            <summary>
            Gets the set of types that this Importer can deserialize.
            Types can be added or re-mapped using the <see cref="M:Microsoft.Psi.Serialization.KnownSerializers.Register``1(System.String,Microsoft.Psi.Serialization.CloningFlags)"/> method.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Data.Importer.AvailableStreams">
            <summary>
            Gets the metadata of all the streams in this store.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Data.Importer.MessageCreationTimeInterval">
            <summary>
            Gets the interval between the creation times of the first and last messages written to this store, across all streams.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Data.Importer.MessageOriginatingTimeInterval">
            <summary>
            Gets the interval between the originating times of the first and last messages written to this store, across all streams.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Data.Importer.StreamTimeInterval">
            <summary>
            Gets the interval between the opened times and closed times, across all streams.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.GetMetadata(System.String)">
            <summary>
            Returns the metadata for a specified stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <returns>The metadata associated with the stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.GetSupplementalMetadata``1(System.String)">
            <summary>
            Returns the supplemental metadata for a specified stream.
            </summary>
            <typeparam name="T">Type of supplemental metadata.</typeparam>
            <param name="streamName">The name of the stream.</param>
            <returns>The metadata associated with the stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.Contains(System.String)">
            <summary>
            Indicates whether the store contains the specified stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <returns>True if the store contains a stream with the specified name, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.CopyStream(System.String,Microsoft.Psi.Data.Exporter,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Message{Microsoft.Psi.Common.BufferReader}})">
            <summary>
            Copies the specified stream to an exporter without deserializing the data.
            </summary>
            <param name="streamName">The name of the stream to copy.</param>
            <param name="writer">The store to copy to.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.OpenStream``1(System.String,System.Func{``0},System.Action{``0})">
            <summary>
            Opens the specified stream for reading and returns a stream instance that can be used to consume the messages.
            The returned stream will publish data read from the store once the pipeline is running.
            </summary>
            <typeparam name="T">The expected type of the stream to open.
            This type will be used to deserialize the stream messages.</typeparam>
            <param name="streamName">The name of the stream to open.</param>
            <param name="allocator">An optional allocator of messages.</param>
            <param name="deallocator">An optional deallocator to use after the messages have been sent out (defaults to disposing <see cref="T:System.IDisposable"/> messages.)</param>
            <returns>A stream that publishes the data read from the store.</returns>
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.OpenDynamicStream(System.String,System.Func{System.Object},System.Action{System.Object})">
            <summary>
            Opens the specified stream as dynamic for reading and returns a stream instance that can be used to consume the messages.
            The returned stream will publish data read from the store once the pipeline is running.
            </summary>
            <remarks>Messages are deserialized as dynamic primitives and/or ExpandoObject of dynamic.</remarks>
            <param name="streamName">The name of the stream to open.</param>
            <param name="allocator">An optional allocator of messages.</param>
            <param name="deallocator">An optional deallocator to use after the messages have been sent out (defaults to disposing <see cref="T:System.IDisposable"/> messages.)</param>
            <returns>A stream of dynamic that publishes the data read from the store.</returns>
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.OpenRawStream(Microsoft.Psi.PsiStreamMetadata)">
            <summary>
            Opens the specified stream as raw `Message` of `BufferReader` for reading and returns a stream instance that can be used to consume the messages.
            The returned stream will publish data read from the store once the pipeline is running.
            </summary>
            <remarks>Messages are not deserialized.</remarks>
            <param name="meta">The meta of the stream to open.</param>
            <returns>A stream of raw messages that publishes the data read from the store.</returns>
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.BridgeOut``1(Microsoft.Psi.IProducer{``0},System.String)">
            <summary>
            Bridge output stream out to parent pipeline.
            </summary>
            <typeparam name="T">Type of stream messages.</typeparam>
            <param name="stream">Stream of messages.</param>
            <param name="name">Stream name.</param>
            <returns>Bridged stream.</returns>
        </member>
        <member name="T:Microsoft.Psi.Data.Importer.StreamImporter">
            <summary>
            Component that reads messages via a specified <see cref="T:Microsoft.Psi.Data.IStreamReader"/> and publishes them on streams.
            </summary>
            <remarks>
            Reads either at the full speed allowed by available resources or at the desired rate
            specified by the <see cref="T:Microsoft.Psi.Pipeline"/>. The store metadata is available immediately after open
            (before the pipeline is running) via the <see cref="P:Microsoft.Psi.Data.Importer.AvailableStreams"/> property.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.StreamImporter.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.Executive.KeyValueStore,Microsoft.Psi.Data.IStreamReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Data.Importer.StreamImporter"/> class.
            </summary>
            <param name="pipeline">The pipeline to add the component to.</param>
            <param name="configurationStore">Configuration store in which to store catalog meta.</param>
            <param name="streamReader">Stream reader.</param>
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.StreamImporter.Dispose">
            <summary>
            Closes the store and disposes of the current instance.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.StreamImporter.Start(System.Action{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.StreamImporter.Stop(System.DateTime,System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.StreamImporter.CopyStream(System.String,Microsoft.Psi.Data.Exporter,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Message{Microsoft.Psi.Common.BufferReader}})">
            <summary>
            Copies the specified stream to an exporter without deserializing the data.
            </summary>
            <param name="streamName">The name of the stream to copy.</param>
            <param name="writer">The store to copy to.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.StreamImporter.OpenStream``1(System.String,System.Func{``0},System.Action{``0})">
            <summary>
            Opens the specified stream for reading and returns a stream instance that can be used to consume the messages.
            The returned stream will publish data read from the store once the pipeline is running.
            </summary>
            <typeparam name="T">The expected type of the stream to open.
            This type will be used to deserialize the stream messages.</typeparam>
            <param name="streamName">The name of the stream to open.</param>
            <param name="allocator">An optional allocator of messages.</param>
            <param name="deallocator">An optional deallocator to use after the messages have been sent out (defaults to disposing <see cref="T:System.IDisposable"/> messages.)</param>
            <returns>A stream that publishes the data read from the store.</returns>
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.StreamImporter.OpenDynamicStream(System.String,System.Func{System.Object},System.Action{System.Object})">
            <summary>
            Opens the specified stream as dynamic for reading and returns a stream instance that can be used to consume the messages.
            The returned stream will publish data read from the store once the pipeline is running.
            </summary>
            <remarks>Messages are deserialized as dynamic primitives and/or ExpandoObject of dynamic.</remarks>
            <param name="streamName">The name of the stream to open.</param>
            <param name="allocator">An optional allocator of messages.</param>
            <param name="deallocator">An optional deallocator to use after the messages have been sent out (defaults to disposing <see cref="T:System.IDisposable"/> messages.)</param>
            <returns>A stream of dynamic that publishes the data read from the store.</returns>
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.StreamImporter.OpenRawStream(Microsoft.Psi.PsiStreamMetadata)">
            <summary>
            Opens the specified stream as raw `Message` of `BufferReader` for reading and returns a stream instance that can be used to consume the messages.
            The returned stream will publish data read from the store once the pipeline is running.
            </summary>
            <remarks>Messages are not deserialized.</remarks>
            <param name="meta">The meta of the stream to open.</param>
            <returns>A stream of raw messages that publishes the data read from the store.</returns>
        </member>
        <member name="M:Microsoft.Psi.Data.Importer.StreamImporter.Next(System.Boolean,Microsoft.Psi.Envelope)">
            <summary>
            Attempts to move the reader to the next message (across all streams).
            </summary>
            <param name="moreDataPromised">Indicates whether an absence of messages should be reported as the end of the store.</param>
            <param name="env">The envelope of the last message we read.</param>
        </member>
        <member name="T:Microsoft.Psi.Data.IndexEntry">
             <summary>
             Structure describing a position in a data file.
             </summary>
             <remarks>
             This structure is used in two places: the index file and the large data file.
             To facilitate seeking, each data file is accompanied by an index file containing records of this type.
             Each record indicates the largest time and originating time values seen up to the specified position.
             The position is a composite value, consisting of the extent and the relative position within the extent.
             These records allow seeking close to (but guaranteed before) a given time.
             Reading from the position provided by the index entry guarantees that all the messages with the
             time specified by the index entry will be read.
            
             To enable efficient reading of streams, the Store breaks streams in two categories: small and large.
             When writing large messages, an index entry is written into the main data file,
             pointing to a location in the large data file where the actual message resides.
             </remarks>
        </member>
        <member name="F:Microsoft.Psi.Data.IndexEntry.CreationTime">
            <summary>
            The largest time value seen up to the position specified by this entry.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Data.IndexEntry.OriginatingTime">
            <summary>
            The largest originating time value seen up to the position specified by this entry.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Data.IndexEntry.ExtentId">
            <summary>
            The id of the extent this index entry refers to.
            A negative extentId indicates an entry in the large file for \psi stores.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Data.IndexEntry.Position">
            <summary>
            The position within the extent to which this index entry points.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Data.IndexEntry.#ctor(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Data.IndexEntry"/> struct.
            </summary>
            <param name="creationTIme">The largest creation time value seen up to the position specified by this entry.</param>
            <param name="originatingTime">The largest originating time value seen up to the position specified by this entry.</param>
            <param name="extentId">The id of the extent this index entry refers to.</param>
            <param name="position">The position within the extent to which this index entry points.</param>
        </member>
        <member name="M:Microsoft.Psi.Data.IndexEntry.#ctor(Microsoft.Psi.Envelope,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Data.IndexEntry"/> struct.
            </summary>
            <param name="envelope">Envelope from which to get Time and OriginatingTime.</param>
            <param name="extentId">The id of the extent this index entry refers to.</param>
            <param name="position">The position within the extent to which this index entry points.</param>
        </member>
        <member name="T:Microsoft.Psi.Data.IStreamReader">
            <summary>
            Represents a reader of multiple streams of typed messages.
            </summary>
            <remarks>
            This interface provides the basis for enabling \psi tools and APIs to operate with different kinds of stream stores.
            In addition to this interface, a proper stream reader must provide a constructor accepting the Name and Path.
            For integration with Platform for Situated Intelligence Studio, implementations should include a class-level StreamReaderAttribute.
            </remarks>
        </member>
        <member name="P:Microsoft.Psi.Data.IStreamReader.Name">
            <summary>
            Gets the name of the application that generated the persisted files, or the root name of the files.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Data.IStreamReader.Path">
            <summary>
            Gets the directory in which the main persisted file resides.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Data.IStreamReader.AvailableStreams">
            <summary>
            Gets the set of streams in this store.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Data.IStreamReader.MessageCreationTimeInterval">
            <summary>
            Gets the interval between the creation times of the first and last messages written to this store, across all streams.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Data.IStreamReader.MessageOriginatingTimeInterval">
            <summary>
            Gets the interval between the originating times of the first and last messages written to this store, across all streams.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Data.IStreamReader.StreamTimeInterval">
            <summary>
            Gets the interval between the opened and closed times, across all streams.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Data.IStreamReader.Size">
            <summary>
            Gets the size of data accessed by the stream reader (in bytes), if known. Otherwise null.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Data.IStreamReader.StreamCount">
            <summary>
            Gets the number of streams, if known. Otherwise null.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Data.IStreamReader.OpenNew">
            <summary>
            Creates a new reader for the same store, without reloading internal state (index, metadata, ...).
            </summary>
            <returns>A new reader for the same store.</returns>
        </member>
        <member name="M:Microsoft.Psi.Data.IStreamReader.OpenStream``1(System.String,System.Action{``0,Microsoft.Psi.Envelope},System.Func{``0},System.Action{``0},System.Action{System.Runtime.Serialization.SerializationException})">
            <summary>
            Opens the specified stream for reading.
            </summary>
            <typeparam name="T">The type of messages in stream.</typeparam>
            <param name="name">The name of the stream to open.</param>
            <param name="target">The function to call for every message in this stream.</param>
            <param name="allocator">An optional allocator to use when deserializing messages.</param>
            <param name="deallocator">An optional deallocator to use after the messages have been sent to the consumers.</param>
            <param name="errorHandler">The function to call if an error occurs when reading the stream.</param>
            <returns>The metadata describing the opened stream.</returns>
            <remarks>
            The target action is called for every message in the stream, as a traversal of
            the store is performed by calling the <see cref="M:Microsoft.Psi.Data.IStreamReader.MoveNext(Microsoft.Psi.Envelope@)"/> or
            <see cref="M:Microsoft.Psi.Data.IStreamReader.ReadAll(Microsoft.Psi.ReplayDescriptor,System.Threading.CancellationToken)"/> methods. The target
            action should not hold on to a reference or a shallow copy of the message past
            the action's return point, as the stream reader infrastructure might dispose
            of it. If the target needs to hold on to the message, it must create a deep
            clone of it.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Data.IStreamReader.OpenStreamIndex``1(System.String,System.Action{System.Func{Microsoft.Psi.Data.IStreamReader,``0},Microsoft.Psi.Envelope},System.Func{``0})">
             <summary>
             Opens the specified stream for reading, in index form; providing only index entries to the target delegate.
             </summary>
             <typeparam name="T">The type of messages in stream.</typeparam>
             <param name="name">The name of the stream to open.</param>
             <param name="target">The function to call with a thunk which may be called to read, and envelope for every message in this stream.</param>
             <param name="allocator">An optional allocator to use when constructing messages.</param>
             <returns>The metadata describing the opened stream.</returns>
             <remarks>
             The target action is saved and later called as the data is read when
             <see cref="M:Microsoft.Psi.Data.IStreamReader.MoveNext(Microsoft.Psi.Envelope@)"/> or <see cref="M:Microsoft.Psi.Data.IStreamReader.ReadAll(Microsoft.Psi.ReplayDescriptor,System.Threading.CancellationToken)"/>
             are called. The target action is given the message Envelope and a Func which
             should be used to retrieve the message data. This Func may be held past the
             return point of the target action, as a kind of "index-thunk" that can be later
             called to retrieve the data. This function may be called, given the current
             IStreamReader or a new instance against the same store. Internally, the Func
             is likely a closure over information needed for retrieval (byte position, file
             extent, etc.) but these implementation details remain opaque to users of the
             reader (different implementors of the <see cref="T:Microsoft.Psi.Data.IStreamReader"/> interface
             may choose different mechanisms for implementing this functionality.)
            
             In contrast to the <see cref="M:Microsoft.Psi.Data.IStreamReader.OpenStream``1(System.String,System.Action{``0,Microsoft.Psi.Envelope},System.Func{``0},System.Action{``0},System.Action{System.Runtime.Serialization.SerializationException})"/>
             approach for reading stream messages, when using this method, not deallocator
             is provided. The reposibility for deallocating or disposing the messages
             returned by the index function rests with the caller of that function.
             </remarks>
        </member>
        <member name="M:Microsoft.Psi.Data.IStreamReader.Seek(Microsoft.Psi.TimeInterval,System.Boolean)">
            <summary>
            Moves the reader to the start of the specified interval and restricts the read to messages within the interval.
            </summary>
            <param name="interval">The interval for reading data.</param>
            <param name="useOriginatingTime">Indicates whether the interval refers to originating times or creation times.</param>
        </member>
        <member name="M:Microsoft.Psi.Data.IStreamReader.MoveNext(Microsoft.Psi.Envelope@)">
            <summary>
            Positions the reader to the next message from any one of the opened streams.
            </summary>
            <param name="envelope">The envelope associated with the message read.</param>
            <returns>True if there are more messages, false if no more messages are available.</returns>
        </member>
        <member name="M:Microsoft.Psi.Data.IStreamReader.IsLive">
            <summary>
            Indicates whether this store is still being written to by an active writer.
            </summary>
            <returns>True if an active writer is still writing to this store, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Psi.Data.IStreamReader.GetStreamMetadata(System.String)">
            <summary>
            Returns a metadata descriptor for the specified stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <returns>The metadata describing the specified stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Data.IStreamReader.GetSupplementalMetadata``1(System.String)">
            <summary>
            Returns the supplemental metadata for a specified stream.
            </summary>
            <typeparam name="T">Type of supplemental metadata.</typeparam>
            <param name="streamName">The name of the stream.</param>
            <returns>The metadata associated with the stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Data.IStreamReader.ContainsStream(System.String)">
            <summary>
            Checks whether the specified stream exists in this store.
            </summary>
            <param name="name">The name of the stream to look for.</param>
            <returns>True if a stream with the specified name exists, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Psi.Data.IStreamReader.ReadAll(Microsoft.Psi.ReplayDescriptor,System.Threading.CancellationToken)">
            <summary>
            Reads all the messages within the time interval specified by the replay descriptor and calls the registered delegates.
            </summary>
            <param name="descriptor">The replay descriptor providing the interval to read.</param>
            <param name="cancelationToken">A token that can be used to cancel the operation.</param>
        </member>
        <member name="T:Microsoft.Psi.Data.PsiExporter">
            <summary>
            Component that writes messages to a multi-stream \psi store.
            </summary>
            <remarks>
            The store can be backed by a file on disk, can be ephemeral (in-memory) for inter-process communication
            or can be a network protocol for cross-machine communication.
            Instances of this component can be created using <see cref="M:Microsoft.Psi.PsiStore.Create(Microsoft.Psi.Pipeline,System.String,System.String,System.Boolean,Microsoft.Psi.Serialization.KnownSerializers)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Data.PsiExporter.#ctor(Microsoft.Psi.Pipeline,System.String,System.String,System.Boolean,Microsoft.Psi.Serialization.KnownSerializers)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Data.PsiExporter"/> class.
            </summary>
            <param name="pipeline">The pipeline to add the component to.</param>
            <param name="name">The name of the application that generated the persisted files, or the root name of the files.</param>
            <param name="path">The directory in which the main persisted file resides or will reside, or null to create a volatile data store.</param>
            <param name="createSubdirectory">If true, a numbered sub-directory is created for this store.</param>
            <param name="serializers">
            A collection of known serializers, or null to infer it from the data being written to the store.
            The known serializer set can be accessed and modified afterwards via the <see cref="P:Microsoft.Psi.Data.Exporter.Serializers"/> property.
            </param>
        </member>
        <member name="T:Microsoft.Psi.Data.PsiImporter">
            <summary>
            Component that reads messages from a \psi store and publishes them on streams.
            </summary>
            <remarks>
            Reads either at the full speed allowed by available resources or at the desired rate
            specified by the <see cref="T:Microsoft.Psi.Pipeline"/>. Instances of this class can be created using the
            <see cref="M:Microsoft.Psi.PsiStore.Open(Microsoft.Psi.Pipeline,System.String,System.String,System.Boolean)"/> method. The store metadata is available immediately after open
            (before the pipeline is running) via the <see cref="P:Microsoft.Psi.Data.Importer.AvailableStreams"/> property.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Data.PsiImporter.#ctor(Microsoft.Psi.Pipeline,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Data.PsiImporter"/> class.
            </summary>
            <param name="pipeline">The pipeline to add the component to.</param>
            <param name="name">The name of the application that generated the persisted files, or the root name of the files.</param>
            <param name="path">The directory in which the main persisted file resides or will reside, or null to open a volatile data store.</param>
            <param name="usePerStreamReaders">Flag indicating whether to use per-stream readers.</param>
        </member>
        <member name="T:Microsoft.Psi.Data.PsiStoreStreamReader">
            <summary>
            Implements a reader of multiple streams of typed messages from a single store.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Data.PsiStoreStreamReader.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Data.PsiStoreStreamReader"/> class.
            </summary>
            <param name="name">The name of the application that generated the persisted files, or the root name of the files.</param>
            <param name="path">The directory in which the main persisted file resides or will reside, or null to create a volatile data store.</param>
        </member>
        <member name="M:Microsoft.Psi.Data.PsiStoreStreamReader.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Data.PsiStoreStreamReader"/> class.
            </summary>
            <param name="name">The name of the application that generated the persisted files, or the root name of the files.</param>
            <param name="path">The directory in which the main persisted file resides or will reside, or null to create a volatile data store.</param>
            <param name="defaultStartTime">Default start time (unused).</param>
        </member>
        <member name="P:Microsoft.Psi.Data.PsiStoreStreamReader.AvailableStreams">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Data.PsiStoreStreamReader.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Data.PsiStoreStreamReader.Path">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Data.PsiStoreStreamReader.MessageCreationTimeInterval">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Data.PsiStoreStreamReader.MessageOriginatingTimeInterval">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Data.PsiStoreStreamReader.StreamTimeInterval">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Data.PsiStoreStreamReader.Size">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Data.PsiStoreStreamReader.StreamCount">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Data.PsiStoreStreamReader.PsiStoreReader">
            <summary>
            Gets underlying PsiStoreReader (internal only, not part of IStreamReader interface).
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Data.PsiStoreStreamReader.Seek(Microsoft.Psi.TimeInterval,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Data.PsiStoreStreamReader.MoveNext(Microsoft.Psi.Envelope@)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Data.PsiStoreStreamReader.IsLive">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Data.PsiStoreStreamReader.OpenStream``1(System.String,System.Action{``0,Microsoft.Psi.Envelope},System.Func{``0},System.Action{``0},System.Action{System.Runtime.Serialization.SerializationException})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Data.PsiStoreStreamReader.OpenStreamIndex``1(System.String,System.Action{System.Func{Microsoft.Psi.Data.IStreamReader,``0},Microsoft.Psi.Envelope},System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Data.PsiStoreStreamReader.GetStreamMetadata(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Data.PsiStoreStreamReader.GetSupplementalMetadata``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Data.PsiStoreStreamReader.ContainsStream(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Data.PsiStoreStreamReader.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Data.PsiStoreStreamReader.OpenNew">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Data.PsiStoreStreamReader.ReadAll(Microsoft.Psi.ReplayDescriptor,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Data.PsiStoreStreamReader.Read``1(Microsoft.Psi.Data.IndexEntry,System.Func{``0})">
            <summary>
            Read message data at the given index.
            </summary>
            <typeparam name="T">The type of message data.</typeparam>
            <param name="indexEntry">Index entry describing the location of a particular message.</param>
            <param name="allocator">An optional allocator to use when constructing messages.</param>
            <returns>Message data.</returns>
        </member>
        <member name="M:Microsoft.Psi.Data.PsiStoreStreamReader.LoadMetadata(System.Collections.Generic.IEnumerable{Microsoft.Psi.Metadata},Microsoft.Psi.Common.RuntimeInfo)">
            <summary>
            Initializes the serialization subsystem with the metadata from the store.
            </summary>
            <param name="metadata">The collection of metadata entries from the store catalog.</param>
            <param name="runtimeVersion">The version of the runtime that produced the store.</param>
        </member>
        <member name="T:Microsoft.Psi.Data.StreamReader">
            <summary>
            Represents factory for dynamically creating stream readers.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Data.StreamReader.Create(System.String,System.String,System.Type)">
            <summary>
            Create instance of stream reader (assumes ctor taking name and path.
            </summary>
            <param name="storeName">Store name.</param>
            <param name="storePath">Store path.</param>
            <param name="streamReaderType">Stream reader type.</param>
            <returns>Stream reader instance.</returns>
        </member>
        <member name="M:Microsoft.Psi.Data.StreamReader.Create(System.String,System.String,System.String)">
            <summary>
            Create instance of stream reader (assumes ctor taking name and path.
            </summary>
            <param name="storeName">Store name.</param>
            <param name="storePath">Store path.</param>
            <param name="streamReaderTypeName">Stream reader type name.</param>
            <returns>Stream reader instance.</returns>
        </member>
        <member name="T:Microsoft.Psi.Data.StreamReaderAttribute">
            <summary>
            Represents a stream reader attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Data.StreamReaderAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Data.StreamReaderAttribute"/> class.
            </summary>
            <param name="name">Name of stream reader source (e.g. "Psi Store", "WAV File", ...).</param>
            <param name="extension">File extension of stream reader source (e.g. ".psi", ".wav", ...).</param>
        </member>
        <member name="P:Microsoft.Psi.Data.StreamReaderAttribute.Name">
            <summary>
            Gets the name of stream reader source.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Data.StreamReaderAttribute.Extension">
            <summary>
            Gets the file extension of the stream reader source.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.PsiStore">
            <summary>
            Provides static methods to access multi-stream \psi stores.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.Create(Microsoft.Psi.Pipeline,System.String,System.String,System.Boolean,Microsoft.Psi.Serialization.KnownSerializers)">
            <summary>
            Creates a new multi-stream \psi store and returns an <see cref="T:Microsoft.Psi.Data.Exporter"/> instance
            which can be used to write streams to this store.
            </summary>
            <param name="pipeline">The <see cref="T:Microsoft.Psi.Pipeline"/> that owns the <see cref="T:Microsoft.Psi.Data.Exporter"/>.</param>
            <param name="name">The name of the store to create.</param>
            <param name="rootPath">The path to use. If null, an in-memory store is created.</param>
            <param name="createSubdirectory">Indicates whether to create a numbered subdirectory for each execution of the pipeline.</param>
            <param name="serializers">An optional collection of custom serializers to use instead of the default ones.</param>
            <returns>An <see cref="T:Microsoft.Psi.Data.Exporter"/> instance that can be used to write streams.</returns>
            <remarks>
            The Exporter maintains a collection of serializers it knows about, which it uses to serialize
            the data it writes to the store. By default, the Exporter derives the correct serializers
            from the TMessage type argument passed to <see cref="M:Microsoft.Psi.Data.Exporter.Write(Microsoft.Psi.Emitter{Microsoft.Psi.Message{Microsoft.Psi.Common.BufferReader}},Microsoft.Psi.PsiStreamMetadata,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Message{Microsoft.Psi.Common.BufferReader}})"/>. In other words,
            for the most part simply knowing the stream type is sufficient to determine all the types needed to
            serialize the messages in the stream.
            Use the <see cref="T:Microsoft.Psi.Serialization.KnownSerializers"/> parameter to override the default behavior and provide a custom set of serializers.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.Open(Microsoft.Psi.Pipeline,System.String,System.String,System.Boolean)">
            <summary>
            Opens a \psi store for read and returns a <see cref="T:Microsoft.Psi.Data.PsiImporter"/> instance
            which can be used to inspect the store and open the streams.
            The store metadata is available immediately after this call (before the pipeline is running) via the <see cref="P:Microsoft.Psi.Data.Importer.AvailableStreams"/> property.
            </summary>
            <param name="pipeline">The <see cref="T:Microsoft.Psi.Pipeline"/> that owns the <see cref="T:Microsoft.Psi.Data.PsiImporter"/>.</param>
            <param name="name">The name of the store to open (the same as the catalog file name).</param>
            <param name="rootPath">
            The path to the store.
            This can be one of:
            - a full path to a directory containing the store
            - a root path containing one or more versions of the store, each in its own subdirectory,
            in which case the latest store is opened.
            - a null string, in which case an in-memory store is opened.
            </param>
            <param name="usePerStreamReaders">Optional flag indicating whether to use per-stream readers (see remarks).</param>
            <returns>A <see cref="T:Microsoft.Psi.Data.PsiImporter"/> instance that can be used to open streams and read messages.</returns>
            <remarks>
            The PsiImporter maintains a collection of serializers it knows about, which it uses to deserialize
            the data it reads form the store. By default, the PsiImporter derives the correct serializers
            from the type argument passed to <see cref="M:Microsoft.Psi.Data.Importer.OpenStream``1(System.String,System.Func{``0},System.Action{``0})"/>. In other words,
            for the most part simply knowing the stream type is sufficient to determine all the types needed to
            deserialize the messages in the stream.
            However, there are two cases when this automatic behavior might not work:
            1. When one of the required types changed between the version used to serialize the file and the
            current version, in a way that breaks versioning rules.
            Use the <see cref="M:Microsoft.Psi.Serialization.KnownSerializers.Register``1(System.String,Microsoft.Psi.Serialization.CloningFlags)"/> method
            to remap the name of the old type to a new, compatible type.
            2. When the declared type of a field is different than the actual value assigned to it
            (polymorphic fields) and the value assigned is of a type that implements the DataContract serialization rules.
            In this case, use the <see cref="M:Microsoft.Psi.Serialization.KnownSerializers.Register``1(Microsoft.Psi.Serialization.CloningFlags)"/> method
            to let the serialization system know which compatible concrete type to use for that DataContract name.
            Additionally, the usePerStreamReaders flag causes the importer to create separate readers for each opened stream.
            When a store is written, messages from multiple streams are serialized into store files _as_ they arrive at the
            Exporter. Messages within a stream are guaranteed to be persisted in time-order. However, messages across multiple
            streams are interleaved and there is no guarantee that the interleaving preserves time-ordering. A _single_ stream
            reader emits messages in the originally interleaved order. Using a single stream reader results in a delay of
            messages that may come before other messages in time, but physically after them in the persisted store. This results
            in an apparent emitted latency. Using individual stream readers (usePerStreamReaders=true) allows messages to be
            emitted at a pipeline time approximating the original creation time; regardless of physical interleaved ordering.
            The benefit is a better approximation of the live conditions during replay, while the drawback is a negligible
            performance impact.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.Write``1(Microsoft.Psi.IProducer{``0},System.String,Microsoft.Psi.Data.Exporter,System.Boolean,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Writes the specified stream to a multi-stream \psi store.
            </summary>
            <typeparam name="TMessage">The type of messages in the stream.</typeparam>
            <param name="source">The source stream to write.</param>
            <param name="name">The name of the persisted stream.</param>
            <param name="writer">The store writer, created by e.g. <see cref="M:Microsoft.Psi.PsiStore.Create(Microsoft.Psi.Pipeline,System.String,System.String,System.Boolean,Microsoft.Psi.Serialization.KnownSerializers)"/>.</param>
            <param name="largeMessages">Indicates whether the stream contains large messages (typically >4k). If true, the messages will be written to the large message file.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>The input stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.Write``2(Microsoft.Psi.IProducer{``0},``1,System.String,Microsoft.Psi.Data.Exporter,System.Boolean,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Writes the specified stream to a multi-stream \psi store.
            </summary>
            <typeparam name="TMessage">The type of messages in the stream.</typeparam>
            <typeparam name="TSupplementalMetadata">The type of supplemental stream metadata.</typeparam>
            <param name="source">The source stream to write.</param>
            <param name="supplementalMetadataValue">Supplemental metadata value.</param>
            <param name="name">The name of the persisted stream.</param>
            <param name="writer">The store writer, created by e.g. <see cref="M:Microsoft.Psi.PsiStore.Create(Microsoft.Psi.Pipeline,System.String,System.String,System.Boolean,Microsoft.Psi.Serialization.KnownSerializers)"/>.</param>
            <param name="largeMessages">Indicates whether the stream contains large messages (typically >4k). If true, the messages will be written to the large message file.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>The input stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.SummarizeDistinctKeysInSupplementalMetadata``2(Microsoft.Psi.IProducer{System.Collections.Generic.Dictionary{``0,``1}},Microsoft.Psi.Data.Exporter)">
            <summary>
            Stores supplemental metadata representing distinct dictionary keys seen on the stream.
            </summary>
            <typeparam name="TKey">The type of dictionary key in the stream.</typeparam>
            <typeparam name="TValue">The type of dictionary value in the stream.</typeparam>
            <param name="source">The source stream to write.</param>
            <param name="writer">The store writer, created by e.g. <see cref="M:Microsoft.Psi.PsiStore.Create(Microsoft.Psi.Pipeline,System.String,System.String,System.Boolean,Microsoft.Psi.Serialization.KnownSerializers)"/>.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.WriteEnvelopes``1(Microsoft.Psi.IProducer{``0},System.String,Microsoft.Psi.Data.Exporter,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Writes the envelopes for the specified stream to a multi-stream \psi store.
            </summary>
            <typeparam name="TIn">The type of messages in the stream.</typeparam>
            <param name="source">The source stream for which to write envelopes.</param>
            <param name="name">The name of the persisted stream.</param>
            <param name="writer">The store writer, created by e.g. <see cref="M:Microsoft.Psi.PsiStore.Create(Microsoft.Psi.Pipeline,System.String,System.String,System.Boolean,Microsoft.Psi.Serialization.KnownSerializers)"/>.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>The input stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.Exists(System.String,System.String)">
            <summary>
            Indicates whether the specified \psi store file exists.
            </summary>
            <param name="name">The name of the store to check.</param>
            <param name="path">The path of the store to check.</param>
            <returns>Returns true if the store exists.</returns>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.IsClosed(System.String,System.String)">
            <summary>
            Indicates whether all streams in a \psi store have been marked as "closed".
            </summary>
            <param name="name">The name of the store to check.</param>
            <param name="path">The path of the store to check.</param>
            <returns>Returns true if all streams in the store are marked as closed.</returns>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.Repair(System.String,System.String,System.Boolean)">
            <summary>
            Repairs an invalid \psi store in place.
            </summary>
            <param name="name">The name of the store to check.</param>
            <param name="path">The path of the store to check.</param>
            <param name="deleteOriginalStore">Indicates whether the original store should be deleted.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.Crop(System.ValueTuple{System.String,System.String},System.ValueTuple{System.String,System.String},System.TimeSpan,Microsoft.Psi.RelativeTimeInterval,System.Boolean,System.IProgress{System.Double},System.Action{System.String})">
            <summary>
            Crops a \psi store between the extents of a specified interval, generating a new store.
            </summary>
            <param name="input">The name and path of the store to crop.</param>
            <param name="output">The name and path of the cropped store.</param>
            <param name="start">Start of crop interval relative to beginning of store.</param>
            <param name="length">Length of crop interval.</param>
            <param name="createSubdirectory">
            Indicates whether to create a numbered subdirectory for each cropped store
            generated by multiple calls to this method.
            </param>
            <param name="progress">An optional progress reporter for progress updates.</param>
            <param name="loggingCallback">An optional callback to which human-friendly information will be logged.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.Crop(System.ValueTuple{System.String,System.String},System.ValueTuple{System.String,System.String},Microsoft.Psi.TimeInterval,System.Boolean,System.IProgress{System.Double},System.Action{System.String})">
            <summary>
            Crops a \psi store between the extents of a specified originating time interval, generating a new store.
            </summary>
            <param name="input">The name and path of the store to crop.</param>
            <param name="output">The name and path of the cropped store.</param>
            <param name="cropInterval">The originating time interval to which to crop the store.</param>
            <param name="createSubdirectory">
            Indicates whether to create a numbered subdirectory for each cropped store
            generated by multiple calls to this method.
            </param>
            <param name="progress">An optional progress reporter for progress updates.</param>
            <param name="loggingCallback">An optional callback to which human-friendly information will be logged.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.CropInPlace(System.ValueTuple{System.String,System.String},System.TimeSpan,Microsoft.Psi.RelativeTimeInterval,System.Boolean,System.IProgress{System.Double},System.Action{System.String})">
            <summary>
            Crops a \psi store in place between the extents of a specified interval.
            </summary>
            <param name="input">The name and path of the store to crop.</param>
            <param name="start">Start of crop interval relative to beginning of store.</param>
            <param name="length">Length of crop interval.</param>
            <param name="deleteOriginalStore">Indicates whether the original store should be deleted.</param>
            <param name="progress">An optional progress reporter for progress updates.</param>
            <param name="loggingCallback">An optional callback to which human-friendly information will be logged.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.CropInPlace(System.ValueTuple{System.String,System.String},Microsoft.Psi.TimeInterval,System.Boolean,System.IProgress{System.Double},System.Action{System.String})">
            <summary>
            Crops a \psi store in place between the extents of a specified originating time interval.
            </summary>
            <param name="input">The name and path of the store to crop.</param>
            <param name="cropInterval">The originating time interval to which to crop the store.</param>
            <param name="deleteOriginalStore">Indicates whether the original store should be deleted.</param>
            <param name="progress">An optional progress reporter for progress updates.</param>
            <param name="loggingCallback">An optional callback to which human-friendly information will be logged.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.Copy(System.ValueTuple{System.String,System.String},System.ValueTuple{System.String,System.String},System.Func{Microsoft.Psi.Data.PsiImporter,Microsoft.Psi.TimeInterval},System.Predicate{Microsoft.Psi.IStreamMetadata},System.Boolean,System.IProgress{System.Double},System.Action{System.String})">
            <summary>
            Copies a \psi store, or a subset of it.
            </summary>
            <param name="input">The name and path of the store to crop.</param>
            <param name="output">The name and path of the cropped store.</param>
            <param name="cropIntervalFunction">An optional function that defines an originating time interval to copy. By default, the extents of the entire store.</param>
            <param name="includeStreamPredicate">An optional predicate that specifies which streams to include. By default, include all streams. By default, all streams are copied.</param>
            <param name="createSubdirectory">
            Indicates whether to create a numbered subdirectory for each cropped store
            generated by multiple calls to this method.
            </param>
            <param name="progress">An optional progress reporter for progress updates.</param>
            <param name="loggingCallback">An optional callback to which human-friendly information will be logged.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.Concatenate(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}},System.ValueTuple{System.String,System.String},System.Boolean,System.IProgress{System.Double},System.Action{System.String})">
            <summary>
            Concatenates a set of \psi stores, generating a new store.
            </summary>
            <remarks>Streams of the same name across stores must also have the same types as well as non-intersecting originating times.</remarks>
            <param name="storeFiles">Set of store files (name, path pairs) to concatenate.</param>
            <param name="output">Output store (name, path pair).</param>
            <param name="createSubdirectory">
            Indicates whether to create a numbered subdirectory for each concatenated store
            generated by multiple calls to this method.
            </param>
            <param name="progress">An optional progress reporter for progress updates.</param>
            <param name="loggingCallback">An optional callback to which human-friendly information will be logged.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.Process(System.Func{Microsoft.Psi.IStreamMetadata,System.Boolean},System.Action{Microsoft.Psi.IStreamMetadata,Microsoft.Psi.Data.PsiImporter,Microsoft.Psi.Data.Exporter},System.ValueTuple{System.String,System.String},System.ValueTuple{System.String,System.String},System.Boolean,System.IProgress{System.Double},System.Action{System.String})">
            <summary>
            Processes a \psi store, generating a new store.
            </summary>
            <param name="predicate">Predicate function determining whether to process a stream or else should be merely copied.</param>
            <param name="processor">Processor action given stream metadata, importer and exporter.</param>
            <param name="input">The name and path of the store to process.</param>
            <param name="output">The name and path of the processed store.</param>
            <param name="createSubdirectory">Indicates whether to create a numbered subdirectory for each store generated by multiple calls to this method.</param>
            <param name="progress">An optional progress reporter for progress updates.</param>
            <param name="loggingCallback">An optional callback to which human-friendly information will be logged.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.TryGetStreamMetadata``1(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IStreamMetadata@)">
            <summary>
            Returns the metadata associated with the specified stream, if the stream is persisted to a \psi store.
            </summary>
            <typeparam name="T">The type of stream messages.</typeparam>
            <param name="source">The stream to retrieve metadata about.</param>
            <param name="metadata">Upon return, this parameter contains the metadata associated with the stream, or null if the stream is not persisted.</param>
            <returns>True if the stream is persisted to a store, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.TryGetStreamMetadata(Microsoft.Psi.Pipeline,System.String,Microsoft.Psi.IStreamMetadata@)">
            <summary>
            Returns the metadata associated with the specified stream, if the stream is persisted to a \psi store.
            </summary>
            <param name="pipeline">The current pipeline.</param>
            <param name="streamName">The name of the stream to retrieve metadata about.</param>
            <param name="metadata">Upon return, this parameter contains the metadata associated with the stream, or null if the stream is not persisted.</param>
            <returns>True if the stream is persisted to a store, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.GetPathToLatestVersion(System.String,System.String)">
            <summary>
            Get path to latest version of store.
            </summary>
            <param name="storeName">The name of the store.</param>
            <param name="rootPath">The root path of the store.</param>
            <returns>Path to latest version of store.</returns>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.Delete(System.ValueTuple{System.String,System.String},System.Boolean)">
            <summary>
            Delete a \psi store.
            </summary>
            <param name="store">The name and path of the store to delete.</param>
            <param name="deleteDirectoryIfOtherwiseEmpty">Whether to delete the containing directory if it is empty after removing store files.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.Edit(System.ValueTuple{System.String,System.String},System.ValueTuple{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Boolean,System.Object,System.DateTime}}},System.Predicate{Microsoft.Psi.IStreamMetadata},System.Boolean,System.IProgress{System.Double},System.Action{System.String})">
            <summary>
            Edit a \psi store, or a subset of it.
            </summary>
            <param name="input">The name and path of the store to crop.</param>
            <param name="output">The name and path of the cropped store.</param>
            <param name="streamEdits">Dictionary of per-stream sequence of edits to be applied. Whether to update/insert or delete, an optional message to upsert and originating times.</param>
            <param name="includeStreamPredicate">An optional predicate that specifies which streams to include. By default, include all streams. By default, all streams are copied.</param>
            <param name="createSubdirectory">Indicates whether to create a numbered subdirectory for each cropped store generated by multiple calls to this method.</param>
            <param name="progress">An optional progress reporter for progress updates.</param>
            <param name="loggingCallback">An optional callback to which human-friendly information will be logged.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.AddStream``2(System.ValueTuple{System.String,System.String},System.ValueTuple{System.String,System.String},System.String,``1,System.Boolean,System.IProgress{System.Double},System.Action{System.String})">
            <summary>
            Adds a new, empty stream to a store.
            </summary>
            <typeparam name="T">The type of messages in the added stream.</typeparam>
            <typeparam name="TSupplementalMetadata">The type of supplemental metadata for the stream.</typeparam>
            <param name="input">The name and path of the store to update.</param>
            <param name="output">The name and path of the updated store.</param>
            <param name="streamName">The name of the stream to add to the store.</param>
            <param name="supplementalMetadata">The supplemental metadata to add to the stream.</param>
            <param name="createSubdirectory">Indicates whether to create a numbered subdirectory for each cropped store generated by multiple calls to this method.</param>
            <param name="progress">An optional progress reporter for progress updates.</param>
            <param name="loggingCallback">An optional callback to which human-friendly information will be logged.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.EditInPlace(System.ValueTuple{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Boolean,System.Object,System.DateTime}}},System.Predicate{Microsoft.Psi.IStreamMetadata},System.Boolean,System.IProgress{System.Double},System.Action{System.String})">
            <summary>
            Edit a \psi store in place, or a subset of it.
            </summary>
            <param name="input">The name and path of the store to crop.</param>
            <param name="streamEdits">Dictionary of per-stream sequence of edits to be applied. Whether to update/insert or delete, an optional message to upsert and originating times.</param>
            <param name="includeStreamPredicate">An optional predicate that specifies which streams to include. By default, include all streams. By default, all streams are copied.</param>
            <param name="deleteOriginalStore">Indicates whether the original store should be deleted.</param>
            <param name="progress">An optional progress reporter for progress updates.</param>
            <param name="loggingCallback">An optional callback to which human-friendly information will be logged.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.AddStreamInPlace``2(System.ValueTuple{System.String,System.String},System.String,``1,System.Boolean,System.IProgress{System.Double},System.Action{System.String})">
            <summary>
            Adds a new stream to an existing store.
            </summary>
            <typeparam name="T">The type of messages in the new stream.</typeparam>
            <typeparam name="TSupplementalMetadata">The type of the supplemental metadata for the new stream.</typeparam>
            <param name="input">The name and path of the store to add the stream to.</param>
            <param name="streamName">The name of the stream to add to the store.</param>
            <param name="supplementalMetadata">The supplemental metadata for the new stream.</param>
            <param name="deleteOriginalStore">Indicates whether the original store should be deleted.</param>
            <param name="progress">An optional progress reporter for progress updates.</param>
            <param name="loggingCallback">An optional callback to which human-friendly information will be logged.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.CreateWithStream``2(System.String,System.String,System.String,``1,System.IProgress{System.Double})">
            <summary>
            Create a new psi store with a single, empty stream.
            </summary>
            <typeparam name="T">The type of messages in the new stream.</typeparam>
            <typeparam name="TSupplementalMetadata">The type of the supplemental metadata for the new stream.</typeparam>
            <param name="storeName">The name of the store to create.</param>
            <param name="storePath">The path to the store to create.</param>
            <param name="streamName">The name of the stream to create in the store.</param>
            <param name="supplementalMetadata">The supplemental metadata for the stream.</param>
            <param name="progress">An optional progress reporter for progress updates.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.EditStream``1(Microsoft.Psi.Data.PsiImporter,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Boolean,``0,System.DateTime}},Microsoft.Psi.Data.Exporter)">
            <summary>
            Edit messages in the specified stream and write to an exporter; applying updates/inserts and deletes.
            </summary>
            <param name="importer">PsiImporter from which to get stream being edited.</param>
            <param name="streamName">The name of the stream to edit.</param>
            <param name="edits">A sequence of edits to be applied. Whether to update/insert or delete, an optional message to upsert and originating times.</param>
            <param name="writer">The store into which to output.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.EditStreamWithDynamicUpserts``1(Microsoft.Psi.Data.PsiImporter,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Boolean,System.Object,System.DateTime}},Microsoft.Psi.Data.Exporter)">
            <summary>
            Edit messages in the specified stream and write to an exporter; applying updates/inserts and deletes.
            </summary>
            <param name="importer">PsiImporter from which to get stream being edited.</param>
            <param name="streamName">The name of the stream to edit.</param>
            <param name="edits">A sequence of edits to be applied. Whether to update/insert or delete, an optional message to upsert and originating times.</param>
            <param name="writer">The store into which to output.</param>
        </member>
        <member name="M:Microsoft.Psi.PsiStore.PerformStoreOperationInPlace(System.ValueTuple{System.String,System.String},System.String,System.Action{System.String,System.String,System.String},System.Boolean)">
            <summary>
            Perform \psi store operation in place.
            </summary>
            <param name="input">The name and path of the store on which to perform operation.</param>
            <param name="operationName">Name of operation to perform.</param>
            <param name="operationAction">Operation function to perform.</param>
            <param name="deleteOriginalStore">Indicates whether the original store should be deleted.</param>
        </member>
        <member name="T:Microsoft.Psi.Diagnostics.DiagnosticsCollector">
            <summary>
            Class that collects diagnostics information from a running pipeline; including graph structure changes and message flow statistics.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.DiagnosticsCollector.CurrentRoot">
            <summary>
            Gets current root graph (if any).
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.PipelineCreate(Microsoft.Psi.Pipeline)">
            <summary>
            Pipeline creation.
            </summary>
            <remarks>Called upon pipeline construction.</remarks>
            <param name="pipeline">Pipeline being created.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.PipelineStart(Microsoft.Psi.Pipeline)">
            <summary>
            Pipeline start.
            </summary>
            <remarks>Called upon pipeline run, before child components started.</remarks>
            <param name="pipeline">Pipeline being started.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.PipelineStopped(Microsoft.Psi.Pipeline)">
            <summary>
            Pipeline stopped.
            </summary>
            <remarks>Called after child components finalized, before scheduler stopped.</remarks>
            <param name="pipeline">Pipeline being stopped.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.PipelineDisposed(Microsoft.Psi.Pipeline)">
            <summary>
            Pipeline disposal.
            </summary>
            <remarks>Called after pipeline disposal.</remarks>
            <param name="pipeline">Pipeline being disposed.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.PipelineElementCreate(Microsoft.Psi.Pipeline,Microsoft.Psi.Executive.PipelineElement,System.Object)">
            <summary>
            Element (representing component) created.
            </summary>
            <remarks>Called upon element construction (first moment component becomes a pipeline element).</remarks>
            <param name="pipeline">Pipeline to which the element belongs.</param>
            <param name="element">Element being created.</param>
            <param name="component">Component associated with this pipeline element.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.PipelineElementStart(Microsoft.Psi.Pipeline,Microsoft.Psi.Executive.PipelineElement)">
            <summary>
            Element (representing component) being started.
            </summary>
            <remarks>Called after scheduling calls to start handler.</remarks>
            <param name="pipeline">Pipeline to which the element belongs.</param>
            <param name="element">Element being started.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.PipelineElementStop(Microsoft.Psi.Pipeline,Microsoft.Psi.Executive.PipelineElement)">
            <summary>
            Element (representing component) being stopped.
            </summary>
            <remarks>Called after scheduling calls to stop handler.</remarks>
            <param name="pipeline">Pipeline to which the element belongs.</param>
            <param name="element">Element being stopped.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.PipelineElementFinal(Microsoft.Psi.Pipeline,Microsoft.Psi.Executive.PipelineElement)">
            <summary>
            Element (representing component) being finalized.
            </summary>
            <remarks>Called after scheduling calls to final handler.</remarks>
            <param name="pipeline">Pipeline to which the element belongs.</param>
            <param name="element">Element being finalized.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.PipelineElementDisposed(Microsoft.Psi.Pipeline,Microsoft.Psi.Executive.PipelineElement)">
            <summary>
            Element (representing component) created.
            </summary>
            <remarks>Called upon element disposal.</remarks>
            <param name="pipeline">Pipeline to which the element belongs.</param>
            <param name="element">Element being created.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.PipelineElementAddEmitter(Microsoft.Psi.Pipeline,Microsoft.Psi.Executive.PipelineElement,Microsoft.Psi.IEmitter)">
            <summary>
            Output (emitter) added to element.
            </summary>
            <remarks>Called just after element start (or dynamically if added once pipeline running).</remarks>
            <param name="pipeline">Pipeline to which the element belongs.</param>
            <param name="element">Element to which emitter is being added.</param>
            <param name="emitter">Emitter being added.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.EmitterRenamed(Microsoft.Psi.IEmitter)">
            <summary>
            Emitter had been renamed.
            </summary>
            <remarks>Called when IEmitter.Name property set post-construction.</remarks>
            <param name="emitter">Emitter being renamed.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.PipelineElementAddReceiver(Microsoft.Psi.Pipeline,Microsoft.Psi.Executive.PipelineElement,Microsoft.Psi.IReceiver)">
            <summary>
            Input (receiver) added to element.
            </summary>
            <remarks>Called just after element start (or dynamically if added once pipeline running).</remarks>
            <param name="pipeline">Pipeline to which the element belongs.</param>
            <param name="element">Element to which receiver is being added.</param>
            <param name="receiver">Receiver being added.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.PipelineElementReceiverSubscribe(Microsoft.Psi.Pipeline,Microsoft.Psi.Executive.PipelineElement,Microsoft.Psi.IReceiver,Microsoft.Psi.IEmitter,System.String)">
            <summary>
            Input subscribed to input.
            </summary>
            <remarks>Called just after element start (or dynamically if subscribed once pipeline running).</remarks>
            <param name="pipeline">Pipeline to which the element belongs.</param>
            <param name="element">Element to which receiver belongs.</param>
            <param name="receiver">Receiver subscribing to emitter.</param>
            <param name="emitter">Emitter to which receiver is subscribing.</param>
            <param name="deliveryPolicyName">The name of the delivery policy used.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.PipelineElementReceiverUnsubscribe(Microsoft.Psi.Pipeline,Microsoft.Psi.Executive.PipelineElement,Microsoft.Psi.IReceiver,Microsoft.Psi.IEmitter)">
            <summary>
            Input unsubscribed to input.
            </summary>
            <remarks>Called upon unsubscribe (only if pipeline running).</remarks>
            <param name="pipeline">Pipeline to which the element belongs.</param>
            <param name="element">Element to which receiver belongs.</param>
            <param name="receiver">Receiver unsubscribing to emitter.</param>
            <param name="emitter">Emitter from which receiver is unsubscribing.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.GetReceiverDiagnosticsCollector(Microsoft.Psi.Pipeline,Microsoft.Psi.Executive.PipelineElement,Microsoft.Psi.IReceiver)">
            <summary>
            Get collector of diagnostics message flow statistics for a single receiver.
            </summary>
            <param name="pipeline">Pipeline to which the element belongs.</param>
            <param name="element">Element to which receiver belongs.</param>
            <param name="receiver">Receiver having completed processing.</param>
        </member>
        <member name="T:Microsoft.Psi.Diagnostics.DiagnosticsCollector.ReceiverCollector">
            <summary>
            Class that collects diagnostics message flow statistics for a single receiver.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.ReceiverCollector.#ctor(Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics,System.Int32,Microsoft.Psi.Diagnostics.DiagnosticsConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Diagnostics.DiagnosticsCollector.ReceiverCollector"/> class.
            </summary>
            <param name="pipelineElementDiagnostics">Pipeline element diagnostics instance associated with this receiver.</param>
            <param name="receiverId">The id for the receiver to collect diagnostics about.</param>
            <param name="diagnosticsConfig">Diagnostics configuration.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.ReceiverCollector.UpdateDiagnosticState(System.String)">
            <summary>
            Update of the pipeline element diagnostic state.
            </summary>
            <param name="diagnosticState">The new diagnostic state.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.ReceiverCollector.MessageEmitted(Microsoft.Psi.Envelope,System.DateTime)">
            <summary>
            Message was emitted towards a receiver.
            </summary>
            <param name="envelope">Message envelope.</param>
            <param name="diagnosticsTime">Time at which to record the diagnostic information.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.ReceiverCollector.QueueSizeUpdate(System.Int32,System.DateTime)">
            <summary>
            Capture a queue size update.
            </summary>
            <param name="queueSize">Awaiting delivery queue size.</param>
            <param name="diagnosticsTime">Time at which to record the diagnostic information.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.ReceiverCollector.MessageDropped(System.DateTime)">
            <summary>
            Message was dropped by receiver.
            </summary>
            <param name="diagnosticsTime">Time at which to record the diagnostic information.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.ReceiverCollector.PipelineElementReceiverThrottle(System.Boolean)">
            <summary>
            Capture throttle status update.
            </summary>
            <param name="receiverIsThrottled">Whether input is throttled.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsCollector.ReceiverCollector.MessageProcessed(Microsoft.Psi.Envelope,System.DateTime,System.DateTime,System.Int32,System.DateTime)">
            <summary>
            Message was processed by component.
            </summary>
            <param name="envelope">Message envelope.</param>
            <param name="receiverStartTime">The time the runtime started executing the receiver for the message.</param>
            <param name="receiverEndTime">The time the runtime finished executing the receiver for the message.</param>
            <param name="messageSize">Message size (bytes).</param>
            <param name="diagnosticsTime">Time at which to record the diagnostic information.</param>
        </member>
        <member name="T:Microsoft.Psi.Diagnostics.DiagnosticsConfiguration">
            <summary>
            Class that represents diagnostics collector configuration information.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Diagnostics.DiagnosticsConfiguration.Default">
            <summary>
            Default configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Diagnostics.DiagnosticsConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.DiagnosticsConfiguration.SamplingInterval">
            <summary>
            Gets or sets sampling interval.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.DiagnosticsConfiguration.TrackMessageSize">
            <summary>
            Gets or sets a value indicating whether to track message sizes (notable performance penalty).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.DiagnosticsConfiguration.AveragingTimeSpan">
            <summary>
            Gets or sets the time span over which to average latencies, processing time, message sizes, ...
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.DiagnosticsConfiguration.IncludeStoppedPipelines">
            <summary>
            Gets or sets a value indicating whether to include stopped pipelines.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.DiagnosticsConfiguration.IncludeStoppedPipelineElements">
            <summary>
            Gets or sets a value indicating whether to include stopped pipeline elements.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions">
            <summary>
            Represents diagnostic information about a pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetAllPipelineDiagnostics(Microsoft.Psi.Diagnostics.PipelineDiagnostics)">
            <summary>
            Gets all pipeline diagnostics (including descendant subpipelines).
            </summary>
            <param name="pipeline">Root pipeline diagnostics.</param>
            <returns>All pipeline diagnostics.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetAllPipelineElements(System.Collections.Generic.IEnumerable{Microsoft.Psi.Diagnostics.PipelineDiagnostics})">
            <summary>
            Gets all pipeline element diagnostics within a collection of pipeline diagnostics.
            </summary>
            <param name="pipelines">Collection of pipeline diagnostics.</param>
            <returns>All pipeline element diagnostics within.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetAllPipelineElementDiagnostics(Microsoft.Psi.Diagnostics.PipelineDiagnostics)">
            <summary>
            Gets all pipeline element diagnostics within a pipeline diagnostics (and all descendant subpipelines).
            </summary>
            <param name="pipeline">Root pipeline diagnostics.</param>
            <returns>Collection of all pipeline element diagnostics within.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetAllEmitterDiagnostics(System.Collections.Generic.IEnumerable{Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics})">
            <summary>
            Gets all emitter diagnostics within a collection of pipeline element diagnostics.
            </summary>
            <param name="pipelineElements">Collection of pipeline element diagnostics.</param>
            <returns>Collection of all emitter diagnostics within.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetAllEmitterDiagnostics(System.Collections.Generic.IEnumerable{Microsoft.Psi.Diagnostics.PipelineDiagnostics})">
            <summary>
            Gets all emitter diagnostics within a collection of pipeline diagnostics.
            </summary>
            <param name="pipelines">Collection of pipeline diagnostics.</param>
            <returns>Collection of all emitter diagnostics within.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetAllEmitterDiagnostics(Microsoft.Psi.Diagnostics.PipelineDiagnostics)">
            <summary>
            Gets all emitter diagnostics within a pipeline diagnostics (and all descendant subpipelines).
            </summary>
            <param name="pipeline">Root pipeline diagnostics.</param>
            <returns>Collection of all emitter diagnostics within.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetAllReceiverDiagnostics(System.Collections.Generic.IEnumerable{Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics})">
            <summary>
            Collection of all receiver diagnostics within a collection of pipeline element diagnostics.
            </summary>
            <param name="pipelineElements">Collection of pipeline element diagnostics.</param>
            <returns>Collection of all receiver diagnostics within.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetAllReceiverDiagnostics(System.Collections.Generic.IEnumerable{Microsoft.Psi.Diagnostics.PipelineDiagnostics})">
            <summary>
            Collection of all receiver diagnostics within a collection of pipeline diagnostics.
            </summary>
            <param name="pipelines">Collection of pipeline diagnostics.</param>
            <returns>Collection of all receiver diagnostics within.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetAllReceiverDiagnostics(Microsoft.Psi.Diagnostics.PipelineDiagnostics)">
            <summary>
            Gets all receiver diagnostics within a pipeline diagnostics (and all descendant subpipelines).
            </summary>
            <param name="pipeline">Root pipeline diagnostics.</param>
            <returns>Collection of all receiver diagnostics within.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetPipelineCount(Microsoft.Psi.Diagnostics.PipelineDiagnostics,System.Func{Microsoft.Psi.Diagnostics.PipelineDiagnostics,System.Boolean})">
            <summary>
            Gets count of pipelines.
            </summary>
            <param name="pipeline">Root pipeline diagnostics.</param>
            <param name="predicate">Predicate expression filtering pipeline diagnostics.</param>
            <returns>Pipeline count.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetPipelineElementCount(Microsoft.Psi.Diagnostics.PipelineDiagnostics,System.Func{Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics,System.Boolean})">
            <summary>
            Gets count of pipeline elements.
            </summary>
            <param name="pipeline">Root pipeline diagnostics.</param>
            <param name="predicate">Predicate expression filtering pipeline element diagnostics.</param>
            <returns>Pipeline element count.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetEmitterCount(Microsoft.Psi.Diagnostics.PipelineDiagnostics,System.Func{Microsoft.Psi.Diagnostics.PipelineDiagnostics.EmitterDiagnostics,System.Boolean})">
            <summary>
            Gets emitter count within pipeline and descendant.
            </summary>
            <param name="pipeline">Root pipeline diagnostics.</param>
            <param name="predicate">Predicate expression filtering emitter diagnostics.</param>
            <returns>Emitter count.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetReceiverCount(Microsoft.Psi.Diagnostics.PipelineDiagnostics,System.Func{Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics,System.Boolean})">
            <summary>
            Gets receiver count within pipeline and descendant.
            </summary>
            <param name="pipeline">Root pipeline diagnostics.</param>
            <param name="predicate">Predicate expression filtering receiver diagnostics.</param>
            <returns>Receiver count.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetAverageQueuedMessageCount(Microsoft.Psi.Diagnostics.PipelineDiagnostics,System.Func{Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics,System.Boolean})">
            <summary>
            Gets throttled receiver count within pipeline and descendant.
            </summary>
            <param name="pipeline">Root pipeline diagnostics.</param>
            <param name="predicate">Predicate expression filtering receiver diagnostics.</param>
            <returns>Average queued message count.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetDroppedMessageCount(Microsoft.Psi.Diagnostics.PipelineDiagnostics,System.Func{Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics,System.Boolean})">
            <summary>
            Gets dropped message count across receivers within pipeline and descendant.
            </summary>
            <param name="pipeline">Root pipeline diagnostics.</param>
            <param name="predicate">Predicate expression filtering receiver diagnostics.</param>
            <returns>Dropped message count.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetDroppedMessageAveragePerTimeSpan(Microsoft.Psi.Diagnostics.PipelineDiagnostics,System.Func{Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics,System.Boolean})">
            <summary>
            Gets dropped message count in last averaging time span across receivers within pipeline and descendant.
            </summary>
            <param name="pipeline">Root pipeline diagnostics.</param>
            <param name="predicate">Predicate expression filtering receiver diagnostics.</param>
            <returns>Dropped message count.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetProcessedMessageCount(Microsoft.Psi.Diagnostics.PipelineDiagnostics,System.Func{Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics,System.Boolean})">
            <summary>
            Gets processed message count across receivers within pipeline and descendant.
            </summary>
            <param name="pipeline">Root pipeline diagnostics.</param>
            <param name="predicate">Predicate expression filtering receiver diagnostics.</param>
            <returns>Processed message count.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetProcessedMessageAveragePerTimeSpan(Microsoft.Psi.Diagnostics.PipelineDiagnostics,System.Func{Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics,System.Boolean})">
            <summary>
            Gets processed message count in last averaging time span across receivers within pipeline and descendant.
            </summary>
            <param name="pipeline">Root pipeline diagnostics.</param>
            <param name="predicate">Predicate expression filtering receiver diagnostics.</param>
            <returns>Processed message count.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.GetThrottledReceiverCount(Microsoft.Psi.Diagnostics.PipelineDiagnostics,System.Func{Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics,System.Boolean})">
            <summary>
            Gets throttled receiver count across receivers within pipeline and descendant.
            </summary>
            <param name="pipeline">Root pipeline diagnostics.</param>
            <param name="predicate">Predicate expression filtering receiver diagnostics.</param>
            <returns>Throttled receiver count.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.AverageTime(System.Collections.Generic.IEnumerable{System.ValueTuple{System.TimeSpan,System.DateTime}})">
            <summary>
            Compute average time from a sequence of time spans (e.g. ProcessingTimeHistory).
            </summary>
            <param name="times">Sequence of time spans.</param>
            <returns>Average time (zero if empty).</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsQueryExtensions.AverageSize(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.DateTime}})">
            <summary>
            Compute average size from a sequence of sizes (e.g. QueueSize).
            </summary>
            <param name="sizes">Sequence of sizes.</param>
            <returns>Average size (zero if empty).</returns>
        </member>
        <member name="T:Microsoft.Psi.Diagnostics.DiagnosticsSampler">
            <summary>
            Component that periodically samples and produces a stream of collected diagnostics information from a running pipeline; including graph structure and message flow statistics.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsSampler.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.Diagnostics.DiagnosticsCollector,Microsoft.Psi.Diagnostics.DiagnosticsConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Diagnostics.DiagnosticsSampler"/> class.
            </summary>
            <param name="pipeline">Pipeline to which this component belongs.</param>
            <param name="collector">Diagnostics collector.</param>
            <param name="config">Diagnostics configuration.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsSampler.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Microsoft.Psi.Diagnostics.DiagnosticsSampler"/> class.
            Releases underlying unmanaged timer.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.DiagnosticsSampler.Diagnostics">
            <summary>
            Gets emitter producing pipeline diagnostics information.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.DiagnosticsSampler.Config">
            <summary>
            Gets the diagnostics configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsSampler.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsSampler.Start(System.Action{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.DiagnosticsSampler.Stop(System.DateTime,System.Action)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Psi.Diagnostics.PipelineDiagnostics">
            <summary>
            Represents diagnostic information about a pipeline.
            </summary>
            <remarks>
            This is a summarized snapshot of the graph with aggregated message statistics which is posted to the
            diagnostics stream. It has a much smaller memory footprint compared with PipelineDiagnosticsInternal.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnostics.#ctor(Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Diagnostics.PipelineDiagnostics"/> class.
            </summary>
            <param name="pipelineDiagnosticsInternal">Internal pipeline diagnostics.</param>
            <param name="includeStoppedPipelines">Whether to include stopped pipelines.</param>
            <param name="includeStoppedPipelineElements">Whether to include stopped pipeline elements.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnostics.#ctor(Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal,Microsoft.Psi.Diagnostics.PipelineDiagnostics,Microsoft.Psi.Diagnostics.PipelineDiagnostics.Builder,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Diagnostics.PipelineDiagnostics"/> class.
            </summary>
            <param name="pipelineDiagnosticsInternal">Internal pipeline diagnostics.</param>
            <param name="parent">Parent pipeline diagnostics to this pipeline diagnostics.</param>
            <param name="builder">Builder of pipeline parts used during construction.</param>
            <param name="includeStoppedPipelines">Whether to include stopped pipelines.</param>
            <param name="includeStoppedPipelineElements">Whether to include stopped pipeline elements.</param>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.Id">
            <summary>
            Gets pipeline ID.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.Name">
            <summary>
            Gets pipeline name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.IsPipelineRunning">
            <summary>
            Gets a value indicating whether the pipeline is running (after started, before stopped).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElements">
            <summary>
            Gets elements in this pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ParentPipelineDiagnostics">
            <summary>
            Gets parent pipeline of this pipeline (it any).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.SubpipelineDiagnostics">
            <summary>
            Gets subpipelines of this pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.AncestorPipelines">
            <summary>
            Gets ancestor pipeline diagnostics.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.DescendantPipelines">
            <summary>
            Gets descendant pipeline diagnostics.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnostics.Initialize(Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal,Microsoft.Psi.Diagnostics.PipelineDiagnostics,Microsoft.Psi.Diagnostics.PipelineDiagnostics.Builder,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Diagnostics.PipelineDiagnostics"/> class.
            </summary>
            <param name="pipelineDiagnosticsInternal">Internal pipeline diagnostics.</param>
            <param name="parent">Parent pipeline diagnostics to this pipeline diagnostics.</param>
            <param name="builder">Builder of pipeline parts used during construction.</param>
            <param name="includeStoppedPipelines">Whether to include stopped pipelines.</param>
            <param name="includeStoppedPipelineElements">Whether to include stopped pipeline element .</param>
        </member>
        <member name="T:Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics">
            <summary>
            Represents diagnostic information about a pipeline element.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics.#ctor(Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics,Microsoft.Psi.Diagnostics.PipelineDiagnostics.Builder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics"/> class.
            </summary>
            <param name="pipelineElementDiagnosticsInternal">Internal pipeline element diagnostics.</param>
            <param name="builder">Builder of pipeline parts used during construction.</param>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics.Id">
            <summary>
            Gets pipeline element ID.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics.Name">
            <summary>
            Gets pipeline element name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics.TypeName">
            <summary>
            Gets pipeline element component type name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics.Kind">
            <summary>
            Gets pipeline element kind.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics.IsRunning">
            <summary>
            Gets a value indicating whether the pipeline element is running (after started, before stopped).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics.Finalized">
            <summary>
            Gets a value indicating whether the pipeline element is finalized.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics.DiagnosticState">
            <summary>
            Gets the diagnostic state for the pipeline element.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics.Emitters">
            <summary>
            Gets pipeline element emitters.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics.Receivers">
            <summary>
            Gets pipeline element receivers.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics.PipelineId">
            <summary>
            Gets ID of pipeline to which this element belongs.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics.RepresentsSubpipeline">
            <summary>
            Gets pipeline which this element represents (e.g. Subpipeline).
            </summary>
            <remarks>This is used when a pipeline element is a pipeline (e.g. Subpipeline).</remarks>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.PipelineElementDiagnostics.ConnectorBridgeToPipelineElement">
            <summary>
            Gets bridge to pipeline element in another pipeline (e.g. Connectors).
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Diagnostics.PipelineDiagnostics.EmitterDiagnostics">
            <summary>
            Represents diagnostic information about a pipeline element emitter.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnostics.EmitterDiagnostics.#ctor(Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.EmitterDiagnostics,Microsoft.Psi.Diagnostics.PipelineDiagnostics.Builder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Diagnostics.PipelineDiagnostics.EmitterDiagnostics"/> class.
            </summary>
            <param name="emitterDiagnostics">Internal emitter diagnostics.</param>
            <param name="builder">Builder of pipeline parts used during construction.</param>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.EmitterDiagnostics.Id">
            <summary>
            Gets emitter ID.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.EmitterDiagnostics.Name">
            <summary>
            Gets emitter name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.EmitterDiagnostics.Type">
            <summary>
            Gets emitter type.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.EmitterDiagnostics.PipelineElement">
            <summary>
            Gets pipeline element to which emitter belongs.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.EmitterDiagnostics.Targets">
            <summary>
            Gets emitter target receivers.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics">
            <summary>
            Represents diagnostic information about a pipeline element receiver.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.#ctor(Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics,Microsoft.Psi.Diagnostics.PipelineDiagnostics.Builder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics"/> class.
            </summary>
            <param name="receiverDiagnostics">Internal receiver diagnostics.</param>
            <param name="builder">Builder of pipeline parts used during construction.</param>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.Id">
            <summary>
            Gets receiver ID.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.ReceiverName">
            <summary>
            Gets receiver name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.DeliveryPolicyName">
            <summary>
            Gets name of delivery policy used by receiver.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.TypeName">
            <summary>
            Gets receiver type.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.ReceiverIsThrottled">
            <summary>
            Gets a value indicating whether receiver is throttled.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.LastDeliveryQueueSize">
            <summary>
            Gets delivery queue size at last message.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.AvgDeliveryQueueSize">
            <summary>
            Gets average delivery queue size.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.TotalMessageEmittedCount">
            <summary>
            Gets total count of emitted messages.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.WindowMessageEmittedCount">
            <summary>
            Gets count of emitted messages in last averaging time window.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.TotalMessageProcessedCount">
            <summary>
            Gets total count of processed messages.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.WindowMessageProcessedCount">
            <summary>
            Gets count of processed messages in last averaging time window.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.TotalMessageDroppedCount">
            <summary>
            Gets total count of dropped messages.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.WindowMessageDroppedCount">
            <summary>
            Gets count of dropped messages in last averaging time window.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.LastMessageCreatedLatency">
            <summary>
            Gets latency with which the last message was created.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.AvgMessageCreatedLatency">
            <summary>
            Gets average message created latency in last averaging time window.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.LastMessageEmittedLatency">
            <summary>
            Gets latency with which the last message was emitted.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.AvgMessageEmittedLatency">
            <summary>
            Gets average message emitted latency in last averaging time window.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.LastMessageReceivedLatency">
            <summary>
            Gets latency with which the last message was received.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.AvgMessageReceivedLatency">
            <summary>
            Gets average message received latency in last averaging time window.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.LastMessageProcessTime">
            <summary>
            Gets receiver processing time for the last message.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.AvgMessageProcessTime">
            <summary>
            Gets average receiver processing time in last averaging time window.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.LastMessageSize">
            <summary>
            Gets message size for the last message.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.AvgMessageSize">
            <summary>
            Gets average message size over in last averaging time window.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.PipelineElement">
            <summary>
            Gets pipeline element to which emitter belongs.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnostics.ReceiverDiagnostics.Source">
            <summary>
            Gets receiver's source emitter.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Diagnostics.PipelineDiagnostics.Builder">
            <summary>
            Builder of graph elements used during construction.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnostics.Builder.EnqueueThunk(System.Action)">
            <summary>
            Enqueue thunk to be executed once all pipelines, elements, emitters and receivers are created.
            </summary>
            <param name="thunk">Thunk to be executed.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnostics.Builder.InvokeThunks">
            <summary>
            Execute enqueued thunks.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnostics.Builder.GetOrCreatePipelineDiagnostics(Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal,Microsoft.Psi.Diagnostics.PipelineDiagnostics,System.Boolean,System.Boolean)">
            <summary>
            Get or create external pipeline diagnostics representation.
            </summary>
            <param name="pipelineDiagnosticsInternal">Internal pipeline diagnostics representation.</param>
            <param name="parentPipelineDiagnostics">Parent pipeline diagnostics.</param>
            <param name="includeStoppedPipelines">Whether to include stopped pipelines.</param>
            <param name="includeStoppedPipelineElements">Whether to include stopped pipeline element .</param>
            <returns>External pipeline diagnostics representation.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnostics.Builder.GetOrCreatePipelineElementDiagnostics(Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics)">
            <summary>
            Get or create external pipeline element diagnostics representation.
            </summary>
            <param name="pipelineElementDiagnosticsInternal">Internal pipeline element diagnostics representation.</param>
            <returns>External pipeline element diagnostics representation.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnostics.Builder.GetOrCreateEmitterDiagnostics(Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.EmitterDiagnostics)">
            <summary>
            Get or create external emitter diagnostics representation.
            </summary>
            <param name="emitterDiagnosticsInternal">Internal pipeline element diagnostics representation.</param>
            <returns>External pipeline element diagnostics representation.</returns>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnostics.Builder.GetOrCreateReceiverDiagnostics(Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics)">
            <summary>
            Get or create external receiver diagnostics representation.
            </summary>
            <param name="receiverDiagnosticsInternal">Internal pipeline element diagnostics representation.</param>
            <returns>External pipeline element diagnostics representation.</returns>
        </member>
        <member name="T:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal">
            <summary>
            Represents diagnostic information about a pipeline.
            </summary>
            <remarks>
            This is used while gathering live diagnostics information. It is optimized for lookups with Dictionaries and
            maintains latency, processing time, message size histories. This information is summarized before being posted
            as PipelineDiagnostics.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal"/> class.
            </summary>
            <param name="id">Pipeline ID.</param>
            <param name="name">Pipeline name.</param>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.Id">
            <summary>
            Gets pipeline ID.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.Name">
            <summary>
            Gets pipeline name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.IsPipelineRunning">
            <summary>
            Gets or sets a value indicating whether the pipeline is running (after started, before stopped).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElements">
            <summary>
            Gets elements in this pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.Subpipelines">
            <summary>
            Gets subpipelines of this pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics">
            <summary>
            Represents diagnostic information about a pipeline element.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics.#ctor(System.Int32,System.String,System.String,Microsoft.Psi.Diagnostics.PipelineElementKind,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics"/> class.
            </summary>
            <param name="id">Pipeline element ID.</param>
            <param name="name">Pipeline element name.</param>
            <param name="typeName">Component type name.</param>
            <param name="kind">Pipeline element kind.</param>
            <param name="pipelineId">ID of Pipeline to which this element belongs.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics.#ctor(Microsoft.Psi.Executive.PipelineElement,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics"/> class.
            </summary>
            <param name="element">Pipeline element which this diagnostic information represents.</param>
            <param name="pipelineId">ID of Pipeline to which this element belongs.</param>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics.Id">
            <summary>
            Gets pipeline element ID.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics.Name">
            <summary>
            Gets pipeline element name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics.TypeName">
            <summary>
            Gets pipeline element component type name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics.Kind">
            <summary>
            Gets pipeline element kind.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics.IsRunning">
            <summary>
            Gets or sets a value indicating whether the pipeline element is running (after started, before stopped).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics.Finalized">
            <summary>
            Gets or sets a value indicating whether the pipeline element is finalized.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics.DiagnosticState">
            <summary>
            Gets or sets the custom diagnostic state information.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics.Emitters">
            <summary>
            Gets pipeline element emitters.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics.Receivers">
            <summary>
            Gets pipeline element receivers.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics.PipelineId">
            <summary>
            Gets ID of pipeline to which this element belongs.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics.RepresentsSubpipeline">
            <summary>
            Gets or sets pipeline which this element represents (e.g. Subpipeline).
            </summary>
            <remarks>This is used when a pipeline element is a pipeline (e.g. Subpipeline).</remarks>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics.ConnectorBridgeToPipelineElement">
            <summary>
            Gets or sets bridge to pipeline element in another pipeline (e.g. Connectors).
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics">
            <summary>
            Represents diagnostic information about a pipeline element receiver.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.#ctor(System.Int32,System.String,System.String,Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics"/> class.
            </summary>
            <param name="id">Receiver ID.</param>
            <param name="receiverName">Receiver name.</param>
            <param name="typeName">Receiver type.</param>
            <param name="pipelineElement">Pipeline element to which receiver belongs.</param>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.Id">
            <summary>
            Gets receiver ID.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.ReceiverName">
            <summary>
            Gets receiver name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.DeliveryPolicyName">
            <summary>
            Gets or sets delivery policy name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.TypeName">
            <summary>
            Gets receiver type.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.PipelineElement">
            <summary>
            Gets pipeline element to which emitter belongs.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.Source">
            <summary>
            Gets or sets receiver's source emitter.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.ReceiverIsThrottled">
            <summary>
            Gets or sets a value indicating whether receiver is throttled.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.TotalMessageEmittedCount">
            <summary>
            Gets or sets total count of emitted messages.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.TotalMessageProcessedCount">
            <summary>
            Gets or sets total count of dropped messages.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.TotalMessageDroppedCount">
            <summary>
            Gets or sets total count of dropped messages.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.MessageEmittedCountHistory">
            <summary>
            Gets or sets history of emitted message counts.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.MessageProcessedCountHistory">
            <summary>
            Gets or sets history of processed message counts.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.MessageDroppedCountHistory">
            <summary>
            Gets or sets history of dropped message counts.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.DeliveryQueueSizeHistory">
            <summary>
            Gets or sets history of awaiting delivery queue size.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.MessageCreatedLatencyHistory">
            <summary>
            Gets or sets history of message creation latency over past averaging time window.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.MessageEmittedLatencyHistory">
            <summary>
            Gets or sets history of latencies when the message is emitted over past averaging time window.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.MessageReceivedLatencyHistory">
            <summary>
            Gets or sets history of latencies when the message is received over past averaging time window.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.MessageProcessTimeHistory">
            <summary>
            Gets component processing time over the past averaging time window.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.MessageSizeHistory">
            <summary>
            Gets message size history over the past averaging time window (if TrackMessageSize configured).
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.AddMessageEmitted(System.DateTime,System.TimeSpan)">
            <summary>
            Add emitted message to pipeline element statistics.
            </summary>
            <param name="diagnosticsTime">Time at which to record the diagnostic information.</param>
            <param name="averagingWindow">Window in which to compute averages.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.AddMessageProcessed(System.DateTime,System.TimeSpan)">
            <summary>
            Add processed message time to pipeline element statistics.
            </summary>
            <param name="diagnosticsTime">Time at which to record the diagnostic information.</param>
            <param name="averagingWindow">Window in which to compute averages.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.AddMessageDropped(System.DateTime,System.TimeSpan)">
            <summary>
            Add dropped message time to pipeline element statistics.
            </summary>
            <param name="diagnosticsTime">Time at which to record the diagnostic information.</param>
            <param name="averagingWindow">Window in which to compute averages.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.AddDeliveryQueueSize(System.Int32,System.DateTime,System.TimeSpan)">
            <summary>
            Add current delivery queue size to pipeline element statistics.
            </summary>
            <param name="deliveryQueueSize">Current delivery queue size.</param>
            <param name="diagnosticsTime">Time at which to record the diagnostic information.</param>
            <param name="averagingWindow">Window in which to compute averages.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.AddMessageCreatedLatency(System.TimeSpan,System.DateTime,System.TimeSpan)">
            <summary>
            Add message created latency to pipeline element statistics.
            </summary>
            <param name="messageCreatedLatency">The latency with which the message was created.</param>
            <param name="diagnosticsTime">Time at which to record the diagnostic information.</param>
            <param name="averagingWindow">Window in which to compute averages.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.AddMessageEmittedLatency(System.TimeSpan,System.DateTime,System.TimeSpan)">
            <summary>
            Add message emitted latency to pipeline element statistics.
            </summary>
            <param name="messageEmittedLatency">The latency with which the message is emitted.</param>
            <param name="diagnosticsTime">Time at which to record the diagnostic information.</param>
            <param name="averagingWindow">Window in which to compute averages.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.AddMessageReceivedLatency(System.TimeSpan,System.DateTime,System.TimeSpan)">
            <summary>
            Add message received latency to pipeline element statistics.
            </summary>
            <param name="messageReceivedLatency">The latency with which the message is received.</param>
            <param name="diagnosticsTime">Time at which to record the diagnostic information.</param>
            <param name="averagingWindow">Window in which to compute averages.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.AddMessageProcessTime(System.TimeSpan,System.DateTime,System.TimeSpan)">
            <summary>
            Add message process time to pipeline element statistics.
            </summary>
            <param name="processTime">Time spent processing message.</param>
            <param name="diagnosticsTime">Time at which to record the diagnostic information.</param>
            <param name="averagingWindow">Window in which to compute averages.</param>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.ReceiverDiagnostics.AddMessageSize(System.Int32,System.DateTime,System.TimeSpan)">
            <summary>
            Add message size to pipeline element statistics.
            </summary>
            <param name="size">Message size (bytes).</param>
            <param name="diagnosticsTime">Time at which to record the diagnostic information.</param>
            <param name="averagingWindow">Window in which to compute averages.</param>
        </member>
        <member name="T:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.EmitterDiagnostics">
            <summary>
            Represents diagnostic information about a pipeline element emitter.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.EmitterDiagnostics.#ctor(System.Int32,System.String,System.String,Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.PipelineElementDiagnostics)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.EmitterDiagnostics"/> class.
            </summary>
            <param name="id">Emitter ID.</param>
            <param name="name">Emitter name.</param>
            <param name="type">Emitter type.</param>
            <param name="element">Pipeline element to which emitter belongs.</param>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.EmitterDiagnostics.Id">
            <summary>
            Gets emitter ID.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.EmitterDiagnostics.Name">
            <summary>
            Gets or sets emitter name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.EmitterDiagnostics.Type">
            <summary>
            Gets emitter type.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.EmitterDiagnostics.PipelineElement">
            <summary>
            Gets pipeline element to which emitter belongs.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Diagnostics.PipelineDiagnosticsInternal.EmitterDiagnostics.Targets">
            <summary>
            Gets emitter target receivers.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Diagnostics.PipelineElementKind">
            <summary>
            Pipeline element kind.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Diagnostics.PipelineElementKind.Source">
            <summary>
            Represents a source component.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Diagnostics.PipelineElementKind.Reactive">
            <summary>
            Represents a purely reactive component.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Diagnostics.PipelineElementKind.Connector">
            <summary>
            Represents a Connector component.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Diagnostics.PipelineElementKind.Subpipeline">
            <summary>
            Represents a Subpipeline component.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.ComponentCompletedEventArgs">
            <summary>
            Class encapsulating the event arguments provided by the <see cref="E:Microsoft.Psi.Pipeline.ComponentCompleted"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.ComponentCompletedEventArgs.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.ComponentCompletedEventArgs"/> class.
            </summary>
            <param name="componentName">The name of the component.</param>
            <param name="completedDateTime">The time the component completed.</param>
        </member>
        <member name="P:Microsoft.Psi.ComponentCompletedEventArgs.ComponentName">
            <summary>
            Gets the name of the component which completed.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.ComponentCompletedEventArgs.CompletedDateTime">
            <summary>
            Gets the time when the component completed.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.DebugExtensions">
            <summary>
            Class containing debug extensions for the executive subsystem.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.DebugExtensions.EnableDebugViews">
            <summary>
            Call this to enable DebugView calls. Usually wrapped in #ifdef DEBUG conditional statements.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.DebugExtensions.DisableDebugViews">
            <summary>
            Call this to disable DebugView calls. Usually wrapped in #ifdef DEBUG conditional statements.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.DebugExtensions.DebugView``1(Microsoft.Psi.IProducer{``0},System.String,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Publishes the specified stream to the debug partition, allowing debugging visualizers to display the data.
            </summary>
            <typeparam name="T">The type of data in the stream.</typeparam>
            <param name="source">The stream to visualize.</param>
            <param name="name">The name to use when visualizing the stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>The debug name of the stream, either as provided or the generated one if one was not specified.</returns>
        </member>
        <member name="M:Microsoft.Psi.DebugExtensions.DumpStructure(Microsoft.Psi.Pipeline,System.String)">
            <summary>
            Generates a .dgml file that can be opened in Visual Studio to visualize the pipeline structure.
            See https://msdn.microsoft.com/en-us/library/ee842619.aspx.
            </summary>
            <param name="pipeline">The pipeline to dump.</param>
            <param name="fileName">The name (and path) of the new file to generate.</param>
        </member>
        <member name="T:Microsoft.Psi.Executive.KeyValueStore">
            <summary>
            Global store for key/value pairs that can be shared between components via the ApplicationCatalog.
            Adding a value with an existing name overrides the previous value.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Executive.PipelineElement">
            <summary>
            Class that encapsulates the execution context of a component (the state object, the sync object, the component wiring etc.)
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Executive.PipelineElement.ExecutionContextStateObjectSlot">
            <summary>
            Slot for execution context local tracking of state object (receiver's owner or start/stop/final state object).
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Executive.PipelineElement.ExecutionContextPipelineSlot">
            <summary>
            Slot for execution context local tracking of pipeline instance.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Executive.PipelineElement.#ctor(System.Int32,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Executive.PipelineElement"/> class.
            </summary>
            <param name="id">The ID of the instance.</param>
            <param name="name">The name of the instance.</param>
            <param name="stateObject">The state object wrapped by this node.</param>
        </member>
        <member name="P:Microsoft.Psi.Executive.PipelineElement.Id">
            <summary>
            Gets pipeline element ID.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Executive.PipelineElement.Name">
            <summary>
            Gets the name of the entity.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Executive.PipelineElement.IsActivated">
            <summary>
            Gets a value indicating whether the component has been activated.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Executive.PipelineElement.IsDeactivating">
            <summary>
            Gets a value indicating whether the component is deactivating - meaning that it will cease producing non-reactive source messages past the final originating time.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Executive.PipelineElement.IsDeactivated">
            <summary>
            Gets a value indicating whether the component has been deactivated - meaning that it has ceased producing non-reactive source messages (from timers, sensors, etc.)
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Executive.PipelineElement.IsFinalized">
            <summary>
            Gets a value indicating whether the component has been finalized - meaning that it should no longer be producing messages for any reason.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Executive.PipelineElement.IsSource">
            <summary>
            Gets a value indicating whether the entity is a source component
            Generally this means it produces messages on its own thread rather than in response to other messages.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Executive.PipelineElement.IsConnector">
            <summary>
            Gets a value indicating whether node is a <see cref="T:Microsoft.Psi.Components.Connector`1"/> component.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Executive.PipelineElement.LastOutputEnvelope">
            <summary>
            Gets the envelope of the last message posted on any of this node's outputs.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Executive.PipelineElement.TrackStateObjectOnContext(System.Action,System.Object,Microsoft.Psi.Pipeline)">
            <summary>
            Track state object in the execution context (in DEBUG only).
            </summary>
            <remarks>This allows checking that emitter post calls are from expected sources.</remarks>
            <param name="action">Action around which tracking will be instrumented.</param>
            <param name="owner">Owner/state object.</param>
            <param name="pipeline">Pipeline instance.</param>
            <returns>Action with tracking.</returns>
        </member>
        <member name="M:Microsoft.Psi.Executive.PipelineElement.TrackStateObjectOnContext``1(System.Action{``0},System.Object,Microsoft.Psi.Pipeline)">
            <summary>
            Track state object in the execution context.
            </summary>
            <remarks>This allows checking that emitter post calls are from expected sources.</remarks>
            <typeparam name="T">Type of action.</typeparam>
            <param name="action">Action around which tracking will be instrumented.</param>
            <param name="owner">Owner/state object.</param>
            <param name="pipeline">Pipeline instance.</param>
            <returns>Action with tracking.</returns>
        </member>
        <member name="M:Microsoft.Psi.Executive.PipelineElement.CheckStateObjectOnContext(System.Object,Microsoft.Psi.Pipeline)">
            <summary>
            Check that the current state object being tracked on the execution context is the expected owner (exception for source components).
            </summary>
            <param name="owner">Owner/state object.</param>
            <param name="pipeline">Pipeline instance.</param>
        </member>
        <member name="M:Microsoft.Psi.Executive.PipelineElement.Initialize(Microsoft.Psi.Pipeline)">
            <summary>
            Delayed initialization of the state object. Note that we don't have a Scheduler yet.
            </summary>
            <param name="pipeline">The parent pipeline.</param>
        </member>
        <member name="M:Microsoft.Psi.Executive.PipelineElement.Dispose">
            <summary>
            Disposes the state object and turns off the receivers.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Executive.PipelineElement.Activate">
            <summary>
            Activates the entity - source components may begin producing non-reactive source messages. However, no messages
            will be delivered by the runtime to their recipients until all components in the pipeline have been activated.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Executive.PipelineElement.Deactivate(System.DateTime)">
            <summary>
            Deactivates the entity - meaning that it should cease producing non-reactive source messages (from timers, sensors, etc.)
            </summary>
            <param name="finalOriginatingTime">The final originating time.</param>
        </member>
        <member name="M:Microsoft.Psi.Executive.PipelineElement.Final(System.DateTime)">
            <summary>
            Finalize the entity - meaning that it may produce final messages now and then should no longer be producing messages for any reason.
            </summary>
            <param name="finalOriginatingTime">The final originating time.</param>
        </member>
        <member name="T:Microsoft.Psi.Pipeline">
            <summary>
            Represents a graph of components and controls scheduling and message passing.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Pipeline.completed">
            <summary>
            This event becomes set once the pipeline is done.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Pipeline.completableComponents">
            <summary>
            The list of completable components.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Pipeline.components">
            <summary>
            The list of components.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Pipeline.replayDescriptor">
            <summary>
            If set, indicates that the pipeline is in replay mode.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.#ctor(System.String,Microsoft.Psi.DeliveryPolicy,System.Int32,System.Boolean,System.Boolean,Microsoft.Psi.Diagnostics.DiagnosticsConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Pipeline"/> class.
            </summary>
            <param name="name">Pipeline name.</param>
            <param name="defaultDeliveryPolicy">Pipeline-level default delivery policy (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <param name="threadCount">Number of threads.</param>
            <param name="allowSchedulingOnExternalThreads">Whether to allow scheduling on external threads.</param>
            <param name="enableDiagnostics">Whether to enable collecting and publishing diagnostics information on the Pipeline.Diagnostics stream.</param>
            <param name="diagnosticsConfiguration">Optional diagnostics configuration information.</param>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.#ctor(System.String,Microsoft.Psi.DeliveryPolicy,Microsoft.Psi.Scheduling.Scheduler,Microsoft.Psi.Scheduling.SchedulerContext,Microsoft.Psi.Diagnostics.DiagnosticsCollector,Microsoft.Psi.Diagnostics.DiagnosticsConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Pipeline"/> class.
            </summary>
            <param name="name">Pipeline name.</param>
            <param name="defaultDeliveryPolicy">Pipeline-level default delivery policy (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <param name="scheduler">Scheduler to be used.</param>
            <param name="schedulerContext">The scheduler context.</param>
            <param name="diagnosticsCollector">Collector with which to gather diagnostic information.</param>
            <param name="diagnosticsConfig">Optional diagnostics configuration information.</param>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.#ctor(System.String,Microsoft.Psi.DeliveryPolicy,Microsoft.Psi.Diagnostics.DiagnosticsCollector,Microsoft.Psi.Diagnostics.DiagnosticsConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Pipeline"/> class.
            </summary>
            <param name="name">Pipeline name.</param>
            <param name="defaultDeliveryPolicy">Pipeline-level default delivery policy (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <param name="diagnosticsCollector">Collector with which to gather diagnostic information.</param>
            <param name="diagnosticsConfig">Optional diagnostics configuration information.</param>
        </member>
        <member name="E:Microsoft.Psi.Pipeline.PipelineRun">
            <summary>
            Event that is raised when the pipeline starts running.
            </summary>
        </member>
        <member name="E:Microsoft.Psi.Pipeline.PipelineCompleted">
            <summary>
            Event that is raised upon pipeline completion.
            </summary>
        </member>
        <member name="E:Microsoft.Psi.Pipeline.ComponentCompleted">
            <summary>
            Event that is raised upon component completion.
            </summary>
        </member>
        <member name="E:Microsoft.Psi.Pipeline.PipelineExceptionNotHandled">
            <summary>
            Event that is raised when one or more unhandled exceptions occur in the pipeline. If a handler is attached
            to this event, any unhandled exceptions during pipeline execution will not be thrown, and will instead
            be handled by the attached handler. If no handler is attached, unhandled exceptions will be thrown within
            the execution context in which the exception occurred if the pipeline was run asynchronously via one of the
            RunAsync methods. This could cause the application to terminate abruptly. If the pipeline was run synchronously
            via one of the Run methods, an AggregateException will be thrown from the Run method (which may be caught).
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Pipeline.State">
            <summary>
            Enumeration of pipeline states.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Pipeline.Id">
            <summary>
            Gets pipeline ID.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Pipeline.Name">
            <summary>
            Gets pipeline name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Pipeline.ReplayDescriptor">
            <summary>
            Gets replay descriptor.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Pipeline.Diagnostics">
            <summary>
            Gets emitter producing diagnostics information (must be enabled when running pipeline).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Pipeline.StartTime">
            <summary>
            Gets the pipeline start time based on the pipeline clock.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Pipeline.ProgressReportInterval">
            <summary>
            Gets or sets the progress reporting time interval.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Pipeline.FinalOriginatingTime">
            <summary>
            Gets or sets originating time of final message scheduled.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Pipeline.LatestFiniteSourceCompletionTime">
            <summary>
            Gets or sets the completion time of the latest completed finite source component.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Pipeline.NoRemainingCompletableComponents">
            <summary>
            Gets an <see cref="T:System.Threading.AutoResetEvent"/> that signals when there are no remaining completable components.
            </summary>
            <remarks>
            This is an <see cref="T:System.Threading.AutoResetEvent"/> rather than a <see cref="T:System.Threading.ManualResetEvent"/> as we need the
            event to trigger one and only one action when signaled.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.Create(System.String,Microsoft.Psi.DeliveryPolicy,System.Int32,System.Boolean,System.Boolean,Microsoft.Psi.Diagnostics.DiagnosticsConfiguration)">
            <summary>
            Create pipeline.
            </summary>
            <param name="name">Pipeline name.</param>
            <param name="deliveryPolicy">Pipeline-level delivery policy.</param>
            <param name="threadCount">Number of threads.</param>
            <param name="allowSchedulingOnExternalThreads">Whether to allow scheduling on external threads.</param>
            <param name="enableDiagnostics">Indicates whether to enable collecting and publishing diagnostics information on the Pipeline.Diagnostics stream.</param>
            <param name="diagnosticsConfiguration">Optional diagnostics configuration information.</param>
            <returns>Created pipeline.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.ProposeReplayTime(Microsoft.Psi.TimeInterval)">
            <summary>
            Propose replay time.
            </summary>
            <param name="originatingTimeInterval">Originating time interval.</param>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.GetDefaultDeliveryPolicy``1">
            <summary>
            Gets the default delivery policy for a stream of given type.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <returns>The default delivery policy to use for that stream.</returns>
            <remarks>The default delivery policy is used when no delivery policy is specified when wiring the stream.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.GetDefaultMessageValidator``1">
            <summary>
            Gets the default message validator for a stream of a given type.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <returns>The default validator to use for that stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.CreateReceiver``1(System.Object,System.Action{``0,Microsoft.Psi.Envelope},System.String,System.Boolean)">
            <summary>
            Creates an input receiver associated with the specified component object.
            </summary>
            <typeparam name="T">The type of messages accepted by this receiver.</typeparam>
            <param name="owner">The component that owns the receiver. This is usually the state object that the receiver operates on.
            The receivers associated with the same owner are never executed concurrently.</param>
            <param name="action">The action to execute when a message is delivered to this receiver.</param>
            <param name="name">The debug name of the receiver.</param>
            <param name="autoClone">If true, the receiver will clone the message before passing it to the action, which is then responsible for recycling it as needed (using receiver.Recycle).</param>
            <returns>A new receiver.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.CreateReceiver``1(System.Object,System.Action{``0},System.String,System.Boolean)">
            <summary>
            Creates an input receiver associated with the specified component object.
            </summary>
            <typeparam name="T">The type of messages accepted by this receiver.</typeparam>
            <param name="owner">The component that owns the receiver. This is usually the state object that the receiver operates on.
            The receivers associated with the same owner are never executed concurrently.</param>
            <param name="action">The action to execute when a message is delivered to this receiver.</param>
            <param name="name">The debug name of the receiver.</param>
            <param name="autoClone">If true, the receiver will clone the message before passing it to the action, which is then responsible for recycling it as needed (using receiver.Recycle).</param>
            <returns>A new receiver.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.CreateReceiver``1(System.Object,System.Action{Microsoft.Psi.Message{``0}},System.String,System.Boolean)">
            <summary>
            Creates an input receiver associated with the specified component object.
            </summary>
            <typeparam name="T">The type of messages accepted by this receiver.</typeparam>
            <param name="owner">The component that owns the receiver. This is usually the state object that the receiver operates on.
            The receivers associated with the same owner are never executed concurrently.</param>
            <param name="action">The action to execute when a message is delivered to this receiver.</param>
            <param name="name">The debug name of the receiver.</param>
            <param name="autoClone">If true, the receiver will clone the message before passing it to the action, which is then responsible for recycling it as needed (using receiver.Recycle).</param>
            <returns>A new receiver.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.CreateAsyncReceiver``1(System.Object,System.Func{``0,Microsoft.Psi.Envelope,System.Threading.Tasks.Task},System.String,System.Boolean)">
            <summary>
            Creates an input receiver associated with the specified component object, connected to an async message processing function.
            The expected signature of the message processing delegate is: <code>async void Receive(<typeparamref name="T"/> message, Envelope env);</code>
            </summary>
            <typeparam name="T">The type of messages accepted by this receiver.</typeparam>
            <param name="owner">The component that owns the receiver. This is usually the state object that the receiver operates on.
            The receivers associated with the same owner are never executed concurrently.</param>
            <param name="action">The action to execute when a message is delivered to this receiver.</param>
            <param name="name">The debug name of the receiver.</param>
            <param name="autoClone">If true, the receiver will clone the message before passing it to the action, which is then responsible for recycling it as needed (using receiver.Recycle).</param>
            <returns>A new receiver.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.CreateAsyncReceiver``1(System.Object,System.Func{``0,System.Threading.Tasks.Task},System.String,System.Boolean)">
            <summary>
            Creates an input receiver associated with the specified component object, connected to an async message processing function.
            The expected signature of the message processing delegate is: <code>async void Receive(<typeparamref name="T"/> message);</code>
            </summary>
            <typeparam name="T">The type of messages accepted by this receiver.</typeparam>
            <param name="owner">The component that owns the receiver. This is usually the state object that the receiver operates on.
            The receivers associated with the same owner are never executed concurrently.</param>
            <param name="action">The action to execute when a message is delivered to this receiver.</param>
            <param name="name">The debug name of the receiver.</param>
            <param name="autoClone">If true, the receiver will clone the message before passing it to the action, which is then responsible for recycling it as needed (using receiver.Recycle).</param>
            <returns>A new receiver.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.CreateAsyncReceiver``1(System.Object,System.Func{Microsoft.Psi.Message{``0},System.Threading.Tasks.Task},System.String,System.Boolean)">
            <summary>
            Creates an input receiver associated with the specified component object, connected to an async message processing function.
            The expected signature of the message processing delegate is: <code>async void Receive(Message{<typeparamref name="T"/>} message);</code>
            </summary>
            <typeparam name="T">The type of messages accepted by this receiver.</typeparam>
            <param name="owner">The component that owns the receiver. This is usually the state object that the receiver operates on.
            The receivers associated with the same owner are never executed concurrently.</param>
            <param name="action">The action to execute when a message is delivered to this receiver.</param>
            <param name="name">The debug name of the receiver.</param>
            <param name="autoClone">If true, the receiver will clone the message before passing it to the action, which is then responsible for recycling it as needed (using receiver.Recycle).</param>
            <returns>A new receiver.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.CreateEmitter``1(System.Object,System.String,Microsoft.Psi.Emitter{``0}.ValidateMessageHandler)">
            <summary>
            Create emitter.
            </summary>
            <typeparam name="T">Type of emitted messages.</typeparam>
            <param name="owner">Owner of emitter.</param>
            <param name="name">Name of emitter.</param>
            <param name="messageValidator">An optional message validator.</param>
            <returns>Created emitter.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.WaitAll(System.Int32)">
            <summary>
            Wait for all components to complete.
            </summary>
            <param name="millisecondsTimeout">Timeout (milliseconds).</param>
            <returns>Success.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.WaitAll(System.TimeSpan)">
            <summary>
            Wait for all components to complete.
            </summary>
            <param name="timeout">Timeout.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Pipeline.Run(Microsoft.Psi.ReplayDescriptor)">
            <summary>
            Runs the pipeline synchronously.
            </summary>
            <param name="descriptor">An optional replay descriptor to apply when replaying data from a store.</param>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.Run(Microsoft.Psi.TimeInterval,System.Boolean)">
            <summary>
            Runs the pipeline synchronously in replay mode. This method may be used when replaying data from a store.
            </summary>
            <param name="replayInterval">
            The time interval within which to replay the data. The pipeline will commence playback at the start time of
            this interval, and only messages bearing an originating time within this interval will be retrieved from the
            store(s) contained in the pipeline and delivered. Pipeline execution will stop once all messages within this
            interval have been processed.
            </param>
            <param name="enforceReplayClock">
            Whether to enforce the replay clock. If true, messages retrieved from the store(s) will be delivered according
            to their originating times, as though they were being generated in real-time. If false, messages retrieved from
            store(s) will be delivered as soon as possible irrespective of their originating times.
            </param>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.Run(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Runs the pipeline synchronously in replay mode. This method may be used when replaying data from a store.
            </summary>
            <param name="replayStartTime">The time at which to start replaying.</param>
            <param name="replayEndTime">The time at which to end replaying.</param>
            <param name="enforceReplayClock">
            Whether to enforce the replay clock. If true, messages retrieved from the store(s) will be delivered according
            to their originating times, as though they were being generated in real-time. If false, messages retrieved from
            store(s) will be delivered as soon as possible irrespective of their originating times.
            </param>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.Run(System.DateTime,System.Boolean)">
            <summary>
            Runs the pipeline synchronously in replay mode. This method may be used when replaying data from a store.
            </summary>
            <param name="replayStartTime">Time at which to start replaying.</param>
            <param name="enforceReplayClock">
            Whether to enforce the replay clock. If true, messages retrieved from the store(s) will be delivered according
            to their originating times, as though they were being generated in real-time. If false, messages retrieved from
            store(s) will be delivered as soon as possible irrespective of their originating times.
            </param>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.RunAsync(Microsoft.Psi.ReplayDescriptor,System.IProgress{System.Double})">
            <summary>
            Runs the pipeline asynchronously.
            </summary>
            <param name="descriptor">An optional replay descriptor to apply when replaying data from a store.</param>
            <param name="progress">An optional progress reporter for progress updates.</param>
            <returns>An IDisposable instance which may be used to terminate the pipeline.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.RunAsync(Microsoft.Psi.TimeInterval,System.Boolean,System.IProgress{System.Double})">
            <summary>
            Runs the pipeline asynchronously in replay mode. This method may be used when replaying data from a store.
            </summary>
            <param name="replayInterval">
            The time interval within which to replay the data. The pipeline will commence playback at the start time of
            this interval, and only messages bearing an originating time within this interval will be retrieved from the
            store(s) contained in the pipeline and delivered. Pipeline execution will stop once all messages within this
            interval have been processed.
            </param>
            <param name="enforceReplayClock">
            Whether to enforce the replay clock. If true, messages retrieved from the store(s) will be delivered according
            to their originating times, as though they were being generated in real-time. If false, messages retrieved from
            store(s) will be delivered as soon as possible irrespective of their originating times.
            </param>
            <param name="progress">An optional progress reporter for progress updates.</param>
            <returns>An IDisposable instance which may be used to terminate the pipeline.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.RunAsync(System.DateTime,System.DateTime,System.Boolean,System.IProgress{System.Double})">
            <summary>
            Runs the pipeline asynchronously in replay mode. This method may be used when replaying data from a store.
            </summary>
            <param name="replayStartTime">Time at which to start replaying.</param>
            <param name="replayEndTime">Time at which to end replaying.</param>
            <param name="enforceReplayClock">
            Whether to enforce the replay clock. If true, messages retrieved from the store(s) will be delivered according
            to their originating times, as though they were being generated in real-time. If false, messages retrieved from
            store(s) will be delivered as soon as possible irrespective of their originating times.
            </param>
            <param name="progress">An optional progress reporter for progress updates.</param>
            <returns>An IDisposable instance which may be used to terminate the pipeline.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.RunAsync(System.DateTime,System.Boolean,System.IProgress{System.Double})">
            <summary>
            Runs the pipeline asynchronously in replay mode. This method may be used when replaying data from a store.
            </summary>
            <param name="replayStartTime">Time at which to start replaying.</param>
            <param name="enforceReplayClock">
            Whether to enforce the replay clock. If true, messages retrieved from the store(s) will be delivered according
            to their originating times, as though they were being generated in real-time. If false, messages retrieved from
            store(s) will be delivered as soon as possible irrespective of their originating times.
            </param>
            <param name="progress">An optional progress reporter for progress updates.</param>
            <returns>An IDisposable instance which may be used to terminate the pipeline.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.GetCurrentTime">
            <summary>
            Get current clock time.
            </summary>
            <returns>Current clock time.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.GetCurrentTimeFromElapsedTicks(System.Int64)">
            <summary>
            Get current time, given elapsed ticks.
            </summary>
            <param name="ticksFromSystemBoot">Ticks elapsed since system boot.</param>
            <returns>Current time.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.ConvertToRealTime(System.TimeSpan)">
            <summary>
            Convert virtual duration to real time.
            </summary>
            <param name="duration">Duration to convert.</param>
            <returns>Converted time span.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.ConvertToRealTime(System.DateTime)">
            <summary>
            Convert virtual datetime to real time.
            </summary>
            <param name="time">Datetime to convert.</param>
            <returns>Converted datetime.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.ConvertFromRealTime(System.TimeSpan)">
            <summary>
            Convert real timespan to virtual.
            </summary>
            <param name="duration">Duration to convert.</param>
            <returns>Converted time span.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.ConvertFromRealTime(System.DateTime)">
            <summary>
            Convert real datetime to virtual.
            </summary>
            <param name="time">Datetime to convert.</param>
            <returns>Converted datetime.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.SetLastStreamId(System.Int32)">
            <summary>
            Set last stream ID.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.Dispose(System.Boolean)">
            <summary>
            Stops the pipeline and removes all connectivity (pipes).
            </summary>
            <param name="abandonPendingWorkItems">Abandons pending work items.</param>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.NotifyCompletionTime(Microsoft.Psi.Executive.PipelineElement,System.DateTime)">
            <summary>
            Notify pipeline of component completion along with originating time of final message.
            </summary>
            <param name="component">Component which has completed.</param>
            <param name="finalOriginatingTime">Originating time of final message.</param>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.CompleteComponent(Microsoft.Psi.Executive.PipelineElement,System.DateTime)">
            <summary>
            Mark the component as completed and update the final message originating time of the pipeline.
            </summary>
            <param name="component">Component which has completed.</param>
            <param name="finalOriginatingTime">Originating time of final message.</param>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.ForThisPipelineAndAllDescendentSubpipelines(System.Action{Microsoft.Psi.Pipeline})">
            <summary>
            Apply action to this pipeline and to all descendant Subpipelines.
            </summary>
            <param name="action">Action to apply.</param>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.PauseForQuiescence">
            <summary>
            Pause pipeline (and all subpipeline) scheduler for quiescence.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.Stop(System.DateTime,System.Boolean)">
            <summary>
            Stops the pipeline by disabling message passing between the pipeline components.
            The pipeline configuration is not changed and the pipeline can be restarted later.
            </summary>
            <param name="finalOriginatingTime">
            The final originating time of the pipeline. Delivery of messages with originating times
            later than the final originating time will no longer be guaranteed.
            </param>
            <param name="abandonPendingWorkitems">Abandons the pending work items.</param>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.RunAsync(Microsoft.Psi.ReplayDescriptor,Microsoft.Psi.Clock,System.IProgress{System.Double})">
            <summary>
            Run pipeline (asynchronously).
            </summary>
            <param name="descriptor">Replay descriptor.</param>
            <param name="clock">Clock to use (in the case of a shared scheduler - e.g. subpipeline).</param>
            <param name="progress">Progress reporter.</param>
            <returns>Disposable used to terminate pipeline.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.GatherActiveNodes(Microsoft.Psi.Pipeline)">
            <summary>
            Gather all nodes within this pipeline and recursively within subpipelines.
            </summary>
            <param name="pipeline">Pipeline (or Subpipeline) from which to gather nodes.</param>
            <returns>Active nodes.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.IsConnector(Microsoft.Psi.Executive.PipelineElement)">
            <summary>
            Determine whether a node is a Connector component.
            </summary>
            <param name="node">Element for which to determine whether it represents a Connector component.</param>
            <returns>Indication of whether the element represents a Connector component.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.TryGetConnectorBridge(Microsoft.Psi.Executive.PipelineElement,System.Collections.Generic.Dictionary{System.Object,Microsoft.Psi.Executive.PipelineElement},Microsoft.Psi.Executive.PipelineElement@)">
            <summary>
            Pipeline-bridging Connectors create two nodes; one with inputs in one pipeline and one with outputs in the other.
            Here we attempt to find the input side, given a Connector node.
            </summary>
            <param name="node">Node (representing the output side of a Connector) for which to try to find the matching input node.</param>
            <param name="inputConnectors">Known nodes (with inputs) representing Connectors.</param>
            <param name="bridge">Populated with input side of Connector bridge if found.</param>
            <returns>Indication of whether a bridge has been found.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.OnlyCyclicInputs(Microsoft.Psi.Executive.PipelineElement,Microsoft.Psi.Executive.PipelineElement,System.Collections.Generic.Dictionary{System.Int32,Microsoft.Psi.Executive.PipelineElement},System.Collections.Generic.Dictionary{System.Object,Microsoft.Psi.Executive.PipelineElement},System.Collections.Generic.HashSet{Microsoft.Psi.Executive.PipelineElement})">
            <summary>
            Determine whether a node has *only* cyclic inputs (back to origin; not including upstream independent cycles).
            </summary>
            <param name="node">Node for which to determine whether it has only cyclic inputs.</param>
            <param name="origin">Node from which a potential cycle may originate.</param>
            <param name="emitterNodes">Mapping of emitter IDs to corresponding nodes.</param>
            <param name="inputConnectors">Known nodes (with inputs) representing Connectors.</param>
            <param name="visitedNodes">Used to mark visited nodes; preventing infinitely exploring cycles (upstream from the origin).</param>
            <returns>An indication of whether the node has only cyclic inputs.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.IsNodeFinalizable(Microsoft.Psi.Executive.PipelineElement,System.Collections.Generic.Dictionary{System.Int32,Microsoft.Psi.Executive.PipelineElement},System.Collections.Generic.Dictionary{System.Object,Microsoft.Psi.Executive.PipelineElement},System.Boolean,System.Boolean)">
            <summary>
            Determine whether a node is eligible for finalization (has no inputs from unfinalized node or else only cycles back to self).
            </summary>
            <param name="node">Node for which to determine eligibility.</param>
            <param name="emitterNodes">Mapping of emitter IDs to corresponding nodes.</param>
            <param name="inputConnectors">Known nodes (with inputs) representing Connectors.</param>
            <param name="includeCycles">Whether to consider nodes that are members of a pure cycle to be finalizable.</param>
            <param name="onlySelfCycles">Whether to consider only self-cycles (node is it's own parent).</param>
            <returns>An indication of eligibility for finalization.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.GetSubpipelines">
            <summary>
            Gets child subpipeline components.
            </summary>
            <returns>Child subpipelines.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.OnPipelineRun(Microsoft.Psi.PipelineRunEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.Psi.Pipeline.PipelineRun"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.Psi.PipelineRunEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.OnPipelineCompleted(Microsoft.Psi.PipelineCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.Psi.Pipeline.PipelineCompleted"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.Psi.PipelineCompletedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.DeactivateComponents">
            <summary>
            Deactivates all active components.
            </summary>
            <returns>Number of components deactivated.</returns>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.FinalizeComponents">
             <summary>
             Finalizes all components within the pipeline and all subpipelines. The graph of the pipeline is iteratively
             inspected for nodes (representing components) that are finalizable. On each pass, nodes with no active
             inputs (i.e. whose receivers are all unsubscribed) are finalized immediately and their emitters are closed.
             The act of finalizing a node and closing its emitters may in turn cause downstream nodes to also become
             finalizable if all of their receivers become unsubscribed. This process is repeated until no finalizable
             nodes are found. Remaining active nodes are then inspected for their participation in cycles.
            
             We identify three kinds of nodes, depending on their participation in various types of cycles:
              - A node in a self-cycle whose active inputs are all directly connected to its outputs.
              - A node participating in only simple (or pure) cycles where every one of its active inputs (and those of
                its predecessor nodes) cycle back to itself.
              - A node which has at least one active input on a directed path that is not a simple cycle back to itself.
            
             Once there are no immediately finalizable nodes found, any nodes containing self cycles are finalized next.
             This may cause direct successor nodes to become finalizable once they have no active inputs. When there are
             again no more finalizable nodes, the graph is inspected for nodes in pure cycles. A node in the cycle is
             chosen arbitrarily and finalized to break the cycle. This process is iterated over until all that remains
             are nodes which have inputs that are not exclusively simple cycles (e.g. a cyclic node with a predecessor
             that is also on a different cycle), or nodes with such cycles upstream. The node with the most number of
             outputs (used as a heuristic to finalize terminal nodes last) is finalized, then the remaining nodes are
             evaluated for finalization using the same order of criteria as before (nodes with no active inputs, nodes
             with only self-cycles, nodes in only simple cycles, etc.) until all nodes have been finalized.
             </summary>
             <remarks>
             Prior to calling this method, all source components should first be deactivated such that they are no
             longer producing new source messages. The act of finalizing a node may cause it to post new messages to
             downstream components. It is therefore important to allow the pipeline to drain once there are no longer
             any nodes without active inputs remaining (these are always safe to finalize immediately).
             </remarks>
        </member>
        <member name="M:Microsoft.Psi.Pipeline.ErrorHandler(System.Exception)">
            <summary>
            Error handler function.
            </summary>
            <param name="e">Exception to handle.</param>
            <returns>Whether exception handled.</returns>
        </member>
        <member name="T:Microsoft.Psi.PipelineCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.Psi.Pipeline.PipelineCompleted"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.PipelineCompletedEventArgs.#ctor(System.DateTime,System.Boolean,System.Collections.Generic.List{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.PipelineCompletedEventArgs"/> class.
            </summary>
            <param name="completedOriginatingTime">The time the pipeline completed.</param>
            <param name="abandonedPendingWorkitems">True if workitems were abandoned, false otherwise.</param>
            <param name="errors">The set of errors that caused the pipeline to stop, if any.</param>
        </member>
        <member name="P:Microsoft.Psi.PipelineCompletedEventArgs.CompletedOriginatingTime">
            <summary>
            Gets the time when the pipeline completed.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.PipelineCompletedEventArgs.AbandonedPendingWorkitems">
            <summary>
            Gets a value indicating whether any workitems have been abandoned.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.PipelineCompletedEventArgs.Errors">
            <summary>
            Gets the set of errors that caused the pipeline to stop, if any.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.PipelineExceptionNotHandledEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.Psi.Pipeline.PipelineExceptionNotHandled"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.PipelineExceptionNotHandledEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.PipelineExceptionNotHandledEventArgs"/> class.
            </summary>
            <param name="exception">The exception thrown by the pipeline.</param>
        </member>
        <member name="P:Microsoft.Psi.PipelineExceptionNotHandledEventArgs.Exception">
            <summary>
            Gets the exception thrown by the pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.PipelineRunEventArgs">
            <summary>
            Class encapsulating the event arguments provided by the <see cref="E:Microsoft.Psi.Pipeline.PipelineRun"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.PipelineRunEventArgs.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.PipelineRunEventArgs"/> class.
            </summary>
            <param name="startOriginatingTime">The time the pipeline started running.</param>
        </member>
        <member name="P:Microsoft.Psi.PipelineRunEventArgs.StartOriginatingTime">
            <summary>
            Gets the time when the pipeline started running.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Subpipeline">
            <summary>
            Represents a graph of components and controls scheduling and message passing.
            </summary>
            <remarks>This is essentially a pipeline as a component within other pipelines.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Subpipeline.#ctor(Microsoft.Psi.Pipeline,System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Subpipeline"/> class.
            </summary>
            <param name="parent">Parent pipeline.</param>
            <param name="name">Subpipeline name (inherits "Sub<Parent>" name if unspecified)</Parent>.</param>
            <param name="defaultDeliveryPolicy">Pipeline-level default delivery policy (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
        </member>
        <member name="P:Microsoft.Psi.Subpipeline.ParentPipeline">
            <summary>
            Gets the parent pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Subpipeline.Create(Microsoft.Psi.Pipeline,System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Create subpipeline.
            </summary>
            <param name="parent">Parent pipeline.</param>
            <param name="name">Subpipeline name.</param>
            <param name="defaultDeliveryPolicy">Pipeline-level default delivery policy (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Created subpipeline.</returns>
        </member>
        <member name="M:Microsoft.Psi.Subpipeline.Start(System.Action{System.DateTime})">
            <summary>
            Initialize subpipeline as a finite source component.
            </summary>
            <remarks>This is called by the parent subpipeline, if any.</remarks>
            <param name="notifyCompletionTime">Delegate to call to notify of completion time.</param>
        </member>
        <member name="M:Microsoft.Psi.Subpipeline.Stop(System.DateTime,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Subpipeline.ProposeReplayTime(Microsoft.Psi.TimeInterval)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Subpipeline.CreateInputConnectorFrom``1(Microsoft.Psi.Pipeline,System.String)">
            <summary>
            Creates an input connector for a subpipeline.
            </summary>
            <typeparam name="T">The type of messages for the input connector.</typeparam>
            <param name="fromPipeline">The pipeline from which the input connector receives data.</param>
            <param name="name">The name of the input connector.</param>
            <returns>The newly created input connector.</returns>
        </member>
        <member name="M:Microsoft.Psi.Subpipeline.CreateOutputConnectorTo``1(Microsoft.Psi.Pipeline,System.String)">
            <summary>
            Creates an output connector for a subpipeline.
            </summary>
            <typeparam name="T">The type of messages for the output connector.</typeparam>
            <param name="toPipeline">The pipeline to which the output connector sends data.</param>
            <param name="name">The name of the output connector.</param>
            <returns>The newly created output connector.</returns>
        </member>
        <member name="M:Microsoft.Psi.Subpipeline.ToString">
            <inheritdoc />
            <remarks>Return subpipeline name as component name.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Subpipeline.RunAsync(Microsoft.Psi.ReplayDescriptor,Microsoft.Psi.Clock,System.IProgress{System.Double})">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Operators">
            <summary>
            Extension methods that simplify operator usage.
            </summary>
            <summary>
            Extension methods that simplify operator usage.
            </summary>
            <summary>
            Extension methods that simplify operator usage.
            </summary>
            <summary>
            Extension methods that simplify operator usage.
            </summary>
            <summary>
            Extension methods that simplify operator usage.
            </summary>
            <summary>
            Extension methods that simplify operator usage.
            </summary>
            <summary>
            Extension methods that simplify operator usage.
            </summary>
            <summary>
            Extension methods that simplify operator usage.
            </summary>
            <summary>
            Extension methods that simplify operator usage.
            </summary>
            <summary>
            Extension methods that simplify operator usage.
            </summary>
            <summary>
            Extension methods that simplify operator usage.
            </summary>
            <summary>
            Extension methods that simplify operator usage.
            </summary>
            <summary>
            Extension methods that simplify operator usage.
            </summary>
            <summary>
            Extension methods that simplify operator usage.
            </summary>
            <summary>
            Extension methods that simplify operator usage.
            </summary>
            <summary>
            Extension methods that simplify operator usage.
            </summary>
            <summary>
            Extension methods that simplify operator usage.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Operators.Aggregate``2(Microsoft.Psi.IProducer{``0},``1,System.Func{``1,``0,``1},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Aggregate stream values.
            </summary>
            <typeparam name="TIn">Type of source stream.</typeparam>
            <typeparam name="TOut">Type of output stream.</typeparam>
            <param name="source">Source stream.</param>
            <param name="seed">Initial seed state.</param>
            <param name="func">Aggregation function.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Aggregate``3(Microsoft.Psi.IProducer{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Aggregate stream values.
            </summary>
            <typeparam name="TIn">Type of source stream messages.</typeparam>
            <typeparam name="TAcc">Type of initial seed value.</typeparam>
            <typeparam name="TOut">Type of output stream messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="seed">Initial seed state.</param>
            <param name="func">Aggregation function.</param>
            <param name="selector">Selector function.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Aggregate``1(Microsoft.Psi.IProducer{``0},System.Func{``0,``0,``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Aggregate stream values.
            </summary>
            <typeparam name="T">Type of source/output stream messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="func">Aggregation function.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Aggregate``3(Microsoft.Psi.IProducer{``1},``0,System.Func{``0,``1,Microsoft.Psi.Envelope,Microsoft.Psi.Emitter{``2},``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Aggregate stream values.
            </summary>
            <typeparam name="TAccumulate">Type of initial seed value.</typeparam>
            <typeparam name="TIn">Type of input stream messages.</typeparam>
            <typeparam name="TOut">Type of output stream messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="seed">Initial seed value.</param>
            <param name="func">Aggregation function.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.PipeTo``2(Microsoft.Psi.IProducer{``0},``1,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Connects a stream producer to a stream consumer. As a result, all messages in the stream will be routed to the consumer for processing.
            </summary>
            <typeparam name="TIn">The type of messages in the stream.</typeparam>
            <typeparam name="TC">The type of consumer.</typeparam>
            <param name="source">The source stream to subscribe to.</param>
            <param name="consumer">The consumer (subscriber).</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Consumer (subscriber).</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.CreateConnector``1(Microsoft.Psi.Pipeline,System.String)">
            <summary>
            Creates a connector that exposes the messages it receives as a stream rather than calling a delegate.
            This allows the owning component to apply stream operators to this input.
            </summary>
            <typeparam name="T">The type of messages accepted by this connector.</typeparam>
            <param name="p">The pipeline.</param>
            <param name="name">The name of this connector.</param>
            <returns>The newly created connector.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.BridgeTo``1(Microsoft.Psi.IProducer{``0},Microsoft.Psi.Pipeline,System.String,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Creates a stream in a specified target pipeline, based on a given input stream (that may belong in a different pipeline).
            </summary>
            <typeparam name="T">The type of the messages on the input stream.</typeparam>
            <param name="input">The input stream.</param>
            <param name="targetPipeline">Pipeline to which to bridge.</param>
            <param name="name">An optional name for the connector (defaults to BridgeConnector).</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>The bridged stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.PipeTo``2(Microsoft.Psi.IProducer{``0},``1,System.Boolean,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Connects a stream producer to a stream consumer. As a result, all messages in the stream will be routed to the consumer for processing.
            </summary>
            <remarks>
            This is an internal-only method which provides the option to allow connections between producers and consumers in running pipelines.
            </remarks>
            <typeparam name="TIn">The type of messages in the stream.</typeparam>
            <typeparam name="TC">The type of consumer.</typeparam>
            <param name="source">The source stream to subscribe to.</param>
            <param name="consumer">The consumer (subscriber).</param>
            <param name="allowWhileRunning">An optional flag to allow connections in running pipelines.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Consumer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Name``1(Microsoft.Psi.IProducer{``0},System.String)">
            <summary>
            Assign name (meta) to the stream.
            </summary>
            <typeparam name="T">Type of stream messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="name">Name to give stream.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.ToEnumerable``1(Microsoft.Psi.IProducer{``0},System.Func{``0,System.Boolean},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Convert a stream to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <remarks>
            This may be traversed while the pipeline runs async, or may collect values to be consumed after pipeline disposal.
            </remarks>
            <typeparam name="T">Type of messages for the source stream.</typeparam>
            <param name="source">The source stream.</param>
            <param name="condition">Predicate condition while which values will be enumerated (otherwise infinite).</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Enumerable with elements from the source stream.</returns>
        </member>
        <member name="T:Microsoft.Psi.Operators.StreamEnumerable`1">
            <summary>
            Enumerable stream class.
            </summary>
            <typeparam name="T">Type of stream messages.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Operators.StreamEnumerable`1.#ctor(Microsoft.Psi.IProducer{`0},System.Func{`0,System.Boolean},Microsoft.Psi.DeliveryPolicy{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Operators.StreamEnumerable`1"/> class.
            </summary>
            <param name="source">The source stream to enumerate.</param>
            <param name="predicate">Predicate (filter) function.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
        </member>
        <member name="M:Microsoft.Psi.Operators.StreamEnumerable`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Operators.StreamEnumerable`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Operators.StreamEnumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Operators.Fuse``4(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1},Microsoft.Psi.Interpolator{``1,``2},System.Func{``0,``2,``3},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Fuse with values from a secondary stream based on a specified interpolator.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <typeparam name="TInterpolation">Type of the interpolation result.</typeparam>
            <typeparam name="TOut">Type of output messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream.</param>
            <param name="interpolator">Interpolator to use when fusing the streams.</param>
            <param name="outputCreator">Function mapping the primary and secondary messages to an output message type.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of fused values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Fuse``3(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1},Microsoft.Psi.Interpolator{``1,``2},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Fuse with values from a secondary stream based on a specified interpolator.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <typeparam name="TInterpolation">Type of the interpolation result.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream.</param>
            <param name="interpolator">Interpolator to use when fusing the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of fused values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Fuse``4(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1}},Microsoft.Psi.IProducer{``2},Microsoft.Psi.Interpolator{``2,``3},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1}},Microsoft.Psi.DeliveryPolicy{``2})">
            <summary>
            Fuse with values from a secondary stream based on a specified interpolator.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <typeparam name="TInterpolation">Type of the interpolation result.</typeparam>
            <param name="primary">Primary stream of tuples (arity 2).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="interpolator">Interpolator to use when fusing the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of fused tuple values flattened to arity 3.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Fuse``5(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2}},Microsoft.Psi.IProducer{``3},Microsoft.Psi.Interpolator{``3,``4},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2}},Microsoft.Psi.DeliveryPolicy{``3})">
            <summary>
            Fuse with values from a secondary stream based on a specified interpolator.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <typeparam name="TInterpolation">Type of the interpolation result.</typeparam>
            <param name="primary">Primary stream of tuples (arity 3).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="interpolator">Interpolator to use when fusing the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of fused tuple values flattened to arity 4.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Fuse``6(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3}},Microsoft.Psi.IProducer{``4},Microsoft.Psi.Interpolator{``4,``5},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3}},Microsoft.Psi.DeliveryPolicy{``4})">
            <summary>
            Fuse with values from a secondary stream based on a specified interpolator.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <typeparam name="TInterpolation">Type of the interpolation result.</typeparam>
            <param name="primary">Primary stream of tuples (arity 4).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="interpolator">Interpolator to use when fusing the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of fused tuple values flattened to arity 5.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Fuse``7(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3,``4}},Microsoft.Psi.IProducer{``5},Microsoft.Psi.Interpolator{``5,``6},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3,``4}},Microsoft.Psi.DeliveryPolicy{``5})">
            <summary>
            Fuse with values from a secondary stream based on a specified interpolator.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem5">Type of item 5 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <typeparam name="TInterpolation">Type of the interpolation result.</typeparam>
            <param name="primary">Primary stream of tuples (arity 5).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="interpolator">Interpolator to use when fusing the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of fused tuple values flattened to arity 6.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Fuse``8(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3,``4,``5}},Microsoft.Psi.IProducer{``6},Microsoft.Psi.Interpolator{``6,``7},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3,``4,``5}},Microsoft.Psi.DeliveryPolicy{``6})">
            <summary>
            Fuse with values from a secondary stream based on a specified interpolator.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem5">Type of item 5 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem6">Type of item 6 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <typeparam name="TInterpolation">Type of the interpolation result.</typeparam>
            <param name="primary">Primary stream of tuples (arity 6).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="interpolator">Interpolator to use when fusing the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of fused tuple values flattened to arity 7.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Fuse``3(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2}},Microsoft.Psi.Interpolator{System.ValueTuple{``1,``2},System.ValueTuple{``1,``2}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2}})">
            <summary>
            Fuse with values from a secondary stream based on a specified interpolator.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 2).</param>
            <param name="interpolator">Interpolator to use when fusing the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of fused tuple values flattened to arity 3.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Fuse``4(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3}},Microsoft.Psi.Interpolator{System.ValueTuple{``1,``2,``3},System.ValueTuple{``1,``2,``3}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3}})">
            <summary>
            Fuse with values from a secondary stream based on a specified interpolator.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 3).</param>
            <param name="interpolator">Interpolator to use when fusing the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of fused tuple values flattened to arity 4.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Fuse``5(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4}},Microsoft.Psi.Interpolator{System.ValueTuple{``1,``2,``3,``4},System.ValueTuple{``1,``2,``3,``4}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            Fuse with values from a secondary stream based on a specified interpolator.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 4).</param>
            <param name="interpolator">Interpolator to use when fusing the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of fused tuple values flattened to arity 5.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Fuse``6(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4,``5}},Microsoft.Psi.Interpolator{System.ValueTuple{``1,``2,``3,``4,``5},System.ValueTuple{``1,``2,``3,``4,``5}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4,``5}})">
            <summary>
            Fuse with values from a secondary stream based on a specified interpolator.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem5">Type of item 5 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 5).</param>
            <param name="interpolator">Interpolator to use when fusing the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of fused tuple values flattened to arity 6.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Fuse``7(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4,``5,``6}},Microsoft.Psi.Interpolator{System.ValueTuple{``1,``2,``3,``4,``5,``6},System.ValueTuple{``1,``2,``3,``4,``5,``6}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4,``5,``6}})">
            <summary>
            Fuse with values from a secondary stream based on a specified interpolator.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem5">Type of item 5 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem6">Type of item 6 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 6).</param>
            <param name="interpolator">Interpolator to use when fusing the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of fused tuple values flattened to arity 7.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Fuse``4(Microsoft.Psi.IProducer{``0},System.Collections.Generic.IEnumerable{Microsoft.Psi.IProducer{``1}},Microsoft.Psi.Interpolator{``1,``2},System.Func{``0,``2[],``3},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Fuses a primary stream with an enumeration of secondary streams based on a specified interpolator.
            </summary>
            <typeparam name="TPrimary">Type of primary stream messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary stream messages.</typeparam>
            <typeparam name="TInterpolation">Type of the interpolation result.</typeparam>
            <typeparam name="TOut">Type of output stream messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondaries">Enumeration of secondary streams.</param>
            <param name="interpolator">Interpolator to use when fusing the streams.</param>
            <param name="outputCreator">Mapping function from primary and secondary messages to output.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondariesDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Fuse``1(System.Collections.Generic.IEnumerable{Microsoft.Psi.IProducer{``0}},Microsoft.Psi.Interpolator{``0,``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Fuses an enumeration of streams into a vector stream, based on a specified interpolator.
            </summary>
            <typeparam name="TIn">Type of input stream messages.</typeparam>
            <param name="inputs">Collection of input streams.</param>
            <param name="interpolator">Interpolator to use when fusing the streams.</param>
            <param name="deliveryPolicy">An optional delivery policy to use for the streams.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Interpolate``2(Microsoft.Psi.IProducer{``0},System.TimeSpan,Microsoft.Psi.Interpolator{``0,``1},System.Nullable{System.DateTime},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Interpolate a stream using a specified interpolator at a given sampling interval.
            </summary>
            <typeparam name="T">Type of source messages.</typeparam>
            <typeparam name="TInterpolation">Type of the interpolation result.</typeparam>
            <param name="source">Source stream.</param>
            <param name="samplingInterval">Interval at which to apply the interpolator.</param>
            <param name="interpolator">Interpolator to use for generating results.</param>
            <param name="alignmentDateTime">If non-null, this parameter specifies a time to align the sampling messages with. If the parameter
            is non-null, the messages will have originating times that align with (i.e., are an integral number of intervals away from) the
            specified alignment time.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Interpolate``3(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1},Microsoft.Psi.Interpolator{``0,``2},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Interpolate a stream using a specified interpolator at interpolation points
            given by a clock stream.
            </summary>
            <typeparam name="T">Type of source messages.</typeparam>
            <typeparam name="TClock">Type of messages on the clock stream.</typeparam>
            <typeparam name="TInterpolation">Type of the interpolation result.</typeparam>
            <param name="source">Source stream.</param>
            <param name="clock">Clock stream that dictates the interpolation points.</param>
            <param name="interpolator">Interpolator to use for generating results.</param>
            <param name="sourceDeliveryPolicy">An optional delivery policy for the source stream.</param>
            <param name="clockDeliveryPolicy">An optional delivery policy for the clock stream.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sample``1(Microsoft.Psi.IProducer{``0},System.TimeSpan,System.TimeSpan,System.Nullable{System.DateTime},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Sample a stream at a given sampling interval, by selecting the nearest message
            within a given tolerance to the interpolation point.
            </summary>
            <typeparam name="T">Type of source (and output) messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="samplingInterval">Interval at which to apply the interpolator.</param>
            <param name="tolerance">The tolerance within which to search for the nearest message.</param>
            <param name="alignmentDateTime">If non-null, this parameter specifies a time to align the sampling messages with. If the parameter
            is non-null, the messages will have originating times that align with (i.e., are an integral number of intervals away from) the
            specified alignment time.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Sampled stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sample``1(Microsoft.Psi.IProducer{``0},System.TimeSpan,Microsoft.Psi.RelativeTimeInterval,System.Nullable{System.DateTime},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Sample a stream at a given sampling interval, by selecting the nearest message
            within a relative time interval to the interpolation point.
            </summary>
            <typeparam name="T">Type of source (and output) messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="samplingInterval">Interval at which to apply the interpolator.</param>
            <param name="relativeTimeInterval">The relative time interval within which to search for the nearest message.
            If the parameter is not specified the <see cref="F:Microsoft.Psi.RelativeTimeInterval.Infinite"/>relative time interval is
            used,resulting in sampling the nearest point to the clock signal on the source stream.</param>
            <param name="alignmentDateTime">If non-null, this parameter specifies a time to align the sampling messages with. If the parameter
            is non-null, the messages will have originating times that align with (i.e., are an integral number of intervals away from) the
            specified alignment time.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Sampled stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sample``2(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Sample a stream at interpolation points given by a clock stream, by selecting the nearest
            message within a given tolerance to the interpolation point.
            </summary>
            <typeparam name="T">Type of source and output messages.</typeparam>
            <typeparam name="TClock">Type of messages on the clock stream.</typeparam>
            <param name="source">Source stream.</param>
            <param name="clock">Clock stream that dictates the interpolation points.</param>
            <param name="tolerance">The tolerance within which to search for the nearest message.</param>
            <param name="sourceDeliveryPolicy">An optional delivery policy for the source stream.</param>
            <param name="clockDeliveryPolicy">An optional delivery policy for the clock stream.</param>
            <returns>Sampled stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sample``2(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1},Microsoft.Psi.RelativeTimeInterval,Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Samples a stream at interpolation points given by a clock stream, by selecting the nearest
            message within a relative time interval to the interpolation point.
            </summary>
            <typeparam name="T">Type of source and output messages.</typeparam>
            <typeparam name="TClock">Type of messages on the clock stream.</typeparam>
            <param name="source">Source stream.</param>
            <param name="clock">Clock stream that dictates the interpolation points.</param>
            <param name="relativeTimeInterval">The relative time interval within which to search for the nearest message.
            If the parameter is not specified the <see cref="F:Microsoft.Psi.RelativeTimeInterval.Infinite"/>relative time interval is
            used,resulting in sampling the nearest point to the clock signal on the source stream.</param>
            <param name="sourceDeliveryPolicy">An optional delivery policy for the source stream.</param>
            <param name="clockDeliveryPolicy">An optional delivery policy for the clock stream.</param>
            <returns>Sampled stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``3(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1},Microsoft.Psi.ReproducibleInterpolator{``1},System.Func{``0,``1,``2},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Join with values from a secondary stream based on a specified reproducible interpolator.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <typeparam name="TOut">Type of output messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream.</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="outputCreator">Function mapping the primary and secondary messages to an output message type.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``2(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Join with values with the same originating time from a secondary stream.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Exact``1"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``2(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified time tolerance.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream.</param>
            <param name="tolerance">Time tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``2(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1},Microsoft.Psi.RelativeTimeInterval,Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified relative time interval.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream.</param>
            <param name="relativeTimeInterval">Relative time interval tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``2(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1},Microsoft.Psi.ReproducibleInterpolator{``1},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Join with values from a secondary stream based on a specified reproducible interpolator.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream.</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``3(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1}},Microsoft.Psi.IProducer{``2},Microsoft.Psi.ReproducibleInterpolator{``2},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1}},Microsoft.Psi.DeliveryPolicy{``2})">
            <summary>
            Join with values from a secondary stream based on a specified reproducible interpolator.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 2).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 3.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``3(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1}},Microsoft.Psi.IProducer{``2},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1}},Microsoft.Psi.DeliveryPolicy{``2})">
            <summary>
            Join with values with the same originating time from a secondary stream.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Exact``1"/> interpolator.</remarks>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 2).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 3.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``3(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1}},Microsoft.Psi.IProducer{``2},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1}},Microsoft.Psi.DeliveryPolicy{``2})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified time tolerance.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 2).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="tolerance">Time tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 3.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``3(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1}},Microsoft.Psi.IProducer{``2},Microsoft.Psi.RelativeTimeInterval,Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1}},Microsoft.Psi.DeliveryPolicy{``2})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified relative time interval.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 2).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="relativeTimeInterval">Relative time interval tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 3.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``4(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2}},Microsoft.Psi.IProducer{``3},Microsoft.Psi.ReproducibleInterpolator{``3},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2}},Microsoft.Psi.DeliveryPolicy{``3})">
            <summary>
            Join with values from a secondary stream based on a specified reproducible interpolator.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 3).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 4.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``4(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2}},Microsoft.Psi.IProducer{``3},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2}},Microsoft.Psi.DeliveryPolicy{``3})">
            <summary>
            Join with values with the same originating time from a secondary stream.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Exact``1"/> interpolator.</remarks>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 3).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 4.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``4(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2}},Microsoft.Psi.IProducer{``3},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2}},Microsoft.Psi.DeliveryPolicy{``3})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified time tolerance.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 3).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="tolerance">Time tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 4.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``4(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2}},Microsoft.Psi.IProducer{``3},Microsoft.Psi.RelativeTimeInterval,Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2}},Microsoft.Psi.DeliveryPolicy{``3})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified relative time interval.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 3).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="relativeTimeInterval">Relative time interval tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 4.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``5(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3}},Microsoft.Psi.IProducer{``4},Microsoft.Psi.ReproducibleInterpolator{``4},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3}},Microsoft.Psi.DeliveryPolicy{``4})">
            <summary>
            Join with values from a secondary stream based on a specified reproducible interpolator.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 4).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 5.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``5(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3}},Microsoft.Psi.IProducer{``4},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3}},Microsoft.Psi.DeliveryPolicy{``4})">
            <summary>
            Join with values with the same originating time from a secondary stream.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Exact``1"/> interpolator.</remarks>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 4).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 5.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``5(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3}},Microsoft.Psi.IProducer{``4},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3}},Microsoft.Psi.DeliveryPolicy{``4})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified time tolerance.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 4).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="tolerance">Time tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 5.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``5(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3}},Microsoft.Psi.IProducer{``4},Microsoft.Psi.RelativeTimeInterval,Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3}},Microsoft.Psi.DeliveryPolicy{``4})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified relative time interval.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 4).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="relativeTimeInterval">Relative time interval tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 5.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``6(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3,``4}},Microsoft.Psi.IProducer{``5},Microsoft.Psi.ReproducibleInterpolator{``5},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3,``4}},Microsoft.Psi.DeliveryPolicy{``5})">
            <summary>
            Join with values from a secondary stream based on a specified reproducible interpolator.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem5">Type of item 5 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 5).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 6.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``6(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3,``4}},Microsoft.Psi.IProducer{``5},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3,``4}},Microsoft.Psi.DeliveryPolicy{``5})">
            <summary>
            Join with values with the same originating time from a secondary stream.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Exact``1"/> interpolator.</remarks>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem5">Type of item 5 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 6).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 6.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``6(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3,``4}},Microsoft.Psi.IProducer{``5},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3,``4}},Microsoft.Psi.DeliveryPolicy{``5})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified time tolerance.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem5">Type of item 5 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 5).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="tolerance">Time tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 6.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``6(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3,``4}},Microsoft.Psi.IProducer{``5},Microsoft.Psi.RelativeTimeInterval,Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3,``4}},Microsoft.Psi.DeliveryPolicy{``5})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified relative time interval.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem5">Type of item 5 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 5).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="relativeTimeInterval">Relative time interval tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 6.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``7(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3,``4,``5}},Microsoft.Psi.IProducer{``6},Microsoft.Psi.ReproducibleInterpolator{``6},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3,``4,``5}},Microsoft.Psi.DeliveryPolicy{``6})">
            <summary>
            Join with values from a secondary stream based on a specified reproducible interpolator.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem5">Type of item 5 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem6">Type of item 6 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 6).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 7.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``7(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3,``4,``5}},Microsoft.Psi.IProducer{``6},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3,``4,``5}},Microsoft.Psi.DeliveryPolicy{``6})">
            <summary>
            Join with values with the same originating time from a secondary stream.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Exact``1"/> interpolator.</remarks>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem5">Type of item 5 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem6">Type of item 6 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 6).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 7.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``7(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3,``4,``5}},Microsoft.Psi.IProducer{``6},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3,``4,``5}},Microsoft.Psi.DeliveryPolicy{``6})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified time tolerance.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem5">Type of item 5 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem6">Type of item 6 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 6).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="tolerance">Time tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 7.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``7(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3,``4,``5}},Microsoft.Psi.IProducer{``6},Microsoft.Psi.RelativeTimeInterval,Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3,``4,``5}},Microsoft.Psi.DeliveryPolicy{``6})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified relative time interval.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem5">Type of item 5 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem6">Type of item 6 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 6).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="relativeTimeInterval">Relative time interval tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 7.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``3(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2}},Microsoft.Psi.ReproducibleInterpolator{System.ValueTuple{``1,``2}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2}})">
            <summary>
            Join with values from a secondary stream based on a specified reproducible interpolator.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 2).</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 3.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``3(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2}})">
            <summary>
            Join with values with the same originating time from a secondary stream.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Exact``1"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 2).</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 3.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``3(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2}})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified time tolerance.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 2).</param>
            <param name="tolerance">Time tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 3.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``3(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2}},Microsoft.Psi.RelativeTimeInterval,Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2}})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified relative time interval.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 2).</param>
            <param name="relativeTimeInterval">Relative time interval tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 3.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``4(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3}},Microsoft.Psi.ReproducibleInterpolator{System.ValueTuple{``1,``2,``3}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3}})">
            <summary>
            Join with values from a secondary stream based on a specified reproducible interpolator.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 3).</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 4.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``4(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3}})">
            <summary>
            Join with values with the same originating time from a secondary stream.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Exact``1"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 3).</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 4.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``4(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3}})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified time tolerance.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 3).</param>
            <param name="tolerance">Time tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 4.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``4(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3}},Microsoft.Psi.RelativeTimeInterval,Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3}})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified relative time interval.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 3).</param>
            <param name="relativeTimeInterval">Relative time interval tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 4.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``5(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4}},Microsoft.Psi.ReproducibleInterpolator{System.ValueTuple{``1,``2,``3,``4}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            Join with values from a secondary stream based on a specified reproducible interpolator.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 4).</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 5.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``5(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            Join with values with the same originating time from a secondary stream.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Exact``1"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 4).</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 5.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``5(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified time tolerance.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 4).</param>
            <param name="tolerance">Time tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 5.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``5(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4}},Microsoft.Psi.RelativeTimeInterval,Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified relative time interval.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 4).</param>
            <param name="relativeTimeInterval">Relative time interval tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 5.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``6(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4,``5}},Microsoft.Psi.ReproducibleInterpolator{System.ValueTuple{``1,``2,``3,``4,``5}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4,``5}})">
            <summary>
            Join with values from a secondary stream based on a specified reproducible interpolator.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem5">Type of item 5 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 5).</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 6.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``6(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4,``5}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4,``5}})">
            <summary>
            Join with values with the same originating time from a secondary stream.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Exact``1"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem5">Type of item 5 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 5).</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 6.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``6(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4,``5}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4,``5}})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified time tolerance.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem5">Type of item 5 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 5).</param>
            <param name="tolerance">Time tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 6.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``6(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4,``5}},Microsoft.Psi.RelativeTimeInterval,Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4,``5}})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified relative time interval.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem5">Type of item 5 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 5).</param>
            <param name="relativeTimeInterval">Relative time interval tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 6.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``7(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4,``5,``6}},Microsoft.Psi.ReproducibleInterpolator{System.ValueTuple{``1,``2,``3,``4,``5,``6}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4,``5,``6}})">
            <summary>
            Join with values from a secondary stream based on a specified reproducible interpolator.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem5">Type of item 5 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem6">Type of item 6 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 6).</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 7.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``7(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4,``5,``6}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4,``5,``6}})">
            <summary>
            Join with values with the same originating time from a secondary stream.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Exact``1"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem5">Type of item 5 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem6">Type of item 6 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 6).</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 7.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``7(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4,``5,``6}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4,``5,``6}})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified time tolerance.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem5">Type of item 5 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem6">Type of item 6 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 6).</param>
            <param name="tolerance">Time tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 7.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``7(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4,``5,``6}},Microsoft.Psi.RelativeTimeInterval,Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4,``5,``6}})">
            <summary>
            Join with the nearest values from a secondary stream, within a specified relative time interval.
            </summary>
            <remarks>Uses the <see cref="M:Microsoft.Psi.Reproducible.Nearest``1(Microsoft.Psi.RelativeTimeInterval)"/> interpolator.</remarks>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem5">Type of item 5 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem6">Type of item 6 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 6).</param>
            <param name="relativeTimeInterval">Relative time interval tolerance.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of joined tuple values flattened to arity 7.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``4(Microsoft.Psi.IProducer{``0},System.Collections.Generic.IEnumerable{Microsoft.Psi.IProducer{``1}},Microsoft.Psi.ReproducibleInterpolator{``1,``2},System.Func{``0,``2[],``3},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Joins a primary stream with an enumeration of secondary streams based on a specified reproducible interpolator.
            </summary>
            <typeparam name="TPrimary">Type of primary stream messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary stream messages.</typeparam>
            <typeparam name="TInterpolation">Type of the interpolation result.</typeparam>
            <typeparam name="TOut">Type of output stream messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondaries">Enumeration of secondary streams.</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="outputCreator">Mapping function from primary and secondary messages to output.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondariesDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``1(System.Collections.Generic.IEnumerable{Microsoft.Psi.IProducer{``0}},Microsoft.Psi.ReproducibleInterpolator{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Joins an enumeration of streams into a vector stream, based on a specified reproducible interpolator.
            </summary>
            <typeparam name="TIn">Type of input stream messages.</typeparam>
            <param name="inputs">Collection of input streams.</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="deliveryPolicy">An optional delivery policy to use for the streams.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``2(Microsoft.Psi.IProducer{System.Int32},System.Collections.Generic.IEnumerable{Microsoft.Psi.IProducer{``0}},Microsoft.Psi.ReproducibleInterpolator{``0,``1},Microsoft.Psi.DeliveryPolicy{System.Int32},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Joins a primary stream of integers with an enumeration of secondary streams based on a specified reproducible interpolator.
            </summary>
            <typeparam name="TIn">Type of input messages.</typeparam>
            <typeparam name="TInterpolation">Type of the interpolation result.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="inputs">Collection of secondary streams.</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``4(Microsoft.Psi.IProducer{System.Collections.Generic.Dictionary{``1,System.Int32}},System.Collections.Generic.IEnumerable{Microsoft.Psi.IProducer{``0}},Microsoft.Psi.ReproducibleInterpolator{``0,``2},System.Func{System.Collections.Generic.Dictionary{``1,System.Int32},``2[],``3},Microsoft.Psi.DeliveryPolicy{System.Collections.Generic.Dictionary{``1,System.Int32}},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Sparse vector join.
            </summary>
            <typeparam name="TIn">Type of input messages.</typeparam>
            <typeparam name="TKey">Type of key values.</typeparam>
            <typeparam name="TInterpolation">Type of the interpolation result.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="inputs">Collection of secondary streams.</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="outputCreator">The output creator function.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Join``3(Microsoft.Psi.IProducer{System.Collections.Generic.Dictionary{``1,System.Int32}},System.Collections.Generic.IEnumerable{Microsoft.Psi.IProducer{``0}},Microsoft.Psi.ReproducibleInterpolator{``0,``2},Microsoft.Psi.DeliveryPolicy{System.Collections.Generic.Dictionary{``1,System.Int32}},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Sparse vector join.
            </summary>
            <typeparam name="TIn">Type of input messages.</typeparam>
            <typeparam name="TKey">Type of key values.</typeparam>
            <typeparam name="TInterpolation">Type of the interpolation result.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="inputs">Collection of secondary streams.</param>
            <param name="interpolator">Reproducible interpolator to use when joining the streams.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Merge``1(System.Collections.Generic.IEnumerable{Microsoft.Psi.IProducer{``0}},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Merge one or more streams (T) into a single stream (Message{T}) interleaved in wall-clock time.
            </summary>
            <remarks>Messages are produced in the order they arrive, in wall-clock time; potentially out of originating-time order.</remarks>
            <typeparam name="T">Type of messages.</typeparam>
            <param name="inputs">Collection of homogeneous inputs.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of merged messages.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Merge``1(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Merge two streams (T) into a single stream (Message{T}) interleaved in wall-clock time.
            </summary>
            <remarks>Messages are produced in the order they arrive, in wall-clock time; potentially out of originating-time order.</remarks>
            <typeparam name="T">Type of messages.</typeparam>
            <param name="input1">First input stream.</param>
            <param name="input2">Second input stream with same message type.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of merged messages.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.ToObservable``1(Microsoft.Psi.IProducer{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Convert a stream to an <see cref="T:System.IObservable`1"/>.
            </summary>
            <typeparam name="T">Type of messages for the source stream.</typeparam>
            <param name="stream">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Observable with elements from the source stream.</returns>
        </member>
        <member name="T:Microsoft.Psi.Operators.StreamObservable`1">
            <summary>
            Observable stream class.
            </summary>
            <typeparam name="T">Type of stream messages.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Operators.StreamObservable`1.#ctor(Microsoft.Psi.IProducer{`0},Microsoft.Psi.DeliveryPolicy{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Operators.StreamObservable`1"/> class.
            </summary>
            <param name="stream">The source stream to observe.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
        </member>
        <member name="P:Microsoft.Psi.Operators.StreamObservable`1.HasSubscribers">
            <summary>
            Gets a value indicating whether this observable stream has subscribers.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Operators.StreamObservable`1.Subscribe(System.IObserver{`0})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``3(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1},System.Func{``0,``1,``2},``1,Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <typeparam name="TOut">Type of output messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream.</param>
            <param name="outputCreator">Mapping function from primary/secondary pairs to output type.</param>
            <param name="initialValue">An initial value to be used until the first secondary message is received.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``3(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1},System.Func{``0,``1,``2},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <typeparam name="TOut">Type of output messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream.</param>
            <param name="outputCreator">Mapping function from primary/secondary pairs to output type.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <remarks>Primary messages will be dropped until the first secondary message is received (no `initialValue` provided).</remarks>
            <returns>Stream of output values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``2(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1},``1,Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream.</param>
            <param name="initialValue">An initial value to be used until the first secondary message is received.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``2(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <remarks>Primary messages will be dropped until the first secondary message is received (no `initialValue` provided).</remarks>
            <returns>Stream of output tuples.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``3(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1}},Microsoft.Psi.IProducer{``2},``2,Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1}},Microsoft.Psi.DeliveryPolicy{``2})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 2).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="initialValue">An initial value to be used until the first secondary message is received.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 3.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``3(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1}},Microsoft.Psi.IProducer{``2},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1}},Microsoft.Psi.DeliveryPolicy{``2})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 2).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 3.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``4(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2}},Microsoft.Psi.IProducer{``3},``3,Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2}},Microsoft.Psi.DeliveryPolicy{``3})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 3).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="initialValue">An initial value to be used until the first secondary message is received.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 4.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``4(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2}},Microsoft.Psi.IProducer{``3},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2}},Microsoft.Psi.DeliveryPolicy{``3})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 3).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 4.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``5(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3}},Microsoft.Psi.IProducer{``4},``4,Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3}},Microsoft.Psi.DeliveryPolicy{``4})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 4).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="initialValue">An initial value to be used until the first secondary message is received.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 5.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``5(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3}},Microsoft.Psi.IProducer{``4},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3}},Microsoft.Psi.DeliveryPolicy{``4})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 4).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 5.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``6(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3,``4}},Microsoft.Psi.IProducer{``5},``5,Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3,``4}},Microsoft.Psi.DeliveryPolicy{``5})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem5">Type of item 5 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 5).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="initialValue">An initial value to be used until the first secondary message is received.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 6.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``6(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3,``4}},Microsoft.Psi.IProducer{``5},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3,``4}},Microsoft.Psi.DeliveryPolicy{``5})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem5">Type of item 5 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 5).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 6.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``7(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3,``4,``5}},Microsoft.Psi.IProducer{``6},``6,Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3,``4,``5}},Microsoft.Psi.DeliveryPolicy{``6})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem5">Type of item 5 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem6">Type of item 6 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 6).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="initialValue">An initial value to be used until the first secondary message is received.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 7.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``7(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1,``2,``3,``4,``5}},Microsoft.Psi.IProducer{``6},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1,``2,``3,``4,``5}},Microsoft.Psi.DeliveryPolicy{``6})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimaryItem1">Type of item 1 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem2">Type of item 2 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem3">Type of item 3 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem4">Type of item 4 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem5">Type of item 5 of primary messages.</typeparam>
            <typeparam name="TPrimaryItem6">Type of item 6 of primary messages.</typeparam>
            <typeparam name="TSecondary">Type of secondary messages.</typeparam>
            <param name="primary">Primary stream of tuples (arity 6).</param>
            <param name="secondary">Secondary stream.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 7.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``3(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2}},System.ValueTuple{``1,``2},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2}})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 2).</param>
            <param name="initialValue">An initial value to be used until the first secondary message is received.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 3.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``3(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2}})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 2).</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 3.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``4(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3}},System.ValueTuple{``1,``2,``3},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3}})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 3).</param>
            <param name="initialValue">An initial value to be used until the first secondary message is received.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 4.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``4(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3}})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 3).</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 4.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``5(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4}},System.ValueTuple{``1,``2,``3,``4},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 4).</param>
            <param name="initialValue">An initial value to be used until the first secondary message is received.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 5.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``5(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 4).</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 5.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``6(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4,``5}},System.ValueTuple{``1,``2,``3,``4,``5},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4,``5}})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem5">Type of item 5 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 5).</param>
            <param name="initialValue">An initial value to be used until the first secondary message is received.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 6.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``6(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4,``5}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4,``5}})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem5">Type of item 5 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 5).</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 6.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``7(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4,``5,``6}},System.ValueTuple{``1,``2,``3,``4,``5,``6},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4,``5,``6}})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem5">Type of item 5 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem6">Type of item 6 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 6).</param>
            <param name="initialValue">An initial value to be used until the first secondary message is received.</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 7.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Pair``7(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{System.ValueTuple{``1,``2,``3,``4,``5,``6}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``1,``2,``3,``4,``5,``6}})">
            <summary>
            Pair with currently available value from a secondary stream.
            </summary>
            <typeparam name="TPrimary">Type of primary messages.</typeparam>
            <typeparam name="TSecondaryItem1">Type of item 1 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem2">Type of item 2 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem3">Type of item 3 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem4">Type of item 4 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem5">Type of item 5 of secondary messages.</typeparam>
            <typeparam name="TSecondaryItem6">Type of item 6 of secondary messages.</typeparam>
            <param name="primary">Primary stream.</param>
            <param name="secondary">Secondary stream of tuples (arity 6).</param>
            <param name="primaryDeliveryPolicy">An optional delivery policy for the primary stream.</param>
            <param name="secondaryDeliveryPolicy">An optional delivery policy for the secondary stream(s).</param>
            <returns>Stream of output tuples flattened to arity 7.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Where``1(Microsoft.Psi.IProducer{``0},System.Func{``0,Microsoft.Psi.Envelope,System.Boolean},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Filter messages to those where a given condition is met.
            </summary>
            <typeparam name="T">Type of source/output messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="condition">Predicate function by which to filter messages.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Where``1(Microsoft.Psi.IProducer{``0},System.Predicate{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Filter messages to those where a given condition is met.
            </summary>
            <typeparam name="T">Type of source/output messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="condition">Predicate function by which to filter messages.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.First``1(Microsoft.Psi.IProducer{``0},System.Int32,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Filter stream to the first n messages.
            </summary>
            <typeparam name="T">Type of source/output messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="number">Number of messages.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.First``1(Microsoft.Psi.IProducer{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Filter stream to the first message (single-message stream).
            </summary>
            <typeparam name="T">Type of source/output messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Process``2(Microsoft.Psi.IProducer{``0},System.Action{``0,Microsoft.Psi.Envelope,Microsoft.Psi.Emitter{``1}},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Executes a transform action for each item in the input stream. The action can output zero or more results by posting them to the emitter provided as an argument.
            </summary>
            <typeparam name="TIn">The input message type.</typeparam>
            <typeparam name="TOut">The output message type.</typeparam>
            <param name="source">The source stream to subscribe to.</param>
            <param name="transform">The action to perform on every message in the source stream.
            The action parameters are the message, the envelope and an emitter to post results to.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A stream of type <typeparamref name="TOut"/>.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Select``2(Microsoft.Psi.IProducer{``0},System.Func{``0,Microsoft.Psi.Envelope,``1},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Executes a transform function for each item in the input stream, generating a new stream with the values returned by the function.
            The function has access to the envelope of the input message.
            </summary>
            <typeparam name="TIn">The input message type.</typeparam>
            <typeparam name="TOut">The output message type.</typeparam>
            <param name="source">The source stream to subscribe to.</param>
            <param name="selector">The function to perform on every message in the source stream. The function takes two parameters, the input message and its envelope.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A stream of type <typeparamref name="TOut"/>.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Select``2(Microsoft.Psi.IProducer{``0},System.Func{``0,``1},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Executes a transform function for each item in the input stream, generating a new stream with the values returned by the function.
            </summary>
            <typeparam name="TIn">The input message type.</typeparam>
            <typeparam name="TOut">The output message type.</typeparam>
            <param name="source">The source stream to subscribe to.</param>
            <param name="selector">The function to perform on every message in the source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A stream of type <typeparamref name="TOut"/>.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.NullableSelect``2(Microsoft.Psi.IProducer{System.Nullable{``0}},System.Func{``0,Microsoft.Psi.Envelope,``1},Microsoft.Psi.DeliveryPolicy{System.Nullable{``0}})">
            <summary>
            Executes a transform function for each non-null item in the input stream, generating a new stream with the values returned by the function, or null if the input was null.
            The function has access to the envelope of the input message.
            </summary>
            <typeparam name="TIn">The input message type.</typeparam>
            <typeparam name="TOut">The output message type.</typeparam>
            <param name="source">The source stream to subscribe to.</param>
            <param name="selector">The function to perform on every message in the source stream. The function takes two parameters, the input message and its envelope.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A stream of type <typeparamref name="TOut"/>.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.NullableSelect``2(Microsoft.Psi.IProducer{System.Nullable{``0}},System.Func{``0,``1},Microsoft.Psi.DeliveryPolicy{System.Nullable{``0}})">
            <summary>
            Executes a transform function for each non-null item in the input stream, generating a new stream with the values returned by the function, or null if the input was null.
            </summary>
            <typeparam name="TIn">The input message type.</typeparam>
            <typeparam name="TOut">The output message type.</typeparam>
            <param name="source">The source stream to subscribe to.</param>
            <param name="selector">The function to perform on every message in the source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A stream of type <typeparamref name="TOut"/>.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Item1``2(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1}},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1}})">
            <summary>
            Decomposes a stream of tuples into a stream containing just the first item of each tuple.
            </summary>
            <typeparam name="T1">The type of the first item in the tuple.</typeparam>
            <typeparam name="T2">The type of the second item in the tuple.</typeparam>
            <param name="source">The source stream of tuples.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A stream containing the first item of each tuple.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Item2``2(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1}},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1}})">
            <summary>
            Decomposes a stream of tuples into a stream containing just the second item of each tuple.
            </summary>
            <typeparam name="T1">The type of the first item in the tuple.</typeparam>
            <typeparam name="T2">The type of the second item in the tuple.</typeparam>
            <param name="source">The source stream of tuples.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A stream containing the second item of each tuple.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Flip``2(Microsoft.Psi.IProducer{System.ValueTuple{``0,``1}},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{``0,``1}})">
            <summary>
            Flip takes a tuple of 2 elements and flips their order.
            </summary>
            <typeparam name="T1">Type of first element.</typeparam>
            <typeparam name="T2">Type of second element.</typeparam>
            <param name="source">Source to read tuples from.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Returns a new producer with flipped tuples.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Do``1(Microsoft.Psi.IProducer{``0},System.Action{``0,Microsoft.Psi.Envelope},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Executes an action for each item in the input stream and then outputs the item. If the action modifies the item, the resulting stream reflects the change.
            </summary>
            <typeparam name="T">The input message type.</typeparam>
            <param name="source">The source stream to subscribe to.</param>
            <param name="action">The action to perform on every message in the source stream. The action has access to the message envelope.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A stream of the same type as the source stream, containing one item for each input item, possibly modified by the action delegate.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Do``1(Microsoft.Psi.IProducer{``0},System.Action{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Executes an action for each item in the input stream and then outputs the item. If the action modifies the item, the resulting stream reflects the change.
            </summary>
            <typeparam name="T">The input message type.</typeparam>
            <param name="source">The source stream to subscribe to.</param>
            <param name="action">The action to perform on every message in the source stream. The action has access to the message envelope.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A stream of the same type as the source stream, containing one item for each input item, possibly modified by the action delegate.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.EditStream``1(Microsoft.Psi.IProducer{``0},System.Collections.Generic.IEnumerable{System.ValueTuple{System.Boolean,``0,System.DateTime}})">
            <summary>
            Edit messages in a stream; applying updates/inserts and deletes.
            </summary>
            <typeparam name="T">The input message type.</typeparam>
            <param name="source">The source stream to edit.</param>
            <param name="edits">A sequence of edits to be applied. Whether to update/insert or delete, an optional message to upsert and originating times.</param>
            <returns>A stream of the same type as the source stream with edits applied.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Count``1(Microsoft.Psi.IProducer{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Returns a stream of int values representing the number of elements in a stream.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of counts.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Count``1(Microsoft.Psi.IProducer{``0},System.Predicate{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Returns a stream of ints representing the number of elements in a stream satisfying a condition.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="condition">A function to test each element for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of counts.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.LongCount``1(Microsoft.Psi.IProducer{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Returns a stream of long values representing the number of elements in a stream.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of counts.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.LongCount``1(Microsoft.Psi.IProducer{``0},System.Predicate{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Returns a stream of long values representing the number of elements in a stream satisfying a condition.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="condition">A function to test each element for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of counts.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Int32},Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the sum of a stream of int values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sums.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Int32},System.Predicate{System.Int32},Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the sum of a stream of int values satisfying a condition.
            </summary>
            <param name="source">The source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sums.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Int64},Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the sum of a stream of long values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sums.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Int64},System.Predicate{System.Int64},Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the sum of a stream of long values satisfying a condition.
            </summary>
            <param name="source">The source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sums.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Single},Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the sum of a stream of float values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sums.</returns>
            <remarks>
            This operator considers the sum of a number and NaN as NaN. Consequently, once a value
            of NaN is encountered on the source stream, the corresponding output value and all
            subsequent output values will be NaN.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Single},System.Predicate{System.Single},Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the sum of a stream of float values satisfying a condition.
            </summary>
            <param name="source">The source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sums.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Double},Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the sum of a stream of double values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sums.</returns>
            <remarks>
            This operator considers the sum of a number and NaN as NaN. Consequently, once a value
            of NaN is encountered on the source stream, the corresponding output value and all
            subsequent output values will be NaN.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Double},System.Predicate{System.Double},Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the sum of a stream of double values satisfying a condition.
            </summary>
            <param name="source">The source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sums.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Decimal},Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the sum of a stream of decimal values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sums.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Decimal},System.Predicate{System.Decimal},Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the sum of a stream of decimal values satisfying a condition.
            </summary>
            <param name="source">The source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sums.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min``1(Microsoft.Psi.IProducer{``0},System.Collections.Generic.IComparer{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Compute the minimum of a stream of numeric values.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="comparer">Comparer used to compare values.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min``1(Microsoft.Psi.IProducer{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Compute the minimum of a stream of numeric values.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min``1(Microsoft.Psi.IProducer{``0},System.Predicate{``0},System.Collections.Generic.IComparer{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Compute the minimum of a stream of numeric values.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="comparer">Comparer used to compare values.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min``1(Microsoft.Psi.IProducer{``0},System.Predicate{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Compute the minimum of a stream of numeric values.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Double},Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the minimum of a stream of double values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum values.</returns>
            <remarks>
            This operator considers the minimum of a number and NaN to be NaN. Consequently, once a
            value of NaN is encountered on the source stream, the corresponding output value and all
            subsequent output values will be NaN.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Single},Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the minimum of a stream of float values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum values.</returns>
            <remarks>
            This operator considers the minimum of a number and NaN to be NaN. Consequently, once a
            value of NaN is encountered on the source stream, the corresponding output value and all
            subsequent output values will be NaN.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max``1(Microsoft.Psi.IProducer{``0},System.Collections.Generic.IComparer{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Compute the maximum of a stream of numeric values.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="comparer">Comparer used to compare values.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max``1(Microsoft.Psi.IProducer{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Compute the maximum of a stream of numeric values.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max``1(Microsoft.Psi.IProducer{``0},System.Predicate{``0},System.Collections.Generic.IComparer{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Compute the maximum of a stream of numeric values.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="comparer">Comparer used to compare values.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max``1(Microsoft.Psi.IProducer{``0},System.Predicate{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Compute the maximum of a stream of numeric values.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Double},Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the maximum of a stream of double values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum values.</returns>
            <remarks>
            This operator considers the maximum of a number and NaN to be NaN. Consequently, once a
            value of NaN is encountered on the source stream, the corresponding output value and all
            subsequent output values will be NaN.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Single},Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the maximum of a stream of float values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum values.</returns>
            <remarks>
            This operator considers the maximum of a number and NaN to be NaN. Consequently, once a
            value of NaN is encountered on the source stream, the corresponding output value and all
            subsequent output values will be NaN.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Int32},Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the average of a stream of int values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Int32},System.Predicate{System.Int32},Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the average of a stream of int values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Int64},Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the average of a stream of long values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Int64},System.Predicate{System.Int64},Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the average of a stream of long values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Single},Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the average of a stream of float values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average values.</returns>
            <remarks>
            This operator considers the average of a sequence of values containing NaN to be NaN.
            Consequently, once a value of NaN is encountered on the source stream, the corresponding
            output value and all subsequent output values will be NaN.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Single},System.Predicate{System.Single},Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the average of a stream of float values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Double},Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the average of a stream of double values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average values.</returns>
            <remarks>
            This operator considers the average of a sequence of values containing NaN to be NaN.
            Consequently, once a value of NaN is encountered on the source stream, the corresponding
            output value and all subsequent output values will be NaN.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Double},System.Predicate{System.Double},Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the average of a stream of double values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Decimal},Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the average of a stream of decimal values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Decimal},System.Predicate{System.Decimal},Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the average of a stream of decimal values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Int32},Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute standard deviation of (int) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Int32},System.Predicate{System.Int32},Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute standard deviation of (int) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Int64},Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute standard deviation of (long) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Int64},System.Predicate{System.Int64},Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute standard deviation of (long) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Single},Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute standard deviation of (float) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation (double) values.</returns>
            <remarks>
            This operator considers the standard deviation of a sequence of values containing NaN
            to be NaN. Consequently, once a value of NaN is encountered on the source stream, the
            corresponding output value and all subsequent output values will be NaN.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Single},System.Predicate{System.Single},Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute standard deviation of (float) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation (float) values.</returns>
            <remarks>
            This operator considers the standard deviation of a sequence of values containing NaN
            to be NaN. Consequently, once a value of NaN is encountered on the source stream, the
            corresponding output value and all subsequent output values will be NaN.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Double},Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute standard deviation of (double) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation (double) values.</returns>
            <remarks>
            This operator considers the standard deviation of a sequence of values containing NaN
            to be NaN. Consequently, once a value of NaN is encountered on the source stream, the
            corresponding output value and all subsequent output values will be NaN.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Double},System.Predicate{System.Double},Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute standard deviation of (double) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation (double) values.</returns>
            <remarks>
            This operator considers the standard deviation of a sequence of values containing NaN
            to be NaN. Consequently, once a value of NaN is encountered on the source stream, the
            corresponding output value and all subsequent output values will be NaN.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Decimal},Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute standard deviation of (decimal) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation (decimal) values (0m for single first value).</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Decimal},System.Predicate{System.Decimal},Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute standard deviation of (decimal) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation (decimal) values.</returns>
            <remarks>
            This operator considers the standard deviation of a sequence of values containing NaN
            to be NaN. Consequently, once a value of NaN is encountered on the source stream, the
            corresponding output value and all subsequent output values will be NaN.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Operators.Count``1(Microsoft.Psi.IProducer{``0[]},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Compute the count of a stream of values.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of count values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.LongCount``1(Microsoft.Psi.IProducer{``0[]},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Compute the long count of a stream of values.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of long count values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Int32[]},Microsoft.Psi.DeliveryPolicy{System.Int32[]})">
            <summary>
            Compute the sum of a stream of int values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Int32},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Compute the sum of a stream of values obtained by invoking a transform function.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Nullable{System.Int32}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int32}[]})">
            <summary>
            Compute the sum of a stream of nullable int values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Int32}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Compute the sum of a stream of int values obtained by invoking a transform function.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (nullable int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Int64[]},Microsoft.Psi.DeliveryPolicy{System.Int64[]})">
            <summary>
            Compute the sum of a stream of long values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Int64},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Compute the sum of a stream of int values obtained by invoking a transform function.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Nullable{System.Int64}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int64}[]})">
            <summary>
            Compute the sum of a stream of nullable long values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Int64}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Compute the sum of a stream of int values obtained by invoking a transform function.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (nullable long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Single[]},Microsoft.Psi.DeliveryPolicy{System.Single[]})">
            <summary>
            Compute the sum of a stream of float values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Single},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Compute the sum of a stream of int values obtained by invoking a transform function.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Nullable{System.Single}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Single}[]})">
            <summary>
            Compute the sum of a stream of nullable float values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Single}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Compute the sum of a stream of int values obtained by invoking a transform function.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (nullable float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Double[]},Microsoft.Psi.DeliveryPolicy{System.Double[]})">
            <summary>
            Compute the sum of a stream of double values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Double},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Compute the sum of a stream of decimal values.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Nullable{System.Double}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Double}[]})">
            <summary>
            Compute the sum of a stream of nullable double values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Double}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Compute the sum of a stream of nullable decimal values.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Decimal[]},Microsoft.Psi.DeliveryPolicy{System.Decimal[]})">
            <summary>
            Compute the sum of a stream of decimal values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Decimal},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Compute the sum of a stream of decimal values.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Nullable{System.Decimal}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Decimal}[]})">
            <summary>
            Compute the sum of a stream of nullable decimal values.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Decimal}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Compute the sum of a stream of nullable decimal values.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (nullable decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Int32[]},Microsoft.Psi.DeliveryPolicy{System.Int32[]})">
            <summary>
            Compute the minimum int within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Int32},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the minimum int within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Nullable{System.Int32}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int32}[]})">
            <summary>
            Compute the minimum int within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Int32}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the minimum nullable int within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (nullable int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Int64[]},Microsoft.Psi.DeliveryPolicy{System.Int64[]})">
            <summary>
            Compute the minimum int within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Int64},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the minimum long within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>selector
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Nullable{System.Int64}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int64}[]})">
            <summary>
            Compute the minimum int within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Int64}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the minimum nullable long within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (nullable long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Single[]},Microsoft.Psi.DeliveryPolicy{System.Single[]})">
            <summary>
            Compute the minimum int within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Single},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the minimum float within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Nullable{System.Single}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Single}[]})">
            <summary>
            Compute the minimum int within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Single}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the minimum nullable float within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (nullable float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Double[]},Microsoft.Psi.DeliveryPolicy{System.Double[]})">
            <summary>
            Compute the minimum int within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Double},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the minimum double within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Nullable{System.Double}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Double}[]})">
            <summary>
            Compute the minimum int within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Double}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the minimum nullable double within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Decimal[]},Microsoft.Psi.DeliveryPolicy{System.Decimal[]})">
            <summary>
            Compute the minimum int within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Decimal},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the minimum decimal within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Nullable{System.Decimal}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Decimal}[]})">
            <summary>
            Compute the minimum int within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Decimal}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the minimum nullable decimal within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (nullable decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min``1(Microsoft.Psi.IProducer{``0[]},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Compute the minimum int within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min``2(Microsoft.Psi.IProducer{``0[]},System.Func{``0,``1},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the minimum value within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <typeparam name="TResult">The resulting message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Int32[]},Microsoft.Psi.DeliveryPolicy{System.Int32[]})">
            <summary>
            Compute the maximum int within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Int32},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the maximum int within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Nullable{System.Int32}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int32}[]})">
            <summary>
            Compute the maximum nullable int within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Int32}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the maximum nullable int within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Int64[]},Microsoft.Psi.DeliveryPolicy{System.Int64[]})">
            <summary>
            Compute the maximum long within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Int64},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the maximum long within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Nullable{System.Int64}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int64}[]})">
            <summary>
            Compute the maximum nullable long within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Int64}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the maximum nullable long within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Single[]},Microsoft.Psi.DeliveryPolicy{System.Single[]})">
            <summary>
            Compute the maximum float within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Single},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the maximum float within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Nullable{System.Single}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Single}[]})">
            <summary>
            Compute the maximum nullable float within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Single}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the maximum nullable float within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Double[]},Microsoft.Psi.DeliveryPolicy{System.Double[]})">
            <summary>
            Compute the maximum double within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Double},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the maximum double within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Nullable{System.Double}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Double}[]})">
            <summary>
            Compute the maximum nullable double within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Double}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the maximum nullable double within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Decimal[]},Microsoft.Psi.DeliveryPolicy{System.Decimal[]})">
            <summary>
            Compute the maximum decimal within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Decimal},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the maximum decimal within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Nullable{System.Decimal}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Decimal}[]})">
            <summary>
            Compute the maximum nullable decimal within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Decimal}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the maximum nullable decimal within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max``1(Microsoft.Psi.IProducer{``0[]},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Compute the maximum value within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max``2(Microsoft.Psi.IProducer{``0[]},System.Func{``0,``1},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the maximum value within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <typeparam name="TResult">The resulting message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Int32[]},Microsoft.Psi.DeliveryPolicy{System.Int32[]})">
            <summary>
            Compute the average (double) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Int32},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (double) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Nullable{System.Int32}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int32}[]})">
            <summary>
            Compute the average (nullable double) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Int32}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (nullable double) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Int64[]},Microsoft.Psi.DeliveryPolicy{System.Int64[]})">
            <summary>
            Compute the average (double) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Int64},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (double) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Nullable{System.Int64}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int64}[]})">
            <summary>
            Compute the average (nullable double) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Int64}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (nullable double) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Single[]},Microsoft.Psi.DeliveryPolicy{System.Single[]})">
            <summary>
            Compute the average (float) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Single},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (float) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Nullable{System.Single}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Single}[]})">
            <summary>
            Compute the average (nullable float) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Single}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (nullable float) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Double[]},Microsoft.Psi.DeliveryPolicy{System.Double[]})">
            <summary>
            Compute the average (double) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Double},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (double) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Nullable{System.Double}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Double}[]})">
            <summary>
            Compute the average (nullable double) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Double}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (nullable double) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Decimal[]},Microsoft.Psi.DeliveryPolicy{System.Decimal[]})">
            <summary>
            Compute the average (decimal) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Decimal},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (decimal) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Nullable{System.Decimal}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Decimal}[]})">
            <summary>
            Compute the average (nullable decimal) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Decimal}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (nullable decimal) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Int32[]},Microsoft.Psi.DeliveryPolicy{System.Int32[]})">
            <summary>
            Compute the average (int) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Int32},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (int) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Nullable{System.Int32}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int32}[]})">
            <summary>
            Compute the average (int?) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Int32}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (int?) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Int64[]},Microsoft.Psi.DeliveryPolicy{System.Int64[]})">
            <summary>
            Compute the average (long) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Int64},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (long) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Nullable{System.Int64}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int64}[]})">
            <summary>
            Compute the average (long?) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Int64}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (long?) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Single[]},Microsoft.Psi.DeliveryPolicy{System.Single[]})">
            <summary>
            Compute the average (float) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Single},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (float) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Nullable{System.Single}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Single}[]})">
            <summary>
            Compute the average (float?) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (float?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Single}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (float?) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (float?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Double[]},Microsoft.Psi.DeliveryPolicy{System.Double[]})">
            <summary>
            Compute the average (double) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Double},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (double) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Nullable{System.Double}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Double}[]})">
            <summary>
            Compute the average (double?) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Double}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (double?) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Decimal[]},Microsoft.Psi.DeliveryPolicy{System.Decimal[]})">
            <summary>
            Compute the average (decimal) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Decimal},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (decimal) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Nullable{System.Decimal}[]},Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Decimal}[]})">
            <summary>
            Compute the average (decimal?) within each window.
            </summary>
            <param name="source">The source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (decimal?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(Microsoft.Psi.IProducer{``0[]},System.Func{``0,System.Nullable{System.Decimal}},Microsoft.Psi.DeliveryPolicy{``0[]})">
            <summary>
            Invoke a transform function on each element and compute the average (decimal) within each window.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Compute standard deviation of (int) values.
            </summary>
            <param name="source">Source stream.</param>
            <returns>Stream of standard deviation (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Compute standard deviation of (int) values.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">Source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <returns>Stream of standard deviation (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Compute standard deviation of (int?) values.
            </summary>
            <param name="source">Source stream.</param>
            <returns>Stream of standard deviation (double?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Compute standard deviation of (int?) values.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">Source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <returns>Stream of standard deviation (double?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Compute standard deviation of (long) values.
            </summary>
            <param name="source">Source stream.</param>
            <returns>Stream of standard deviation (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Compute standard deviation of (long) values.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">Source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <returns>Stream of standard deviation (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Compute standard deviation of (long?) values.
            </summary>
            <param name="source">Source stream.</param>
            <returns>Stream of standard deviation (double?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Compute standard deviation of (long?) values.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">Source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <returns>Stream of standard deviation (double?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Compute standard deviation of (float) values.
            </summary>
            <param name="source">Source stream.</param>
            <returns>Stream of standard deviation (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Compute standard deviation of (float) values.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">Source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <returns>Stream of standard deviation (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Compute standard deviation of (float?) values.
            </summary>
            <param name="source">Source stream.</param>
            <returns>Stream of standard deviation (float?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Compute standard deviation of (float?) values.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">Source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <returns>Stream of standard deviation (float?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Compute standard deviation of (double) values.
            </summary>
            <param name="source">Source stream.</param>
            <returns>Stream of standard deviation (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Compute standard deviation of (double) values.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">Source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <returns>Stream of standard deviation (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Compute standard deviation of (double?) values.
            </summary>
            <param name="source">Source stream.</param>
            <returns>Stream of standard deviation (double?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Compute standard deviation of (double?) values.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">Source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <returns>Stream of standard deviation (double?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Compute standard deviation of (decimal) values.
            </summary>
            <param name="source">Source stream.</param>
            <returns>Stream of standard deviation (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Compute standard deviation of (decimal?) values.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">Source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <returns>Stream of standard deviation (decimal?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Compute standard deviation of (decimal?) values.
            </summary>
            <param name="source">Source stream.</param>
            <returns>Stream of standard deviation (decimal?) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Compute standard deviation of (decimal) values.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">Source stream.</param>
            <param name="selector">Transform function applied to each element.</param>
            <returns>Stream of standard deviation (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Count``1(Microsoft.Psi.IProducer{``0},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Compute the count of values within each window by time span.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of (int) count values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.LongCount``1(Microsoft.Psi.IProducer{``0},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Compute the count of values within each window by time span.
            </summary>
            <typeparam name="TSource">The source message type.</typeparam>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of (long) count values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Int32},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the sum (int) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Int32},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the sum (int) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Nullable{System.Int32}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int32}})">
            <summary>
            Compute the sum (nullable int) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (nullable int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Nullable{System.Int32}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int32}})">
            <summary>
            Compute the sum (nullable int) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (nullable int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Int64},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the sum (long) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Int64},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the sum (long) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Nullable{System.Int64}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int64}})">
            <summary>
            Compute the sum (nullable long) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (nullable long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Nullable{System.Int64}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int64}})">
            <summary>
            Compute the sum (nullable long) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (nullable long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Single},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the sum (float) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Single},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the sum (float) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Nullable{System.Single}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Single}})">
            <summary>
            Compute the sum (nullable float) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (nullable float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Nullable{System.Single}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Single}})">
            <summary>
            Compute the sum (nullable float) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (nullable float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Double},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the sum (double) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Double},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the sum (double) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Nullable{System.Double}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Double}})">
            <summary>
            Compute the sum (nullable double) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Nullable{System.Double}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Double}})">
            <summary>
            Compute the sum (nullable double) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Decimal},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the sum (decimal) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Decimal},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the sum (decimal) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Nullable{System.Decimal}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Decimal}})">
            <summary>
            Compute the sum (nullable decimal) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (nullable decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Sum(Microsoft.Psi.IProducer{System.Nullable{System.Decimal}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Decimal}})">
            <summary>
            Compute the sum (nullable decimal) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of sum (nullable decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Int32},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the minimum (int) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Int32},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the minimum (int) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Nullable{System.Int32}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int32}})">
            <summary>
            Compute the minimum (nullable int) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (nullable int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Nullable{System.Int32}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int32}})">
            <summary>
            Compute the minimum (nullable long) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (nullable long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Int64},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the minimum (long) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Int64},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the minimum (long) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Nullable{System.Int64}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int64}})">
            <summary>
            Compute the minimum (nullable long) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (nullable long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Nullable{System.Int64}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int64}})">
            <summary>
            Compute the minimum (nullable long) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (nullable long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Single},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the minimum (float) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Single},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the minimum (float) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Nullable{System.Single}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Single}})">
            <summary>
            Compute the minimum (nullable float) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (nullable float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Nullable{System.Single}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Single}})">
            <summary>
            Compute the minimum (nullable float) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (nullable float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Double},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the minimum (double) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Double},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the minimum (double) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Nullable{System.Double}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Double}})">
            <summary>
            Compute the minimum (nullable double) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Nullable{System.Double}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Double}})">
            <summary>
            Compute the minimum (nullable double) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Decimal},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the minimum (decimal) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Decimal},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the minimum (decimal) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Nullable{System.Decimal}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Decimal}})">
            <summary>
            Compute the minimum (nullable decimal) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (nullable decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Min(Microsoft.Psi.IProducer{System.Nullable{System.Decimal}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Decimal}})">
            <summary>
            Compute the minimum (nullable decimal) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (nullable decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Int32},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the maximum (int) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Int32},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the maximum (int) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Nullable{System.Int32}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int32}})">
            <summary>
            Compute the maximum (nullable int) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Nullable{System.Int32}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int32}})">
            <summary>
            Compute the maximum (nullable int) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Int64},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the maximum (long) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Int64},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the maximum (long) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Nullable{System.Int64}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int64}})">
            <summary>
            Compute the maximum (nullable long) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Nullable{System.Int64}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int64}})">
            <summary>
            Compute the maximum (nullable long) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Single},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the maximum (float) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Single},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the maximum (float) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Nullable{System.Single}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Single}})">
            <summary>
            Compute the maximum (nullable float) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Nullable{System.Single}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Single}})">
            <summary>
            Compute the maximum (nullable float) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Double},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the maximum (double) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Double},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the maximum (double) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Nullable{System.Double}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Double}})">
            <summary>
            Compute the maximum (nullable double) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Nullable{System.Double}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Double}})">
            <summary>
            Compute the maximum (nullable double) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Decimal},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the minimum (decimal) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of minimum (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Decimal},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the maximum (decimal) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Nullable{System.Decimal}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Decimal}})">
            <summary>
            Compute the maximum (nullable decimal) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Max(Microsoft.Psi.IProducer{System.Nullable{System.Decimal}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Decimal}})">
            <summary>
            Compute the maximum (nullable decimal) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of maximum (nullable decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Int32},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the average (int) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Int32},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the average (int) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Nullable{System.Int32}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int32}})">
            <summary>
            Compute the average (nullable int) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Nullable{System.Int32}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int32}})">
            <summary>
            Compute the average (nullable int) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Int64},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the average (long) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Int64},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the average (long) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Nullable{System.Int64}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int64}})">
            <summary>
            Compute the average (nullable long) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Nullable{System.Int64}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int64}})">
            <summary>
            Compute the average (nullable long) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Single},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the average (float) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Single},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the average (float) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Nullable{System.Single}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Single}})">
            <summary>
            Compute the average (nullable float) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Nullable{System.Single}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Single}})">
            <summary>
            Compute the average (nullable float) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Double},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the average (double) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Double},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the average (double) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Nullable{System.Double}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Double}})">
            <summary>
            Compute the average (nullable double) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Nullable{System.Double}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Double}})">
            <summary>
            Compute the average (nullable double) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Decimal},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the average (decimal) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Decimal},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the average (decimal) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Nullable{System.Decimal}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Decimal}})">
            <summary>
            Compute the average (nullable decimal) within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Average(Microsoft.Psi.IProducer{System.Nullable{System.Decimal}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Decimal}})">
            <summary>
            Compute the average (nullable decimal) within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of average (nullable decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Int32},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the standard deviation within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Int32},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the standard deviation within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Nullable{System.Int32}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int32}})">
            <summary>
            Compute the standard deviation within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Nullable{System.Int32}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int32}})">
            <summary>
            Compute the standard deviation within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Int64},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the standard deviation within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Int64},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the standard deviation within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Nullable{System.Int64}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int64}})">
            <summary>
            Compute the standard deviation within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Nullable{System.Int64}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Int64}})">
            <summary>
            Compute the standard deviation within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Single},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the standard deviation within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Single},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the standard deviation within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Nullable{System.Single}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Single}})">
            <summary>
            Compute the standard deviation within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Nullable{System.Single}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Single}})">
            <summary>
            Compute the standard deviation within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Double},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the standard deviation within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Double},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the standard deviation within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Nullable{System.Double}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Double}})">
            <summary>
            Compute the standard deviation within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Nullable{System.Double}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Double}})">
            <summary>
            Compute the standard deviation within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Decimal},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the standard deviation within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Decimal},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the standard deviation within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Nullable{System.Decimal}},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Decimal}})">
            <summary>
            Compute the standard deviation within each window by time span.
            </summary>
            <param name="source">The source stream.</param>
            <param name="timeSpan">Window time span.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Std(Microsoft.Psi.IProducer{System.Nullable{System.Decimal}},System.Int32,Microsoft.Psi.DeliveryPolicy{System.Nullable{System.Decimal}})">
            <summary>
            Compute the standard deviation within each window by size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="size">Window size.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of standard deviation values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Abs(Microsoft.Psi.IProducer{System.Int32},Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the absolute value of a stream of (int) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of absolute (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Abs(Microsoft.Psi.IProducer{System.Int32},System.Predicate{System.Int32},Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the absolute value of a stream of (int) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of absolute (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Abs(Microsoft.Psi.IProducer{System.Int64},Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the absolute value of a stream of (long) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of absolute (long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Abs(Microsoft.Psi.IProducer{System.Int64},System.Predicate{System.Int64},Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the absolute value of a stream of (long) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of absolute (long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Abs(Microsoft.Psi.IProducer{System.Single},Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the absolute value of a stream of (float) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of absolute (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Abs(Microsoft.Psi.IProducer{System.Single},System.Predicate{System.Single},Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the absolute value of a stream of (float) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of absolute (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Abs(Microsoft.Psi.IProducer{System.Double},Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the absolute value of a stream of (double) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of absolute (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Abs(Microsoft.Psi.IProducer{System.Double},System.Predicate{System.Double},Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the absolute value of a stream of (double) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of absolute (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Abs(Microsoft.Psi.IProducer{System.Decimal},Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the absolute value of a stream of (decimal) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of absolute (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Abs(Microsoft.Psi.IProducer{System.Decimal},System.Predicate{System.Decimal},Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the absolute value of a stream of (decimal) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of absolute (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Delta(Microsoft.Psi.IProducer{System.Int32},Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute delta (int) value between successive stream values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of delta (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Delta(Microsoft.Psi.IProducer{System.Int32},System.Predicate{System.Int32},Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute delta (int) value between successive stream values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of delta (int) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Delta(Microsoft.Psi.IProducer{System.Int64},Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute delta (long) value between successive stream values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of delta (long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Delta(Microsoft.Psi.IProducer{System.Int64},System.Predicate{System.Int64},Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute delta (long) value between successive stream values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of delta (long) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Delta(Microsoft.Psi.IProducer{System.Single},Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute delta (float) value between successive stream values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of delta (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Delta(Microsoft.Psi.IProducer{System.Single},System.Predicate{System.Single},Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute delta (float) value between successive stream values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of delta (float) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Delta(Microsoft.Psi.IProducer{System.Double},Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute delta (double) value between successive stream values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of delta (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Delta(Microsoft.Psi.IProducer{System.Double},System.Predicate{System.Double},Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute delta (double) value between successive stream values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of delta (double) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Delta(Microsoft.Psi.IProducer{System.Decimal},Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute delta (decimal) value between successive stream values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of delta (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Delta(Microsoft.Psi.IProducer{System.Decimal},System.Predicate{System.Decimal},Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute delta (decimal) value between successive stream values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of delta (decimal) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Int32},Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the natural (base e) logarithm of a stream of (int) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of natural (base e) logarithms.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Int32},System.Predicate{System.Int32},Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the natural (base e) logarithm of a stream of (int) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of natural (base e) logarithms.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Int32},System.Double,Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the logarithm in given base of a stream of (int) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="newBase">The base of the logarithm.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of logarithms in given base.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Int32},System.Double,System.Predicate{System.Int32},Microsoft.Psi.DeliveryPolicy{System.Int32})">
            <summary>
            Compute the logarithm in given base of a stream of (int) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="newBase">The base of the logarithm.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of logarithms in given base.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Int64},Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the natural (base e) logarithm of a stream of (long) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of natural (base e) logarithms.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Int64},System.Predicate{System.Int64},Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the natural (base e) logarithm of a stream of (long) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of natural (base e) logarithms.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Int64},System.Double,Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the logarithm in given base of a stream of (long) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="newBase">The base of the logarithm.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of logarithms in given base.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Int64},System.Double,System.Predicate{System.Int64},Microsoft.Psi.DeliveryPolicy{System.Int64})">
            <summary>
            Compute the logarithm in given base of a stream of (long) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="newBase">The base of the logarithm.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of logarithms in given base.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Single},Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the natural (base e) logarithm of a stream of (float) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of natural (base e) logarithms.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Single},System.Predicate{System.Single},Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the natural (base e) logarithm of a stream of (float) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of natural (base e) logarithms.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Single},System.Double,Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the logarithm in given base of a stream of (float) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="newBase">The base of the logarithm.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of logarithms in given base.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Single},System.Double,System.Predicate{System.Single},Microsoft.Psi.DeliveryPolicy{System.Single})">
            <summary>
            Compute the logarithm in given base of a stream of (float) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="newBase">The base of the logarithm.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of logarithms in given base.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Double},Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the natural (base e) logarithm of a stream of (double) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of natural (base e) logarithms.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Double},System.Predicate{System.Double},Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the natural (base e) logarithm of a stream of (double) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of natural (base e) logarithms.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Double},System.Double,Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the logarithm in given base of a stream of (double) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="newBase">The base of the logarithm.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of logarithms in given base.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Double},System.Double,System.Predicate{System.Double},Microsoft.Psi.DeliveryPolicy{System.Double})">
            <summary>
            Compute the logarithm in given base of a stream of (double) values.
            </summary>
            <param name="source">Source stream.</param>
            <param name="newBase">The base of the logarithm.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of logarithms in given base.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Decimal},Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the to natural (base e) logarithm of a stream of (decimal).
            </summary>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of natural (base e) logarithms.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Decimal},System.Predicate{System.Decimal},Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the to natural (base e) logarithm of a stream of (decimal).
            </summary>
            <param name="source">Source stream.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of natural (base e) logarithms.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Decimal},System.Double,Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the to logarithm in given base of a stream of (decimal).
            </summary>
            <param name="source">Source stream.</param>
            <param name="newBase">The base of the logarithm.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of logarithms in given base.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Log(Microsoft.Psi.IProducer{System.Decimal},System.Double,System.Predicate{System.Decimal},Microsoft.Psi.DeliveryPolicy{System.Decimal})">
            <summary>
            Compute the to logarithm in given base of a stream of (decimal).
            </summary>
            <param name="source">Source stream.</param>
            <param name="newBase">The base of the logarithm.</param>
            <param name="condition">A function to test each value for a condition.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of logarithms in given base.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.TimeOf``1(Microsoft.Psi.IProducer{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Map messages to their originating time.
            </summary>
            <typeparam name="T">Type of source stream messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of originating times.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Latency``1(Microsoft.Psi.IProducer{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Map messages to their current latency (time since origination).
            </summary>
            <typeparam name="T">Type of source stream messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of latency (time span) values.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Delay``1(Microsoft.Psi.IProducer{``0},System.TimeSpan,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Delay messages by given time span.
            </summary>
            <typeparam name="T">Type of source/output messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="delay">Time span by which to delay.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Parallel``2(Microsoft.Psi.IProducer{``0[]},System.Int32,System.Func{System.Int32,Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1}},System.Boolean,``1,Microsoft.Psi.DeliveryPolicy{``0[]},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Transforms a stream of fixed-size array messages by creating a stream for each element in the array,
            applying a sub-pipeline to each of these streams, and assembling the results into a corresponding output
            array stream.
            </summary>
            <typeparam name="TIn">Type of input array element.</typeparam>
            <typeparam name="TOut">Type of output array element.</typeparam>
            <param name="source">Source stream.</param>
            <param name="vectorSize">Vector arity.</param>
            <param name="streamTransform">Function mapping from an index and stream of input element to a stream of output element.</param>
            <param name="outputDefaultIfDropped">When true, a result is produced even if a message is dropped in processing one of the input elements. In this case the corresponding output element is set to a default value.</param>
            <param name="defaultValue">Default value to use when messages are dropped in processing one of the input elements.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="name">Name for the parallel composite component (defaults to ParallelFixedLength).</param>
            <param name="defaultParallelDeliveryPolicy">Pipeline-level default delivery policy to be used by the parallel composite component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Stream of output arrays.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Parallel``1(Microsoft.Psi.IProducer{``0[]},System.Int32,System.Action{System.Int32,Microsoft.Psi.IProducer{``0}},Microsoft.Psi.DeliveryPolicy{``0[]},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Processes a stream of fixed-size array messages by creating a stream for each element in the array,
            and performing an action on each of these streams.
            </summary>
            <typeparam name="TIn">Type of input array element.</typeparam>
            <param name="source">Source stream.</param>
            <param name="vectorSize">Vector arity.</param>
            <param name="streamAction">Action to apply to the individual element streams.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="name">Name for the parallel composite component (defaults to ParallelFixedLength).</param>
            <param name="defaultParallelDeliveryPolicy">Pipeline-level default delivery policy to be used by the parallel composite component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Stream of output arrays.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Parallel``2(Microsoft.Psi.IProducer{``0[]},System.Int32,System.Func{Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1}},System.Boolean,``1,Microsoft.Psi.DeliveryPolicy{``0[]},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Transforms a stream of fixed-size array messages by creating a stream for each element in the array,
            applying a sub-pipeline to each of these streams, and assembling the results into a corresponding output
            array stream.
            </summary>
            <typeparam name="TIn">Type of input array element.</typeparam>
            <typeparam name="TOut">Type of output array element.</typeparam>
            <param name="source">Source stream.</param>
            <param name="vectorSize">Vector arity.</param>
            <param name="streamTransform">Function mapping from an input element stream to an output element stream.</param>
            <param name="outputDefaultIfDropped">When true, a result is produced even if a message is dropped in processing one of the input elements. In this case the corresponding output element is set to a default value.</param>
            <param name="defaultValue">Default value to use when messages are dropped in processing one of the input elements.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="name">Name for the parallel composite component (defaults to ParallelFixedLength).</param>
            <param name="defaultParallelDeliveryPolicy">Pipeline-level default delivery policy to be used by the parallel composite component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Stream of output arrays.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Parallel``1(Microsoft.Psi.IProducer{``0[]},System.Int32,System.Action{Microsoft.Psi.IProducer{``0}},Microsoft.Psi.DeliveryPolicy{``0[]},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Processes a stream of fixed-size array messages by creating a stream for each element in the array,
            and performing an action on each of these streams.
            </summary>
            <typeparam name="TIn">Type of input array element.</typeparam>
            <param name="source">Source stream.</param>
            <param name="vectorSize">Vector arity.</param>
            <param name="streamAction">Action to apply to the individual element streams.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="name">Name for the parallel composite component (defaults to ParallelFixedLength).</param>
            <param name="defaultParallelDeliveryPolicy">Pipeline-level default delivery policy to be used by the parallel composite component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Stream of output arrays.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Parallel``2(Microsoft.Psi.IProducer{``0[]},System.Func{System.Int32,Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1}},System.Boolean,``1,Microsoft.Psi.DeliveryPolicy{``0[]},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Transforms a stream of variable-size array messages by creating a stream for each element in the array,
            applying a sub-pipeline to each of these streams, and assembling the results into a corresponding output
            array stream.
            </summary>
            <typeparam name="TIn">Type of input array element.</typeparam>
            <typeparam name="TOut">Type of output array element.</typeparam>
            <param name="source">Source stream.</param>
            <param name="streamTransform">Function mapping from an input element stream to an output element stream.</param>
            <param name="outputDefaultIfDropped">When true, a result is produced even if a message is dropped in processing one of the input elements. In this case the corresponding output element is set to a default value.</param>
            <param name="defaultValue">Default value to use when messages are dropped in processing one of the input elements.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="name">Name for the parallel composite component (defaults to ParallelVariableLength).</param>
            <param name="defaultParallelDeliveryPolicy">Pipeline-level default delivery policy to be used by the parallel composite component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Stream of output arrays.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Parallel``1(Microsoft.Psi.IProducer{``0[]},System.Action{System.Int32,Microsoft.Psi.IProducer{``0}},Microsoft.Psi.DeliveryPolicy{``0[]},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Processes a stream of variable-size array messages by creating a stream for each element in the array,
            and performing an action on each of these streams.
            </summary>
            <typeparam name="TIn">Type of input array element.</typeparam>
            <param name="source">Source stream.</param>
            <param name="streamAction">Action to apply to the individual element streams.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="name">Name for the parallel composite component (defaults to ParallelVariableLength).</param>
            <param name="defaultParallelDeliveryPolicy">Pipeline-level default delivery policy to be used by the parallel composite component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Stream of output arrays.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Parallel``2(Microsoft.Psi.IProducer{``0[]},System.Func{Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1}},System.Boolean,``1,Microsoft.Psi.DeliveryPolicy{``0[]},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Transforms a stream of variable-size array messages by creating a stream for each element in the array,
            applying a sub-pipeline to each of these streams, and assembling the results into a corresponding output
            array stream.
            </summary>
            <typeparam name="TIn">Type of input array element.</typeparam>
            <typeparam name="TOut">Type of output array element.</typeparam>
            <param name="source">Source stream.</param>
            <param name="streamTransform">Function mapping from an input element stream to an output element stream.</param>
            <param name="outputDefaultIfDropped">When true, a result is produced even if a message is dropped in processing one of the input elements. In this case the corresponding output element is set to a default value.</param>
            <param name="defaultValue">Default value to use when messages are dropped in processing one of the input elements.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="name">Name for the parallel composite component (defaults to ParallelVariableLength).</param>
            <param name="defaultParallelDeliveryPolicy">Pipeline-level default delivery policy to be used by the parallel composite component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Stream of output arrays.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Parallel``1(Microsoft.Psi.IProducer{``0[]},System.Action{Microsoft.Psi.IProducer{``0}},Microsoft.Psi.DeliveryPolicy{``0[]},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Processes a stream of variable-size array messages by creating a stream for each element in the array,
            and performing an action on each of these streams.
            </summary>
            <typeparam name="TIn">Type of input array element.</typeparam>
            <param name="source">Source stream.</param>
            <param name="streamAction">Action to apply to the individual element streams.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="name">Name for the parallel composite component (defaults to ParallelVariableLength).</param>
            <param name="defaultParallelDeliveryPolicy">Pipeline-level default delivery policy to be used by the parallel composite component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Stream of output arrays.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Parallel``5(Microsoft.Psi.IProducer{``0},System.Func{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Func{``1,Microsoft.Psi.IProducer{``2},Microsoft.Psi.IProducer{``3}},System.Func{System.Collections.Generic.Dictionary{``1,``3},``4},System.Boolean,``3,Microsoft.Psi.DeliveryPolicy{``0},System.Func{``1,System.Collections.Generic.Dictionary{``1,``2},System.DateTime,System.ValueTuple{System.Boolean,System.DateTime}},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Transforms a stream of messages by splitting it into a set of sub-streams (indexed by a branch key),
            applying a sub-pipeline to each of these streams, and assembling the results into a corresponding
            output stream.
            </summary>
            <typeparam name="TIn">The type of input messages.</typeparam>
            <typeparam name="TBranchKey">Type of the substream key.</typeparam>
            <typeparam name="TBranchIn">Type of the substream messages.</typeparam>
            <typeparam name="TBranchOut">Type of the subpipeline output for each substream.</typeparam>
            <typeparam name="TOut">The type of output messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="splitter">A function that splits the input by generating a dictionary of key-value pairs for each given input message.</param>
            <param name="streamTransform">Stream transform to be applied to each substream.</param>
            <param name="outputCreator">A function that creates the output message based on a dictionary containing the branch outputs.</param>
            <param name="outputDefaultIfDropped">When true, a result is produced even if a message is dropped in processing one of the input elements. In this case the corresponding output element is set to a default value.</param>
            <param name="defaultValue">Default value to use when messages are dropped in processing one of the input elements.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="branchTerminationPolicy">Predicate function determining whether and when (originating time) to terminate branches (defaults to when key no longer present), given the current key, message payload (dictionary) and originating time.</param>
            <param name="name">Name for the parallel composite component (defaults to ParallelSparse).</param>
            <param name="defaultParallelDeliveryPolicy">Pipeline-level default delivery policy to be used by the parallel composite component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Stream of output dictionaries.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Parallel``3(Microsoft.Psi.IProducer{System.Collections.Generic.Dictionary{``0,``1}},System.Func{``0,Microsoft.Psi.IProducer{``1},Microsoft.Psi.IProducer{``2}},System.Boolean,``2,Microsoft.Psi.DeliveryPolicy{System.Collections.Generic.Dictionary{``0,``1}},System.Func{``0,System.Collections.Generic.Dictionary{``0,``1},System.DateTime,System.ValueTuple{System.Boolean,System.DateTime}},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Transforms a stream of dictionary messages by creating a stream for each key in the dictionary,
            applying a sub-pipeline to each of these streams, and assembling the results into a corresponding output
            dictionary stream.
            </summary>
            <typeparam name="TBranchKey">Type of input dictionary keys.</typeparam>
            <typeparam name="TBranchIn">Type of input dictionary values.</typeparam>
            <typeparam name="TBranchOut">Type of output dictionary values.</typeparam>
            <param name="source">Source stream.</param>
            <param name="streamTransform">Function mapping from an input element stream to an output element stream.</param>
            <param name="outputDefaultIfDropped">When true, a result is produced even if a message is dropped in processing one of the input elements. In this case the corresponding output element is set to a default value.</param>
            <param name="defaultValue">Default value to use when messages are dropped in processing one of the input elements.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="branchTerminationPolicy">Predicate function determining whether and when (originating time) to terminate branches (defaults to when key no longer present), given the current key, message payload (dictionary) and originating time.</param>
            <param name="name">Name for the parallel composite component (defaults to ParallelSparse).</param>
            <param name="defaultParallelDeliveryPolicy">Pipeline-level default delivery policy to be used by the parallel composite component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Stream of output dictionaries.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Parallel``3(Microsoft.Psi.IProducer{``0},System.Func{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Action{``1,Microsoft.Psi.IProducer{``2}},Microsoft.Psi.DeliveryPolicy{``0},System.Func{``1,System.Collections.Generic.Dictionary{``1,``2},System.DateTime,System.ValueTuple{System.Boolean,System.DateTime}},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Processes a stream of messages by splitting it into a set of substreams (indexed by a key),
            applying a sub-pipeline to each of these streams.
            </summary>
            <typeparam name="TIn">The type of input messages.</typeparam>
            <typeparam name="TBranchKey">Type of the substream key.</typeparam>
            <typeparam name="TBranchIn">Type of the substream messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="splitter">A function that splits the input by generating a dictionary of key-value pairs for each given input message.</param>
            <param name="streamAction">The action to apply to each element stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="branchTerminationPolicy">Predicate function determining whether and when (originating time) to terminate branches (defaults to when key no longer present), given the current key, message payload (dictionary) and originating time.</param>
            <param name="name">Name for the parallel composite component (defaults to ParallelSparse).</param>
            <param name="defaultParallelDeliveryPolicy">Pipeline-level default delivery policy to be used by the parallel composite component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Stream of output dictionaries.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Parallel``2(Microsoft.Psi.IProducer{System.Collections.Generic.Dictionary{``0,``1}},System.Action{``0,Microsoft.Psi.IProducer{``1}},Microsoft.Psi.DeliveryPolicy{System.Collections.Generic.Dictionary{``0,``1}},System.Func{``0,System.Collections.Generic.Dictionary{``0,``1},System.DateTime,System.ValueTuple{System.Boolean,System.DateTime}},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Processes a stream of dictionary messages by creating a stream for each key in the dictionary,
            applying a sub-pipeline to each of these streams.
            </summary>
            <typeparam name="TBranchKey">Type of the substream key.</typeparam>
            <typeparam name="TBranchIn">Type of the substream messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="streamAction">The action to apply to each element stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="branchTerminationPolicy">Predicate function determining whether and when (originating time) to terminate branches (defaults to when key no longer present), given the current key, message payload (dictionary) and originating time.</param>
            <param name="name">Name for the parallel composite component (defaults to ParallelSparse).</param>
            <param name="defaultParallelDeliveryPolicy">Pipeline-level default delivery policy to be used by the parallel composite component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Stream of output dictionaries.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Parallel``5(Microsoft.Psi.IProducer{``0},System.Func{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Func{Microsoft.Psi.IProducer{``2},Microsoft.Psi.IProducer{``3}},System.Func{System.Collections.Generic.Dictionary{``1,``3},``4},System.Boolean,``3,Microsoft.Psi.DeliveryPolicy{``0},System.Func{``1,System.Collections.Generic.Dictionary{``1,``2},System.DateTime,System.ValueTuple{System.Boolean,System.DateTime}},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Transforms a stream of messages by splitting it into a set of substreams (indexed by a key),
            applying a sub-pipeline to each of these streams, and assembling the results into a corresponding
            output stream.
            </summary>
            <typeparam name="TIn">The type of input messages.</typeparam>
            <typeparam name="TBranchKey">Type of the substream key.</typeparam>
            <typeparam name="TBranchIn">Type of the substream messages.</typeparam>
            <typeparam name="TBranchOut">Type of the subpipeline output for each substream.</typeparam>
            <typeparam name="TOut">The type of output messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="splitter">A function that splits the input by generating a dictionary of key-value pairs for each given input message.</param>
            <param name="streamTransform">Stream transform to be applied to each substream.</param>
            <param name="outputCreator">A function that creates the output message based on a dictionary containing the branch outputs.</param>
            <param name="outputDefaultIfDropped">When true, a result is produced even if a message is dropped in processing one of the input elements. In this case the corresponding output element is set to default.</param>
            <param name="defaultValue">Default value to use when messages are dropped in processing one of the input elements.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="branchTerminationPolicy">Predicate function determining whether and when (originating time) to terminate branches (defaults to when key no longer present), given the current key, dictionary of values and the originating time of the last message containing the key.</param>
            <param name="name">Name for the parallel composite component (defaults to ParallelSparse).</param>
            <param name="defaultParallelDeliveryPolicy">Pipeline-level default delivery policy to be used by the parallel composite component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Stream of output dictionaries.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Parallel``4(Microsoft.Psi.IProducer{``0},System.Func{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Func{Microsoft.Psi.IProducer{``2},Microsoft.Psi.IProducer{``3}},System.Boolean,``3,Microsoft.Psi.DeliveryPolicy{``0},System.Func{``1,System.Collections.Generic.Dictionary{``1,``2},System.DateTime,System.ValueTuple{System.Boolean,System.DateTime}},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Transforms a stream of messages by splitting it into a set of substreams (indexed by a key),
            applying a sub-pipeline to each of these streams, and assembling the results into a corresponding
            output stream.
            </summary>
            <typeparam name="TIn">The type of input messages.</typeparam>
            <typeparam name="TBranchKey">Type of the substream key.</typeparam>
            <typeparam name="TBranchIn">Type of the substream messages.</typeparam>
            <typeparam name="TBranchOut">Type of the subpipeline output for each substream.</typeparam>
            <param name="source">Source stream.</param>
            <param name="splitter">A function that splits the input by generating a dictionary of key-value pairs for each given input message.</param>
            <param name="streamTransform">Stream transform to be applied to each substream.</param>
            <param name="outputDefaultIfDropped">When true, a result is produced even if a message is dropped in processing one of the input elements. In this case the corresponding output element is set to default.</param>
            <param name="defaultValue">Default value to use when messages are dropped in processing one of the input elements.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="branchTerminationPolicy">Predicate function determining whether and when (originating time) to terminate branches (defaults to when key no longer present), given the current key, dictionary of values and the originating time of the last message containing the key.</param>
            <param name="name">Name for the parallel composite component (defaults to ParallelSparse).</param>
            <param name="defaultParallelDeliveryPolicy">Pipeline-level default delivery policy to be used by the parallel composite component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Stream of output dictionaries.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Parallel``3(Microsoft.Psi.IProducer{System.Collections.Generic.Dictionary{``0,``1}},System.Func{Microsoft.Psi.IProducer{``1},Microsoft.Psi.IProducer{``2}},System.Boolean,``2,Microsoft.Psi.DeliveryPolicy{System.Collections.Generic.Dictionary{``0,``1}},System.Func{``0,System.Collections.Generic.Dictionary{``0,``1},System.DateTime,System.ValueTuple{System.Boolean,System.DateTime}},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Transforms a stream of dictionary messages by creating a stream for each key in the dictionary,
            applying a sub-pipeline to each of these streams, and assembling the results into a corresponding output
            dictionary stream.
            </summary>
            <typeparam name="TBranchKey">Type of input dictionary keys.</typeparam>
            <typeparam name="TBranchIn">Type of input dictionary values.</typeparam>
            <typeparam name="TBranchOut">Type of output dictionary values.</typeparam>
            <param name="source">Source stream.</param>
            <param name="streamTransform">Function mapping from an input element stream to an output element stream.</param>
            <param name="outputDefaultIfDropped">When true, a result is produced even if a message is dropped in processing one of the input elements. In this case the corresponding output element is set to default.</param>
            <param name="defaultValue">Default value to use when messages are dropped in processing one of the input elements.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="branchTerminationPolicy">Predicate function determining whether and when (originating time) to terminate branches (defaults to when key no longer present), given the current key, dictionary of values and the originating time of the last message containing the key.</param>
            <param name="name">Name for the parallel composite component (defaults to ParallelSparse).</param>
            <param name="defaultParallelDeliveryPolicy">Pipeline-level default delivery policy to be used by the parallel composite component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Stream of output dictionaries.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Parallel``3(Microsoft.Psi.IProducer{``0},System.Func{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Action{Microsoft.Psi.IProducer{``2}},Microsoft.Psi.DeliveryPolicy{``0},System.Func{``1,System.Collections.Generic.Dictionary{``1,``2},System.DateTime,System.ValueTuple{System.Boolean,System.DateTime}},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Processes a stream of dictionary messages by creating a stream for each key in the dictionary,
            applying a sub-pipeline to each of these streams.
            </summary>
            <typeparam name="TIn">The type of input messages.</typeparam>
            <typeparam name="TBranchKey">Type of the substream key.</typeparam>
            <typeparam name="TBranchIn">Type of the substream messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="splitter">A function that splits the input by generating a dictionary of key-value pairs for each given input message.</param>
            <param name="streamAction">The action to apply to each element stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="branchTerminationPolicy">Predicate function determining whether and when (originating time) to terminate branches (defaults to when key no longer present), given the current key, message payload (dictionary) and originating time.</param>
            <param name="name">Name for the parallel composite component (defaults to ParallelSparse).</param>
            <param name="defaultParallelDeliveryPolicy">Pipeline-level default delivery policy to be used by the parallel composite component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Stream of output dictionaries.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Parallel``2(Microsoft.Psi.IProducer{System.Collections.Generic.Dictionary{``0,``1}},System.Action{Microsoft.Psi.IProducer{``1}},Microsoft.Psi.DeliveryPolicy{System.Collections.Generic.Dictionary{``0,``1}},System.Func{``0,System.Collections.Generic.Dictionary{``0,``1},System.DateTime,System.ValueTuple{System.Boolean,System.DateTime}},System.String,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Processes a stream of dictionary messages by creating a stream for each key in the dictionary,
            applying a sub-pipeline to each of these streams.
            </summary>
            <typeparam name="TBranchKey">Type of input dictionary keys.</typeparam>
            <typeparam name="TBranchIn">Type of input dictionary values.</typeparam>
            <param name="source">Source stream.</param>
            <param name="streamAction">The action to apply to each element stream.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="branchTerminationPolicy">Predicate function determining whether and when (originating time) to terminate branches (defaults to when key no longer present), given the current key, message payload (dictionary) and originating time.</param>
            <param name="name">Name for the parallel composite component (defaults to ParallelSparse).</param>
            <param name="defaultParallelDeliveryPolicy">Pipeline-level default delivery policy to be used by the parallel composite component (defaults to <see cref="P:Microsoft.Psi.DeliveryPolicy.Unlimited"/> if unspecified).</param>
            <returns>Stream of output dictionaries.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Window``2(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IntInterval,System.Func{System.Collections.Generic.IEnumerable{Microsoft.Psi.Message{``0}},``1},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Process windows of messages by relative index interval.
            </summary>
            <typeparam name="TSource">Type of source messages.</typeparam>
            <typeparam name="TOutput">Type of output messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="indexInterval">The relative index interval over which to gather messages.</param>
            <param name="selector">Selector function.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Window``2(Microsoft.Psi.IProducer{``0},System.Int32,System.Int32,System.Func{System.Collections.Generic.IEnumerable{Microsoft.Psi.Message{``0}},``1},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Process windows of messages by relative index interval.
            </summary>
            <typeparam name="TSource">Type of source messages.</typeparam>
            <typeparam name="TOutput">Type of output messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="fromIndex">The relative index from which to gather messages.</param>
            <param name="toIndex">The relative index to which to gather messages.</param>
            <param name="selector">Selector function.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Window``1(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IntInterval,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Get windows of messages by relative index interval.
            </summary>
            <typeparam name="TSource">Type of source messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="indexInterval">The relative index interval over which to gather messages.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Window``1(Microsoft.Psi.IProducer{``0},System.Int32,System.Int32,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Get windows of messages by relative index interval.
            </summary>
            <typeparam name="TSource">Type of source messages.</typeparam>
            <param name="source">Source stream.</param>
            <param name="fromIndex">The relative index from which to gather messages.</param>
            <param name="toIndex">The relative index to which to gather messages.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Window``2(Microsoft.Psi.IProducer{``0},Microsoft.Psi.RelativeTimeInterval,System.Func{System.Collections.Generic.IEnumerable{Microsoft.Psi.Message{``0}},``1},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Process windows of messages by relative time interval.
            </summary>
            <typeparam name="TSource">Type of source messages.</typeparam>
            <typeparam name="TOutput">Type of output messages.</typeparam>
            <param name="source">Source stream of messages.</param>
            <param name="relativeTimeInterval">The relative time interval over which to gather messages.</param>
            <param name="selector">Selector function.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Window``2(Microsoft.Psi.IProducer{``0},System.TimeSpan,System.TimeSpan,System.Func{System.Collections.Generic.IEnumerable{Microsoft.Psi.Message{``0}},``1},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Process windows of messages by relative time interval.
            </summary>
            <typeparam name="TSource">Type of source messages.</typeparam>
            <typeparam name="TOutput">Type of output messages.</typeparam>
            <param name="source">Source stream of messages.</param>
            <param name="fromTime">The relative timespan from which to gather messages.</param>
            <param name="toTime">The relative timespan to which to gather messages.</param>
            <param name="selector">Selector function.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Window``1(Microsoft.Psi.IProducer{``0},Microsoft.Psi.RelativeTimeInterval,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Get windows of messages by relative time interval.
            </summary>
            <typeparam name="TSource">Type of source messages.</typeparam>
            <param name="source">Source stream of messages.</param>
            <param name="relativeTimeInterval">The relative time interval over which to gather messages.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Window``1(Microsoft.Psi.IProducer{``0},System.TimeSpan,System.TimeSpan,Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Get windows of messages by relative time interval.
            </summary>
            <typeparam name="TSource">Type of source messages.</typeparam>
            <param name="source">Source stream of messages.</param>
            <param name="fromTime">The relative timespan from which to gather messages.</param>
            <param name="toTime">The relative timespan to which to gather messages.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Output stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Window``3(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1},System.Func{Microsoft.Psi.Message{``1},System.ValueTuple{Microsoft.Psi.TimeInterval,System.DateTime}},System.Func{Microsoft.Psi.Message{``1},System.Collections.Generic.IEnumerable{Microsoft.Psi.Message{``0}},``2},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Get windows of messages specified via data from an additional window-defining stream.
            </summary>
            <remarks>
            The operator implements dynamic windowing over a stream of data. Messages on the incoming window stream
            are used to compute a relative time interval in the source stream. The output is created by a function
            that has access to the window message and the computed buffer of messages on the source stream.
            </remarks>
            <typeparam name="TSource">Type of source messages.</typeparam>
            <typeparam name="TWindow">Type of messages on the additional window stream.</typeparam>
            <typeparam name="TOutput">Type of messages on the output stream.</typeparam>
            <param name="source">The source stream.</param>
            <param name="window">The window-defining stream.</param>
            <param name="windowCreator">The function that creates the actual window to use at every point.</param>
            <param name="outputCreator">A function that creates output messages given a message on the window-defining stream and a buffer of messages on the source stream.</param>
            <param name="sourceDeliveryPolicy">An optional delivery policy for the source stream.</param>
            <param name="windowDeliveryPolicy">An optional delivery policy for the window-defining stream.</param>
            <returns>A stream of computed outputs.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Window``2(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``1},System.Func{Microsoft.Psi.Message{``1},System.ValueTuple{Microsoft.Psi.TimeInterval,System.DateTime}},Microsoft.Psi.DeliveryPolicy{``0},Microsoft.Psi.DeliveryPolicy{``1})">
            <summary>
            Get windows of messages specified via data from an additional window-defining stream.
            </summary>
            <remarks>
            The operator implements dynamic windowing over a stream of data. Messages on the incoming window stream
            are used to compute a relative time interval in the source stream. The output is created by a function
            that has access to the window message and the computed buffer of messages on the source stream.
            </remarks>
            <typeparam name="TSource">Type of source messages.</typeparam>
            <typeparam name="TWindow">Type of messages on the additional window stream.</typeparam>
            <param name="source">The source stream.</param>
            <param name="window">The window-defining stream.</param>
            <param name="windowCreator">The function that creates the actual window to use at every point.</param>
            <param name="sourceDeliveryPolicy">An optional delivery policy for the source stream.</param>
            <param name="windowDeliveryPolicy">An optional delivery policy for the window-defining stream.</param>
            <returns>A stream of computed outputs.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Zip``1(System.Collections.Generic.IEnumerable{Microsoft.Psi.IProducer{``0}},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Zip one or more streams (T) into a single stream while ensuring delivery in originating time order.
            </summary>
            <remarks>Messages are produced in originating-time order; potentially delayed in wall-clock time.
            If multiple messages arrive with the same originating time, they are added in the output array in
            the order of stream ids.</remarks>
            <typeparam name="T">Type of messages.</typeparam>
            <param name="inputs">Collection of input streams to zip.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of zipped messages.</returns>
        </member>
        <member name="M:Microsoft.Psi.Operators.Zip``1(Microsoft.Psi.IProducer{``0},Microsoft.Psi.IProducer{``0},Microsoft.Psi.DeliveryPolicy{``0})">
            <summary>
            Zip two streams (T) into a single stream while ensuring delivery in originating time order.
            </summary>
            <remarks>Messages are produced in originating-time order; potentially delayed in wall-clock time.
            If multiple messages arrive with the same originating time, they are added in the output array in
            the order of stream ids.</remarks>
            <typeparam name="T">Type of messages.</typeparam>
            <param name="input1">First input stream.</param>
            <param name="input2">Second input stream with same message type.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Stream of zipped messages.</returns>
        </member>
        <member name="T:Microsoft.Psi.Generators">
            <summary>
            Factory methods for constructing finite stream generators.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Generators.Sequence``1(Microsoft.Psi.Pipeline,``0,System.Func{``0,``0},System.Int32,System.TimeSpan,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Generates a finite stream of values published at a regular interval from a user-provided function.
            </summary>
            <typeparam name="T">The type of data in the sequence.</typeparam>
            <param name="pipeline">The pipeline that will run this generator.</param>
            <param name="initialValue">The initial value.</param>
            <param name="generateNext">The function that generates a new value based on the previous value.</param>
            <param name="count">The number of messages to publish.</param>
            <param name="interval">The desired time interval between consecutive messages. Defaults to 1 tick.</param>
            <param name="alignmentDateTime">If non-null, this parameter specifies a time to align the generator messages with. If the parameter
            is non-null, the messages will have originating times that align with (i.e., are an integral number of intervals away from) the
            specified alignment time.</param>
            <param name="keepOpen">Indicates whether the stream should be kept open after all messages in the sequence have been posted.</param>
            <returns>A stream of values of type T.</returns>
            <remarks>When the pipeline is in replay mode, the timing of the messages complies with the speed of the pipeline.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Generators.Sequence``1(Microsoft.Psi.Pipeline,``0,System.Func{``0,``0},System.TimeSpan,System.Nullable{System.DateTime})">
            <summary>
            Generates an infinite stream of values published at a regular interval from a user-provided function.
            </summary>
            <typeparam name="T">The type of data in the sequence.</typeparam>
            <param name="pipeline">The pipeline that will run this generator.</param>
            <param name="initialValue">The initial value.</param>
            <param name="generateNext">The function that generates a new value based on the previous value.</param>
            <param name="interval">The desired time interval between consecutive messages. Defaults to 1 tick.</param>
            <param name="alignmentDateTime">If non-null, this parameter specifies a time to align the generator messages with. If the parameter
            is non-null, the messages will have originating times that align with (i.e., are an integral number of intervals away from) the
            specified alignment time.</param>
            <returns>A stream of values of type T.</returns>
            <remarks>When the pipeline is in replay mode, the timing of the messages complies with the speed of the pipeline.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Generators.Sequence``1(Microsoft.Psi.Pipeline,System.Collections.Generic.IEnumerable{``0},System.TimeSpan,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Generates a stream of values published at a regular interval from a specified enumerable.
            </summary>
            <typeparam name="T">The type of data in the sequence.</typeparam>
            <param name="pipeline">The pipeline that will run this generator.</param>
            <param name="enumerable">The sequence to publish.</param>
            <param name="interval">The desired time interval between consecutive messages. Defaults to 1 tick.</param>
            <param name="alignmentDateTime">If non-null, this parameter specifies a time to align the generator messages with. If the parameter
            is non-null, the messages will have originating times that align with (i.e., are an integral number of intervals away from) the
            specified alignment time.</param>
            <param name="keepOpen">Indicates whether the stream should be kept open after all messages in the sequence have been posted.</param>
            <returns>A stream of values of type T.</returns>
            <remarks>When the pipeline is in replay mode, the timing of the messages complies with the speed of the pipeline.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Generators.Sequence``1(Microsoft.Psi.Pipeline,System.Collections.Generic.IEnumerable{System.ValueTuple{``0,System.DateTime}},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Generates a stream of values from a specified enumerable that provides the values and corresponding originating times.
            </summary>
            <typeparam name="T">The type of data in the sequence.</typeparam>
            <param name="pipeline">The pipeline that will run this generator.</param>
            <param name="enumerable">An enumerable sequence of (data, originating time) pairs.</param>
            <param name="startTime">The explicit start time of the data in the enumeration. Supply this parameter when the enumeration contains
            data values with absolute originating times (e.g. [value, time] pairs read from a file), and you want to propose a pipeline replay
            time to take this into account. Otherwise, pipeline playback will be determined by the prevailing replay descriptor (taking into
            account any other components in the pipeline which may have proposed replay times).</param>
            <param name="keepOpen">Indicates whether the stream should be kept open after all the messages in the enumerable have been posted.</param>
            <returns>A stream of values of type T.</returns>
            <remarks>When the pipeline is in replay mode, the timing of the messages complies with the speed of the pipeline.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Generators.Once``1(Microsoft.Psi.Pipeline,``0)">
            <summary>
            Generates stream containing a single message, and keeps the stream open afterwards.
            </summary>
            <typeparam name="T">The type of value to publish.</typeparam>
            <param name="pipeline">The pipeline to attach to.</param>
            <param name="value">The value to publish.</param>
            <returns>A stream of values of type T.</returns>
            <remarks>The generated stream stays open until the pipeline is shut down.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Generators.Return``1(Microsoft.Psi.Pipeline,``0)">
            <summary>
            Generates stream containing a single message, and closes the stream afterwards.
            </summary>
            <typeparam name="T">The type of value to publish.</typeparam>
            <param name="pipeline">The pipeline to attach to.</param>
            <param name="value">The value to publish.</param>
            <returns>A stream containing one value of type T.</returns>
            <remarks>The generated stream closes after the message is published.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Generators.Repeat``1(Microsoft.Psi.Pipeline,``0,System.Int32,System.TimeSpan,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Generates a finite stream of constant values published at a regular interval.
            </summary>
            <typeparam name="T">The type of data in the sequence.</typeparam>
            <param name="pipeline">The pipeline that will run this generator.</param>
            <param name="value">The value to publish.</param>
            <param name="count">The number of messages to publish.</param>
            <param name="interval">The desired time interval between consecutive messages. Defaults to 1 tick.</param>
            <param name="alignmentDateTime">If non-null, this parameter specifies a time to align the generator messages with. If the parameter
            is non-null, the messages will have originating times that align with (i.e., are an integral number of intervals away from) the
            specified alignment time.</param>
            <param name="keepOpen">Indicates whether the stream should be kept open after the specified number of messages have been posted.</param>
            <returns>A stream of values of type T.</returns>
            <remarks>When the pipeline is in replay mode, the timing of the messages complies with the speed of the pipeline. The generated stream closes once the specified number of messages has been published.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Generators.Repeat``1(Microsoft.Psi.Pipeline,``0,System.TimeSpan,System.Nullable{System.DateTime})">
            <summary>
            Generates an infinite stream of constant values published at a regular interval.
            </summary>
            <typeparam name="T">The type of data in the sequence.</typeparam>
            <param name="pipeline">The pipeline that will run this generator.</param>
            <param name="value">The value to publish.</param>
            <param name="interval">The desired time interval between consecutive messages. Defaults to 1 tick.</param>
            <param name="alignmentDateTime">If non-null, this parameter specifies a time to align the generator messages with. If the parameter
            is non-null, the messages will have originating times that align with (i.e., are an integral number of intervals away from) the
            specified alignment time.</param>
            <returns>A stream of values of type T.</returns>
            <remarks>When the pipeline is in replay mode, the timing of the messages complies with the speed of the pipeline.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Generators.Range(Microsoft.Psi.Pipeline,System.Int32,System.Int32,System.TimeSpan,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Generates a stream of a finite range of integer values published at a regular interval.
            </summary>
            <param name="pipeline">The pipeline that will run this generator.</param>
            <param name="start">The starting value.</param>
            <param name="count">The number of messages to publish.</param>
            <param name="interval">The desired time interval between consecutive messages. Defaults to 1 tick.</param>
            <param name="alignDateTime">If non-null, this parameter specifies a time to align the generator messages with. If the parameter
            is non-null, the messages will have originating times that align with the specified time.</param>
            <returns>A stream of consecutive integers.</returns>
            <param name="keepOpen">Indicates whether the stream should be kept open after the specified number of messages have been posted.</param>
            <remarks>When the pipeline is in replay mode, the timing of the messages complies with the speed of the pipeline.</remarks>
        </member>
        <member name="T:Microsoft.Psi.Timers">
            <summary>
            Factory methods for instantiating timers.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Timers.Timer``1(Microsoft.Psi.Pipeline,System.TimeSpan,System.Func{System.DateTime,System.TimeSpan,``0})">
            <summary>
            Generates a stream by invoking a user-provided function at a regular time interval.
            Unlike the generators available in the <see cref="T:Microsoft.Psi.Generators"/> class,
            this operator relies on an OS timer. This guarantees that messages are emitted at regular wall-clock intervals regardless of pipeline load.
            When the pipeline is in replay mode, the originating times of the messages are derived from the virtual pipeline time,
            but if the pipeline slows down, the interval between messages might not appear constant.
            </summary>
            <typeparam name="T">The type of data in the sequence.</typeparam>
            <param name="pipeline">The pipeline that will run this generator.</param>
            <param name="interval">The interval at which to generate messages.</param>
            <param name="generatorFn">The function generating the messages.</param>
            <returns>A stream of messages of type T.</returns>
        </member>
        <member name="M:Microsoft.Psi.Timers.Timer(Microsoft.Psi.Pipeline,System.TimeSpan)">
            <summary>
            Generates a stream of <see cref="T:System.TimeSpan"/> messages indicating the time elapsed from the start of the pipeline.
            Unlike the generators available in the <see cref="T:Microsoft.Psi.Generators"/> class,
            this operator relies on an OS timer. This guarantees that messages are emitted at regular wall-clock intervals regardless of pipeline load.
            When the pipeline is in replay mode, the originating times of the messages are derived from the virtual pipeline time,
            but if the pipeline slows down, the interval between messages might not appear constant.
            </summary>
            <param name="pipeline">The pipeline that will run this generator.</param>
            <param name="interval">The interval at which to generate messages.</param>
            <returns>A stream of messages representing time elapsed since the start of the pipeline.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.InfiniteFileReader.IsActive(System.String,System.String)">
            <summary>
            Indicates whether the specified file is already loaded by a reader or writer.
            </summary>
            <param name="name">Infinite file name.</param>
            <param name="path">Infinite file path.</param>
            <returns>Returns true if the store is already loaded.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.InfiniteFileReader.IsMoreDataExpected">
            <summary>
            Indicates whether more data might be added to this file
            (i.e. the file still has an active writer).
            </summary>
            <returns>Returns true if there is an active writer to this file.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.InfiniteFileReader.HasMoreData">
            <summary>
            Returns true if we are in the middle of a block or
            if we are positioned at the start of the block and the block size prefix is greater than zero.
            If false, use <see cref="M:Microsoft.Psi.Persistence.InfiniteFileReader.IsMoreDataExpected"/> to determine if there could ever be more data
            (i.e. if a writer is still active).
            </summary>
            <returns>True if more data is present, false if no more data is available.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.InfiniteFileReader.MoveNext">
            <summary>
            Prepares to read the next message if one is present.
            </summary>
            <returns>True if a message exists, false if no message is present.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.InfiniteFileWriter.IsActive(System.String,System.String)">
            <summary>
            Indicates whether the specified file has an active writer.
            </summary>
            <param name="name">Infinite file name.</param>
            <param name="path">Infinite file path.</param>
            <returns>Returns true if there is an active writer to this file.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.InfiniteFileWriter.Flush">
            <summary>
            Clears all buffers for this view and causes any buffered data to be written to the underlying file,
            by calling <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush"/>.
            Warning: calling this function can make the persistence system less efficient,
            diminishing the overall throughput.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Persistence.MessageReader">
            <summary>
            Reads message blocks from an infinite file.
            This class is not thread safe. It is the caller's responsibility to synchronize the calls to MoveNext and Read.
            Concurrent read can still be achieved, by instantiating multiple message readers against the same file.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Persistence.MessageWriter">
            <summary>
            Writes message blocks to an infinite file
            The Write methods are thread safe, allowing shared use of one message writer from multiple threads.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Persistence.PsiStoreCommon">
            <summary>
            Static methods shared by the store reader and writer.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreCommon.GetDeterministicHashCode(System.String)">
            <summary>
            Returns a deterministic hash code for the given string.
            </summary>
            <param name="str">The string.</param>
            <returns>A deterministic hash of the string.</returns>
        </member>
        <member name="T:Microsoft.Psi.Persistence.PsiStoreReader">
            <summary>
            Implements a reader that allows access to the multiple streams persisted in a single store.
            The store reader abstracts read/write access to streams,
            and provides the means to read only some of the streams present in the store.
            The reader loads and exposes the metadata associated with the store prior to reading any data.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.#ctor(System.String,System.String,System.Action{System.Collections.Generic.IEnumerable{Microsoft.Psi.Metadata},Microsoft.Psi.Common.RuntimeInfo},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Persistence.PsiStoreReader"/> class.
            </summary>
            <param name="name">The name of the application that generated the persisted files, or the root name of the files.</param>
            <param name="path">The directory in which the main persisted file resides or will reside, or null to create a volatile data store.</param>
            <param name="metadataUpdateHandler">Delegate to call.</param>
            <param name="autoOpenAllStreams">Automatically open all streams.</param>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.#ctor(Microsoft.Psi.Persistence.PsiStoreReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Persistence.PsiStoreReader"/> class.
            This provides a fast way to create a reader,
            by reusing the metadata and index already loaded by an existing store reader.
            </summary>
            <param name="other">Another reader pointing to the same store.</param>
        </member>
        <member name="P:Microsoft.Psi.Persistence.PsiStoreReader.AvailableStreams">
            <summary>
            Gets the set of streams in this store.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Persistence.PsiStoreReader.Name">
            <summary>
            Gets the name of the store.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Persistence.PsiStoreReader.Path">
            <summary>
            Gets the path to the store (this is the path to the directory containing the data, index and catalog files).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Persistence.PsiStoreReader.AutoOpenAllStreams">
            <summary>
            Gets a value indicating whether the reader should read all the messages in the store.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Persistence.PsiStoreReader.MessageCreationTimeInterval">
            <summary>
            Gets the interval between the creation times of the first and last messages written to this store, across all streams.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Persistence.PsiStoreReader.MessageOriginatingTimeInterval">
            <summary>
            Gets the interval between the originating times of the first and last messages written to this store, across all streams.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Persistence.PsiStoreReader.StreamTimeInterval">
            <summary>
            Gets the interval between the opened and closed times, across all streams.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Persistence.PsiStoreReader.Size">
            <summary>
            Gets the size of the store.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Persistence.PsiStoreReader.StreamCount">
            <summary>
            Gets the number of streams in the store.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Persistence.PsiStoreReader.RuntimeVersion">
            <summary>
            Gets the version of the runtime used to write to this store.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.IsStoreLive(System.String,System.String)">
            <summary>
            Indicates whether the specified data store has an active writer.
            </summary>
            <param name="storeName">The store name.</param>
            <param name="storePath">The store path.</param>
            <returns>Returns true if there is an active data file writer to this store.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.IsMoreDataExpected">
            <summary>
            Indicates whether this store is still being written to by an active writer.
            </summary>
            <returns>True if an active writer is still writing to this store, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.OpenStream(System.String)">
            <summary>
            Opens the specified stream for reading.
            </summary>
            <param name="name">The name of the stream to open.</param>
            <returns>The metadata describing the opened stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.OpenStream(System.Int32)">
            <summary>
            Opens the specified stream for reading.
            </summary>
            <param name="id">The id of the stream to open.</param>
            <returns>The metadata describing the opened stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.OpenStream(Microsoft.Psi.PsiStreamMetadata)">
            <summary>
            Opens the specified stream for reading.
            </summary>
            <param name="meta">The metadata describing the stream to open.</param>
            <returns>True if the stream was successfully opened, false if no matching stream could be found.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.CloseStream(System.String)">
            <summary>
            Closes the specified stream. Messages from this stream will be skipped.
            </summary>
            <param name="name">The name of the stream to close.</param>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.CloseStream(System.Int32)">
            <summary>
            Closes the specified stream. Messages from this stream will be skipped.
            </summary>
            <param name="id">The id of the stream to close.</param>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.CloseAllStreams">
            <summary>
            Closes all the streams.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.Contains(System.String)">
            <summary>
            Checks whether the specified stream exist in this store.
            </summary>
            <param name="streamName">The name of the stream to look for.</param>
            <returns>True if a stream with the specified name exists, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.GetMetadata(System.String)">
            <summary>
            Returns a metadata descriptor for the specified stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <returns>The metadata describing the specified stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.GetMetadata(System.Int32)">
            <summary>
            Returns a metadata descriptor for the specified stream.
            </summary>
            <param name="id">The id of the stream.</param>
            <returns>The metadata describing the specified stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.Dispose">
            <summary>
            Closes all associated files.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.Seek(Microsoft.Psi.TimeInterval,System.Boolean)">
            <summary>
            Moves the reader to the start of the specified interval and restricts the read to messages within the interval.
            </summary>
            <param name="interval">The interval for reading data.</param>
            <param name="useOriginatingTime">Indicates whether the interval refers to originating times or creation times.</param>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.GetLiveStoreExtents">
            <summary>
            Gets the current temporal extents of the store by time and originating time.
            </summary>
            <returns>A pair of TimeInterval objects that represent the times and originating times of the first and last messages currently in the store.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.MoveNext(Microsoft.Psi.Envelope@)">
            <summary>
            Positions the reader to the next message from any one of the enabled streams.
            </summary>
            <param name="envelope">The envelope associated with the message read.</param>
            <returns>True if there are more messages, false if no more messages are available.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.Read(System.Byte[]@)">
            <summary>
            Reads the next message from any one of the enabled streams (in serialized form) into the specified buffer.
            </summary>
            <param name="buffer">A buffer to read into.</param>
            <returns>Number of bytes read into the specified buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.ReadAt(Microsoft.Psi.Data.IndexEntry,System.Byte[]@)">
            <summary>
            Reads the message from the specified position, without changing the current cursor position.
            Cannot be used together with MoveNext/Read.
            </summary>
            <param name="indexEntry">The position to read from.</param>
            <param name="buffer">A buffer to read into.</param>
            <returns>Number of bytes read into the specified buffer.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreReader.ReadIndex">
            <summary>
            Returns the position of the next message from any one of the enabled streams.
            </summary>
            <returns>The position of the message, excluding the envelope.</returns>
        </member>
        <member name="T:Microsoft.Psi.Persistence.PsiStoreWriter">
            <summary>
            Implements a writer that can write multiple streams to the same file,
            while cataloging and indexing them.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Persistence.PsiStoreWriter.CatalogExtentSize">
            <summary>
            The size of a catalog file extent.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Persistence.PsiStoreWriter.IndexExtentSize">
            <summary>
            The size of the index file extent.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Persistence.PsiStoreWriter.IndexPageSize">
            <summary>
            The frequency (in bytes) of index entries.
            Consecutive index entries point to locations that are at least this many bytes apart.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreWriter.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Persistence.PsiStoreWriter"/> class.
            </summary>
            <param name="name">The name of the application that generated the persisted files, or the root name of the files.</param>
            <param name="path">The directory in which to create the partition, or null to create a volatile data store.</param>
            <param name="createSubdirectory">If true, a numbered sub-directory is created for this store.</param>
        </member>
        <member name="P:Microsoft.Psi.Persistence.PsiStoreWriter.Name">
            <summary>
            Gets the name of the store.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Persistence.PsiStoreWriter.Path">
            <summary>
            Gets the path to the store.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreWriter.Dispose">
            <summary>
            Closes the store.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreWriter.OpenStream(Microsoft.Psi.PsiStreamMetadata)">
            <summary>
            Creates a stream to write messages to.
            The stream characteristics are extracted from the provided metadata descriptor.
            </summary>
            <param name="meta">The metadata describing the stream to open.</param>
            <returns>The complete metadata for the stream just created.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreWriter.OpenStream(System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            Creates a stream to write messages to.
            </summary>
            <param name="streamId">The id of the stream, unique for this store. All messages with this stream id will be written to this stream.</param>
            <param name="streamName">The name of the stream. This name can be later used to open the stream for reading.</param>
            <param name="indexed">Indicates whether the stream is indexed or not. Indexed streams have a small index entry in the main data file and the actual message body in a large data file.</param>
            <param name="typeName">A name identifying the type of the messages in this stream. This is usually a fully-qualified type name or a data contract name, but can be anything that the caller wants.</param>
            <returns>The complete metadata for the stream just created.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreWriter.TryGetMetadata(System.Int32,Microsoft.Psi.PsiStreamMetadata@)">
            <summary>
            Attempt to get stream metadata (available once stream has been opened).
            </summary>
            <param name="streamId">The id of the stream, unique for this store.</param>
            <param name="meta">The metadata for the stream, if it has previously been opened.</param>
            <returns>True if stream metadata if stream has been opened so that metadata is available.</returns>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreWriter.CloseStream(System.Int32,System.DateTime)">
            <summary>
            Closes the stream and persists the stream statistics.
            </summary>
            <param name="streamId">The id of the stream to close.</param>
            <param name="originatingTime">The originating time when the stream was closed.</param>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreWriter.CloseAllStreams(System.DateTime)">
            <summary>
            Closes the streams and persists the stream statistics.
            </summary>
            <param name="originatingTime">The originating time when the streams are closed.</param>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreWriter.InitializeStreamOpenedTimes(System.DateTime)">
            <summary>
            Initialize stream opened times.
            </summary>
            <param name="originatingTime">The originating time when the streams are opened.</param>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreWriter.Write(Microsoft.Psi.Common.BufferReader,Microsoft.Psi.Envelope)">
            <summary>
            Writes a message (envelope + data) to the store. The message is associated with the open stream that matches the id in the envelope.
            </summary>
            <param name="buffer">The payload to write. This might be written to the main data file or the large data file, depending on stream configuration. </param>
            <param name="envelope">The envelope of the message, identifying the stream, the time and the sequence number of the message.</param>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreWriter.WriteToCatalog(Microsoft.Psi.Metadata)">
            <summary>
            Writes details about a stream to the stream catalog.
            </summary>
            <param name="meta">The stream descriptor to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Persistence.PsiStoreWriter.UpdatePageIndex(System.Int32,Microsoft.Psi.Envelope)">
            <summary>
            Updates the seek index (which is an index into the main data file) if needed (every <see cref="F:Microsoft.Psi.Persistence.PsiStoreWriter.IndexPageSize"/> bytes).
            </summary>
            <param name="bytes">Number of bytes written so far to the data file.</param>
            <param name="lastEnvelope">The envelope of the last message written.</param>
        </member>
        <member name="T:Microsoft.Psi.Remoting.RemoteExporter">
            <summary>
            Exporter for remoting over network transport.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Remoting.RemoteExporter.#ctor(Microsoft.Psi.Pipeline,System.Int32,Microsoft.Psi.Remoting.TransportKind,System.Int64,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Remoting.RemoteExporter"/> class.
            </summary>
            <param name="pipeline">Pipeline to which to attach.</param>
            <param name="port">TCP port on which to listen (default 11411).</param>
            <param name="transport">Transport kind to use.</param>
            <param name="maxBytesPerSecond">Maximum bytes/sec quota (default infinite).</param>
            <param name="bytesPerSecondSmoothingWindowSeconds">Smoothing window over which to compute bytes/sec (default 5 sec.).</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.RemoteExporter.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.Remoting.TransportKind,System.Int64,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Remoting.RemoteExporter"/> class.
            </summary>
            <param name="pipeline">Pipeline to which to attach.</param>
            <param name="transport">Transport kind to use.</param>
            <param name="maxBytesPerSecond">Maximum bytes/sec quota (default infinite).</param>
            <param name="bytesPerSecondSmoothingWindowSeconds">Smoothing window over which to compute bytes/sec (default 5 sec.).</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.RemoteExporter.#ctor(Microsoft.Psi.Data.Exporter,Microsoft.Psi.Remoting.TransportKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Remoting.RemoteExporter"/> class.
            </summary>
            <param name="exporter">Exporter to be remoted.</param>
            <param name="transport">Transport kind to use.</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.RemoteExporter.#ctor(Microsoft.Psi.Data.Importer,Microsoft.Psi.Remoting.TransportKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Remoting.RemoteExporter"/> class.
            </summary>
            <param name="importer">Importer to be remoted.</param>
            <param name="transport">Transport kind to use.</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.RemoteExporter.#ctor(Microsoft.Psi.Data.Exporter,System.Int32,Microsoft.Psi.Remoting.TransportKind,System.Int64,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Remoting.RemoteExporter"/> class.
            </summary>
            <param name="exporter">Exporter to be remoted.</param>
            <param name="port">TCP port on which to listen (default 11411).</param>
            <param name="transport">Transport kind to use.</param>
            <param name="maxBytesPerSecond">Maximum bytes/sec quota (default infinite).</param>
            <param name="bytesPerSecondSmoothingWindowSeconds">Smoothing window over which to compute bytes/sec (default 5 sec.).</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.RemoteExporter.#ctor(Microsoft.Psi.Data.Importer,System.Int32,Microsoft.Psi.Remoting.TransportKind,System.Int64,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Remoting.RemoteExporter"/> class.
            </summary>
            <param name="importer">Importer to be remoted.</param>
            <param name="port">TCP port on which to listen (default 11411).</param>
            <param name="transport">Transport kind to use.</param>
            <param name="maxBytesPerSecond">Maximum bytes/sec quota (default infinite).</param>
            <param name="bytesPerSecondSmoothingWindowSeconds">Smoothing window over which to compute bytes/sec (default 5 sec.).</param>
        </member>
        <member name="P:Microsoft.Psi.Remoting.RemoteExporter.Exporter">
            <summary>
            Gets exporter being remoted.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Remoting.RemoteExporter.Dispose">
            <summary>
            Dispose of remote exporter.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Remoting.RemoteImporter">
            <summary>
            Importer for remoting over network transport.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Remoting.RemoteImporter.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.TimeInterval,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Remoting.RemoteImporter"/> class.
            </summary>
            <param name="pipeline">Pipeline to which to attach.</param>
            <param name="replay">Time interval to be replayed from remote source.</param>
            <param name="host">Remote host name.</param>
            <param name="port">TCP port on which to connect (default 11411).</param>
            <param name="allowSequenceRestart">Whether to allow sequence ID restarts upon connection loss/reacquire.</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.RemoteImporter.#ctor(Microsoft.Psi.Pipeline,System.DateTime,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Remoting.RemoteImporter"/> class.
            </summary>
            <param name="pipeline">Pipeline to which to attach.</param>
            <param name="replayEnd">End of time interval to be replayed from remote.</param>
            <param name="host">Remote host name.</param>
            <param name="port">TCP port on which to connect (default 11411).</param>
            <param name="allowSequenceRestart">Whether to allow sequence ID restarts upon connection loss/reacquire.</param>
            <remarks>In this case the start is a special behavior that is `DateTime.UtcNow` _at the sending `RemoteExporter`_.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Remoting.RemoteImporter.#ctor(Microsoft.Psi.Pipeline,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Remoting.RemoteImporter"/> class.
            </summary>
            <param name="pipeline">Pipeline to which to attach.</param>
            <param name="host">Remote host name.</param>
            <param name="port">TCP port on which to connect (default 11411).</param>
            <param name="allowSequenceRestart">Whether to allow sequence ID restarts upon connection loss/reacquire.</param>
            <remarks>In this case the start is a special behavior that is `DateTime.UtcNow` _at the sending `RemoteExporter`_.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Remoting.RemoteImporter.#ctor(Microsoft.Psi.Data.Importer,Microsoft.Psi.TimeInterval,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Remoting.RemoteImporter"/> class.
            </summary>
            <param name="importer">Importer to receive remoted streams.</param>
            <param name="replay">Time interval to be replayed from remote source.</param>
            <param name="host">Remote host name.</param>
            <param name="port">TCP port on which to connect (default 11411).</param>
            <param name="allowSequenceRestart">Whether to allow sequence ID restarts upon connection loss/reacquire.</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.RemoteImporter.#ctor(Microsoft.Psi.Data.Importer,System.DateTime,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Remoting.RemoteImporter"/> class.
            </summary>
            <param name="importer">Importer to receive remoted streams.</param>
            <param name="replayEnd">End of time interval to be replayed from remote.</param>
            <param name="host">Remote host name.</param>
            <param name="port">TCP port on which to connect (default 11411).</param>
            <param name="allowSequenceRestart">Whether to allow sequence ID restarts upon connection loss/reacquire.</param>
            <remarks>In this case the start is a special behavior that is `DateTime.UtcNow` _at the sending `RemoteExporter`_.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Remoting.RemoteImporter.#ctor(Microsoft.Psi.Data.Importer,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Remoting.RemoteImporter"/> class.
            </summary>
            <param name="importer">Importer to receive remoted streams.</param>
            <param name="host">Remote host name.</param>
            <param name="port">TCP port on which to connect (default 11411).</param>
            <param name="allowSequenceRestart">Whether to allow sequence ID restarts upon connection loss/reacquire.</param>
            <remarks>In this case the start is a special behavior that is `DateTime.UtcNow` _at the sending `RemoteExporter`_.</remarks>
        </member>
        <member name="P:Microsoft.Psi.Remoting.RemoteImporter.Importer">
            <summary>
            Gets importer receiving remoted streams.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Remoting.RemoteImporter.Connected">
            <summary>
            Gets wait handle for remote connection being established.
            </summary>
            <remarks>This should be waited on before opening streams.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Remoting.RemoteImporter.Dispose">
            <summary>
            Dispose of remote importer.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Remoting.DataChunker">
            <summary>
            Chunking datagrams for handling large payloads over a size-limited transport.
            </summary>
            <remarks>
            Payloads larger than the max datagram size need to be split and reconstituted on
            the receiving end. We add our own header which includes an 8-byte ID, a 2-byte
            count of the number of "chunks" to expect, and a 2-byte zero-based number of the
            particular chunk.
            </remarks>
        </member>
        <member name="F:Microsoft.Psi.Remoting.DataChunker.HeaderSize">
            <summary>
            Number of bytes for our chunking header.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Remoting.DataChunker.maxDatagramSize">
            <summary>
            Maximum size of a datagram.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Remoting.DataChunker.payloadSize">
            <summary>
            Number of bytes remaining for payload being sent.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Remoting.DataChunker.buffer">
            <summary>
            Internal buffer used to construct chunked datagrams being sent.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Remoting.DataChunker.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Remoting.DataChunker"/> class.
            </summary>
            <param name="maxDatagramSize">Maximum size of a datagram.</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.DataChunker.GetChunks(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Break the payload into chunks as necessary, encoded with an ID.
            </summary>
            <param name="id">Unique ID across a reasonable time span.</param>
            <param name="payload">Binary payload to be sent.</param>
            <param name="length">Length of payload within given buffer.</param>
            <returns>Chunks as pairs of byte[], length.</returns>
        </member>
        <member name="T:Microsoft.Psi.Remoting.DataUnchunker">
            <summary>
            Chunked UDP datagram receiver.
            </summary>
            <remarks>
            Meant to consume UDP datagrams off the wire, having been encoded by UdpChunkSender.
            </remarks>
        </member>
        <member name="F:Microsoft.Psi.Remoting.DataUnchunker.chunkset">
            <summary>
            Function called upon receiving each set of chunks (for reporting, performance counters, testing, ...)
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Remoting.DataUnchunker.abandoned">
            <summary>
            Function called upon abandonment of a chunk set (for reporting, performance counters, testing, ...)
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Remoting.DataUnchunker.maxDatagramSize">
            <summary>
            Maximum size of a datagram.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Remoting.DataUnchunker.currentId">
            <summary>
            Current chunk ID being assembled.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Remoting.DataUnchunker.numReceived">
            <summary>
            Number of received chunks for the current ID.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Remoting.DataUnchunker.unfinished">
            <summary>
            Flag indicating whether the current payload is still being assembled (waiting for chunks).
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Remoting.DataUnchunker.#ctor(System.Int32,System.Action{System.Int64},System.Action{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Remoting.DataUnchunker" /> class.
            </summary>
            <remarks>
            Datagrams may be dropped or received out of order over UDP. Chunk sets (different IDs) may be interleaved.
            As datagrams arrive, they are assembled - even when received out of order.
            Interleaving causes abandonment. Each time a new ID is seen, the previous one is abandoned. This means
            dropped datagrams are abandoned once followed by a full set.
            </remarks>
            <param name="maxDatagramSize">Maximum size of a datagram (as used when chunking).</param>
            <param name="chunksetFn">Function called upon receiving each set of chunks (for reporting, performance counters, testing, ...)</param>
            <param name="abandonedFn">Function called upon abandonment of a chunk set (for reporting, performance counters, testing, ...)</param>
        </member>
        <member name="P:Microsoft.Psi.Remoting.DataUnchunker.Payload">
            <summary>
            Gets buffer for assembled payload.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Remoting.DataUnchunker.Length">
            <summary>
            Gets length of payload within buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Remoting.DataUnchunker.Receive(System.Byte[])">
            <summary>
            Receive chunk of data.
            </summary>
            <remarks>Decode header and unpack chunk into assembled Payload buffer.</remarks>
            <param name="chunk">Chunk of data (likely from UdpClient).</param>
            <returns>Flag indicating whether full payload has been assembles (or else waiting for more chunks).</returns>
        </member>
        <member name="T:Microsoft.Psi.Remoting.ITransport">
            <summary>
            Interface representing network transport.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Remoting.ITransport.Transport">
            <summary>
            Gets kind of network transport.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Remoting.ITransport.StartListening">
            <summary>
            Start listening (e.g. on IP port).
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Remoting.ITransport.WriteTransportParams(Microsoft.Psi.Common.BufferWriter)">
            <summary>
            Write transport-specific parameters (e.g. port number, pipe name, ...).
            </summary>
            <param name="writer">Buffer writer to which to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.ITransport.ReadTransportParams(Microsoft.Psi.Common.BufferReader)">
            <summary>
            Read transport-specific parameters (e.g. port number, pipe name, ...).
            </summary>
            <param name="reader">Buffer reader from which to read.</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.ITransport.AcceptClient">
            <summary>
            Accept new transport client.
            </summary>
            <returns>Accepted client.</returns>
        </member>
        <member name="M:Microsoft.Psi.Remoting.ITransport.Connect(System.String)">
            <summary>
            Connect to remote host.
            </summary>
            <param name="host">Host name to which to connect.</param>
            <returns>Connected client.</returns>
        </member>
        <member name="T:Microsoft.Psi.Remoting.ITransportClient">
            <summary>
            Interface representing a connected transport client.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Remoting.ITransportClient.ReadSessionId">
            <summary>
            Read session ID (GUID) over transport.
            </summary>
            <returns>ID read.</returns>
        </member>
        <member name="M:Microsoft.Psi.Remoting.ITransportClient.WriteSessionId(System.Guid)">
            <summary>
            Write session ID (GUID) over transport.
            </summary>
            <param name="id">ID to be written.</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.ITransportClient.ReadMessage">
            <summary>
            Read message envelope and raw bytes over transport.
            </summary>
            <returns>Envelope and raw message bytes.</returns>
        </member>
        <member name="M:Microsoft.Psi.Remoting.ITransportClient.WriteMessage(Microsoft.Psi.Envelope,System.Byte[])">
            <summary>
            Write message envelope and raw bytes over transport.
            </summary>
            <param name="envelope">Envelope to be written.</param>
            <param name="message">Message bytes to be written.</param>
        </member>
        <member name="T:Microsoft.Psi.Remoting.NamedPipesTransport">
            <summary>
            Named pipes transport.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Remoting.NamedPipesTransport.Transport">
            <summary>
            Gets kind of network transport.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Remoting.NamedPipesTransport.StartListening">
            <summary>
            Start listening (really, allocate GUID used as pipe name).
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Remoting.NamedPipesTransport.WriteTransportParams(Microsoft.Psi.Common.BufferWriter)">
            <summary>
            Write transport-specific parameter (pipe name).
            </summary>
            <param name="writer">Buffer writer to which to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.NamedPipesTransport.ReadTransportParams(Microsoft.Psi.Common.BufferReader)">
            <summary>
            Read transport-specific parameter (pipe name).
            </summary>
            <param name="reader">Buffer reader from which to read.</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.NamedPipesTransport.AcceptClient">
            <summary>
            Accept new named pipes client.
            </summary>
            <returns>Accepted client.</returns>
        </member>
        <member name="M:Microsoft.Psi.Remoting.NamedPipesTransport.Connect(System.String)">
            <summary>
            Connect to remote host.
            </summary>
            <param name="host">Host name to which to connect.</param>
            <returns>Connected client.</returns>
        </member>
        <member name="M:Microsoft.Psi.Remoting.NamedPipesTransport.Dispose">
            <summary>
            Dispose of named pipes transport.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Remoting.TcpTransport">
            <summary>
            TCP network transport.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Remoting.TcpTransport.Transport">
            <summary>
            Gets kind of network transport.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Remoting.TcpTransport.StartListening">
            <summary>
            Start listening on IP port.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Remoting.TcpTransport.WriteTransportParams(Microsoft.Psi.Common.BufferWriter)">
            <summary>
            Write transport-specific parameter (port number).
            </summary>
            <param name="writer">Buffer writer to which to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.TcpTransport.ReadTransportParams(Microsoft.Psi.Common.BufferReader)">
            <summary>
            Read transport-specific parameter (port number).
            </summary>
            <param name="reader">Buffer reader from which to read.</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.TcpTransport.AcceptClient">
            <summary>
            Accept new TCP client.
            </summary>
            <returns>Accepted client.</returns>
        </member>
        <member name="M:Microsoft.Psi.Remoting.TcpTransport.Connect(System.String)">
            <summary>
            Connect to remote host.
            </summary>
            <param name="host">Host name to which to connect.</param>
            <returns>Connected client.</returns>
        </member>
        <member name="M:Microsoft.Psi.Remoting.TcpTransport.Dispose">
            <summary>
            Dispose of TCP transport.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Remoting.Transport">
            <summary>
            Network transport utility functions.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Remoting.Transport.TransportOfKind(Microsoft.Psi.Remoting.TransportKind)">
            <summary>
            Construct transport from `TransportKind`.
            </summary>
            <param name="kind">Kind of transport.</param>
            <returns>Transport instance.</returns>
        </member>
        <member name="M:Microsoft.Psi.Remoting.Transport.TransportOfName(System.String)">
            <summary>
            Construct transport from name of transport kind.
            </summary>
            <param name="name">Name of transport kind.</param>
            <returns>Transport instance.</returns>
        </member>
        <member name="M:Microsoft.Psi.Remoting.Transport.WriteSessionId(System.Guid,System.Action{System.Byte[],System.Int32})">
            <summary>
            Write session ID (GUID).
            </summary>
            <param name="id">Session ID.</param>
            <param name="writeFn">Function to write raw bytes to transport.</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.Transport.WriteMessage(Microsoft.Psi.Envelope,System.Byte[],Microsoft.Psi.Common.BufferWriter,System.Action{System.Byte[],System.Int32})">
            <summary>
            Write message envelope and raw bytes.
            </summary>
            <param name="envelope">Envelope to be written.</param>
            <param name="message">Message raw bytes to be written.</param>
            <param name="writer">Buffer writer to which to write.</param>
            <param name="writeFn">Function to write raw bytes to transport.</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.Transport.ReadSessionId(System.IO.Stream)">
            <summary>
            Read session ID (GUID) from stream.
            </summary>
            <param name="stream">Stream from which to read.</param>
            <returns>Session ID.</returns>
        </member>
        <member name="M:Microsoft.Psi.Remoting.Transport.ReadMessage(Microsoft.Psi.Common.BufferReader,System.IO.Stream)">
            <summary>
            Read message envelope and raw bytes from stream.
            </summary>
            <param name="reader">Buffer reader used to read.</param>
            <param name="stream">Stream from which to read.</param>
            <returns>Message envelope and raw bytes.</returns>
        </member>
        <member name="M:Microsoft.Psi.Remoting.Transport.Read(System.Byte[],System.Int32,System.IO.Stream)">
            <summary>
            Read raw bytes from stream.
            </summary>
            <param name="buffer">Buffer used to read.</param>
            <param name="size">Size of buffer used to read.</param>
            <param name="stream">Stream from which to read.</param>
        </member>
        <member name="T:Microsoft.Psi.Remoting.TransportKind">
            <summary>
            Kinds of supported network transports.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Remoting.TransportKind.Tcp">
            <summary>
            Transmission Control Protocol/Internet Protocol.
            </summary>
            <remarks>No packet loss.</remarks>
        </member>
        <member name="F:Microsoft.Psi.Remoting.TransportKind.Udp">
            <summary>
            User Datagram Protocol/Internet Protocol.
            </summary>
            <remarks>Possible packet loss.</remarks>
        </member>
        <member name="F:Microsoft.Psi.Remoting.TransportKind.NamedPipes">
            <summary>
            Named Pipes protocol.
            </summary>
            <remarks>No packet loss. Supports security.</remarks>
        </member>
        <member name="T:Microsoft.Psi.Remoting.UdpTransport">
            <summary>
            UDP network transport.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Remoting.UdpTransport.Transport">
            <summary>
            Gets kind of network transport.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Remoting.UdpTransport.StartListening">
            <summary>
            Start listening on IP port.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Remoting.UdpTransport.WriteTransportParams(Microsoft.Psi.Common.BufferWriter)">
            <summary>
            Write transport-specific parameter (port number).
            </summary>
            <param name="writer">Buffer writer to which to write.</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.UdpTransport.ReadTransportParams(Microsoft.Psi.Common.BufferReader)">
            <summary>
            Read transport-specific parameter (port number).
            </summary>
            <param name="reader">Buffer reader from which to read.</param>
        </member>
        <member name="M:Microsoft.Psi.Remoting.UdpTransport.AcceptClient">
            <summary>
            Accept new UDP client.
            </summary>
            <returns>Accepted client.</returns>
        </member>
        <member name="M:Microsoft.Psi.Remoting.UdpTransport.Connect(System.String)">
            <summary>
            Connect to remote host.
            </summary>
            <param name="host">Host name to which to connect.</param>
            <returns>Connected client.</returns>
        </member>
        <member name="M:Microsoft.Psi.Remoting.UdpTransport.Dispose">
            <summary>
            Dispose of UDP transport.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Scheduling.FutureWorkItemQueue">
            <summary>
            A workitem priority queue that dequeues workitems based on the scheduler's clock.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Scheduling.PriorityQueue`1">
            <summary>
            A generic ordered queue that sorts items based on the specified Comparer.
            </summary>
            <typeparam name="T">Type of item in the list.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.PriorityQueue`1.#ctor(System.String,System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Scheduling.PriorityQueue`1"/> class.
            </summary>
            <param name="name">Priority queue name.</param>
            <param name="comparer">Comparison function.</param>
        </member>
        <member name="P:Microsoft.Psi.Scheduling.PriorityQueue`1.Count">
            <summary>
            Gets count of items in queue.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.PriorityQueue`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.PriorityQueue`1.TryPeek(`0@)">
            <summary>
            Try peeking at first item; returning indication of success.
            </summary>
            <param name="workitem">Work item populated if successful.</param>
            <returns>Indication of success.</returns>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.PriorityQueue`1.TryDequeue(`0@,System.Boolean)">
            <summary>
            Try to dequeue work item; returning indication of success.
            </summary>
            <param name="workitem">Work item populated if successful.</param>
            <param name="getAnyMatchingItem">Whether to match any item (or only first).</param>
            <returns>Indication of success.</returns>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Enqueue work item.
            </summary>
            <remarks>
            Enqueuing is O(n), but since we re-enqueue the oldest originating time many times as it is processed by the pipeline,
            the dominant operation is to enqueue at the beginning of the queue.
            </remarks>
            <param name="workitem">Work item to enqueue.</param>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.PriorityQueue`1.EnablePerfCounters(System.String,Microsoft.Psi.IPerfCounters{Microsoft.Psi.Scheduling.PriorityQueueCounters})">
            <summary>
            Enable performance counters.
            </summary>
            <param name="name">Instance name.</param>
            <param name="perf">Performance counters implementation (platform specific).</param>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.PriorityQueue`1.DequeueCondition(`0)">
            <summary>
            Predicate function condition under which to dequeue.
            </summary>
            <param name="item">Candidate item.</param>
            <returns>Whether to dequeue.</returns>
        </member>
        <member name="T:Microsoft.Psi.Scheduling.PriorityQueueCounters">
            <summary>
            The counters we support.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Scheduling.PriorityQueueCounters.WorkitemCount">
            <summary>
            The number of workitems in the global queue.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Scheduling.PriorityQueueCounters.EnqueuingTime">
            <summary>
            The time it took to enqueue a workitem.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Scheduling.PriorityQueueCounters.DequeueingTime">
            <summary>
            The delta between the time the message was posted and the time the message was received.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Scheduling.PriorityQueueCounters.EnqueueingRetries">
            <summary>
            The ratio of retries per enqueue operation.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Scheduling.PriorityQueueCounters.EnqueueingCount">
            <summary>
            The base counter for computing the enqueuing retry count.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Scheduling.PriorityQueueCounters.DequeuingRetries">
            <summary>
            The ratio of retries per dequeue operation.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Scheduling.PriorityQueueCounters.DequeueingCount">
            <summary>
            The base counter for computing the dequeuing retry count.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Scheduling.Scheduler">
            <summary>
            Maintains a queue of workitems and schedules worker threads to empty them.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.Scheduler.#ctor(System.Func{System.Exception,System.Boolean},System.Int32,System.Boolean,System.String,Microsoft.Psi.Clock)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Scheduling.Scheduler"/> class.
            </summary>
            <param name="errorHandler">Error handler function.</param>
            <param name="threadCount">Scheduler thread count.</param>
            <param name="allowSchedulingOnExternalThreads">Allow scheduling on external threads.</param>
            <param name="name">Scheduler name.</param>
            <param name="clock">Optional clock to use (defaults to virtual time offset of DateTime.MinValue and dilation factor of 0).</param>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.Scheduler.#ctor(Microsoft.Psi.Scheduling.Scheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Scheduling.Scheduler"/> class.
            </summary>
            <param name="parent">Parent scheduler from which to inherit settings.</param>
        </member>
        <member name="P:Microsoft.Psi.Scheduling.Scheduler.Clock">
            <summary>
            Gets the scheduler clock.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.Scheduler.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.Scheduler.TryExecute``1(Microsoft.Psi.Scheduling.SynchronizationLock,System.Action{``0},``0,System.DateTime,Microsoft.Psi.Scheduling.SchedulerContext,System.Boolean,System.DateTime@,System.DateTime@)">
            <summary>
            Attempts to execute the delegate immediately, on the calling thread, without scheduling.
            </summary>
            <typeparam name="T">Action argument type.</typeparam>
            <param name="synchronizationObject">Synchronization object.</param>
            <param name="action">Action to execute.</param>
            <param name="argument">Action argument.</param>
            <param name="startTime">Scheduled start time.</param>
            <param name="context">The scheduler context on which to execute the action.</param>
            <param name="outputActionTiming">Indicates whether to output action timing information.</param>
            <param name="actionStartTime">The time the runtime started executing the action.</param>
            <param name="actionEndTime">The time the runtime ended executing the action.</param>
            <returns>Success flag.</returns>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.Scheduler.TryExecute(Microsoft.Psi.Scheduling.SynchronizationLock,System.Action,System.DateTime,Microsoft.Psi.Scheduling.SchedulerContext)">
            <summary>
            Attempts to execute the delegate immediately, on the calling thread, without scheduling.
            </summary>
            <param name="synchronizationObject">Synchronization object.</param>
            <param name="action">Action to execute.</param>
            <param name="startTime">Scheduled start time.</param>
            <param name="context">The scheduler context on which to execute the action.</param>
            <returns>Success flag.</returns>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.Scheduler.Schedule(Microsoft.Psi.Scheduling.SynchronizationLock,System.Action,System.DateTime,Microsoft.Psi.Scheduling.SchedulerContext,System.Boolean,System.Boolean)">
            <summary>
            Enqueues a workitem and, if possible, kicks off a worker thread to pick it up.
            </summary>
            <param name="synchronizationObject">Synchronization object.</param>
            <param name="action">Action to execute.</param>
            <param name="startTime">Scheduled start time.</param>
            <param name="context">The scheduler context on which to schedule the action.</param>
            <param name="asContinuation">Flag whether to execute once current operation completes.</param>
            <param name="allowSchedulingPastFinalization">Allow scheduling past finalization time.</param>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.Scheduler.Freeze(Microsoft.Psi.Scheduling.SynchronizationLock)">
            <summary>
            Prevent further scheduling.
            </summary>
            <param name="synchronizationObject">Synchronization object.</param>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.Scheduler.Thaw(Microsoft.Psi.Scheduling.SynchronizationLock)">
            <summary>
            Allow further scheduling.
            </summary>
            <param name="synchronizationObject">Synchronization object.</param>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.Scheduler.Start(Microsoft.Psi.Clock,System.Boolean)">
            <summary>
            Starts the scheduler. This sets the scheduler clock and a flag indicating whether work items
            should be scheduled only when they are due based on the clock time or as soon as possible.
            </summary>
            <param name="clock">Scheduler clock.</param>
            <param name="delayFutureWorkitemsUntilDue">Delay future workitems until scheduled time.</param>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.Scheduler.Stop(System.Boolean)">
            <summary>
            Reject any new scheduling and block until running threads finish their current work.
            </summary>
            <remarks>Assumes source components have been shut down.</remarks>
            <param name="abandonPendingWorkitems">Whether to abandon queued/future workitems.</param>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.Scheduler.StartScheduling(Microsoft.Psi.Scheduling.SchedulerContext)">
            <summary>
            Starts scheduling work on the given context.
            </summary>
            <param name="context">The context on which scheduling should start.</param>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.Scheduler.StopScheduling(Microsoft.Psi.Scheduling.SchedulerContext)">
            <summary>
            Stops scheduling further work items on the given context.
            </summary>
            <param name="context">The context on which scheduling should cease.</param>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.Scheduler.EnablePerfCounters(System.String,Microsoft.Psi.IPerfCounters{Microsoft.Psi.Scheduling.SchedulerCounters})">
            <summary>
            Enable performance counters.
            </summary>
            <param name="name">Instance name.</param>
            <param name="perf">Performance counters implementation (platform specific).</param>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.Scheduler.PauseForQuiescence(Microsoft.Psi.Scheduling.SchedulerContext)">
            <summary>
            Pause scheduler until all scheduled work items on the given context have completed.
            </summary>
            <param name="context">The scheduler context on which to wait.</param>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.Scheduler.Schedule(Microsoft.Psi.Scheduling.WorkItem,System.Boolean)">
            <summary>
            Enqueues a workitem and, if possible, kicks off a worker thread to pick it up.
            </summary>
            <param name="wi">The work item to schedule.</param>
            <param name="asContinuation">Flag whether to execute once current operation completes.</param>
        </member>
        <member name="T:Microsoft.Psi.Scheduling.SchedulerContext">
            <summary>
            Provides a context in which work items may be scheduled and tracked as a group.
            Maintains a count of the number of work items currently in-flight and an event
            to signal when there are no remaining work items in the context.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Scheduling.SchedulerContext.FinalizeTime">
            <summary>
            Gets or sets the finalization time of the context after which no further work will be scheduled.
            This is initialized to <see cref="F:System.DateTime.MaxValue"/> when scheduling on the context is enabled.
            It may later be set to a finite time prior to terminating scheduling on the context once the
            final scheduling time on the context is known.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Scheduling.SchedulerContext.Empty">
            <summary>
            Gets a wait handle that signals when there are no remaining work items in the context.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.SchedulerContext.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.SchedulerContext.Start(Microsoft.Psi.Clock)">
            <summary>
            Starts scheduling work on the context.
            </summary>
            <param name="clock">The scheduler clock.</param>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.SchedulerContext.Stop">
            <summary>
            Stops scheduling work on the context.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.SchedulerContext.Enter">
            <summary>
            Enters the context before scheduling a work item.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.SchedulerContext.Exit">
            <summary>
            Exits the context after a work item has completed or been abandoned.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Scheduling.SchedulerCounters">
            <summary>
            The counters we support.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Scheduling.SchedulerCounters.LocalToGlobalPromotions">
            <summary>
            The rate of workitems that had to be promoted to the global queue.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Scheduling.SchedulerCounters.LocalQueueCount">
            <summary>
            The number of messages in the thread-local queues.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Scheduling.SchedulerCounters.WorkitemsPerSecond">
            <summary>
            The rate of executed workitems.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Scheduling.SchedulerCounters.GlobalWorkitemsPerSecond">
            <summary>
            The rate of executed workitems from the global workitem queue.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Scheduling.SchedulerCounters.LocalWorkitemsPerSecond">
            <summary>
            The rate of executed workitems from the thread-local workitem queues.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Scheduling.SchedulerCounters.ImmediateWorkitemsPerSecond">
            <summary>
            The rate of executed workitems executed synchronously, without queuing.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Scheduling.SchedulerCounters.ActiveThreads">
            <summary>
            The count of active threads.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Scheduling.SimpleSemaphore">
            <summary>
            Implements a semaphore class that limits the number of threads entering a resource and provides an event when all threads finished.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.SimpleSemaphore.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Scheduling.SimpleSemaphore"/> class.
            </summary>
            <param name="maxThreadCount">Maximum number of threads.</param>
        </member>
        <member name="P:Microsoft.Psi.Scheduling.SimpleSemaphore.Empty">
            <summary>
            Gets empty state wait handle.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Scheduling.SimpleSemaphore.Available">
            <summary>
            Gets availability wait handle.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Scheduling.SimpleSemaphore.MaxThreadCount">
            <summary>
            Gets maximum number of threads.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.SimpleSemaphore.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.SimpleSemaphore.TryEnter">
            <summary>
            Try to enter the semaphore.
            </summary>
            <returns>Success.</returns>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.SimpleSemaphore.Exit">
            <summary>
            Exit the semaphore.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Scheduling.SynchronizationLock">
            <summary>
            Implements a simple lock. Unlike Monitor, this class doesn't enforce thread ownership.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.SynchronizationLock.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Scheduling.SynchronizationLock"/> class.
            </summary>
            <param name="owner">Owner object.</param>
            <param name="locked">Locked flag.</param>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.SynchronizationLock.Hold">
            <summary>
            Prevents anybody else from locking the lock, regardless of current state (i.e. NOT exclusive).
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.SynchronizationLock.TryLock">
            <summary>
            Attempts to take exclusive hold of the lock.
            </summary>
            <returns>True if no one else was holding the lock.</returns>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.SynchronizationLock.Lock">
            <summary>
            Spins until the lock is acquired, with no back-off.
            </summary>
            <returns>Number of spins before the lock was acquired.</returns>
        </member>
        <member name="M:Microsoft.Psi.Scheduling.SynchronizationLock.Release">
            <summary>
            Releases the hold on the lock.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Scheduling.WorkItem">
            <summary>
            A workitem that can be scheduled for execution by the scheduler.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Scheduling.WorkItemQueue">
            <summary>
            A workitem priority queue that locks workitems before dequeueing.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Serialization.ArraySerializer`1">
            <summary>
            Generates efficient code to serialize and deserialize instances of an array.
            </summary>
            <typeparam name="T">The type of objects this serializer knows how to handle.</typeparam>
        </member>
        <member name="T:Microsoft.Psi.Serialization.BufferSerializer">
            <summary>
            Implements efficient code to serialize and deserialize BufferReader instances.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Serialization.ByteArraySerializer">
            <summary>
            Implements efficient code to serialize and deserialize instances of an array of bytes.
            </summary>
            <remarks>
            byte[] would be covered by SimpleArraySerializer. However, it's useful to have this explicit implementation as a performance baseline instead.
            </remarks>
        </member>
        <member name="T:Microsoft.Psi.Serialization.ClassSerializer`1">
            <summary>
            Auto-generated serializer for reference types.
            Implementers of ISerializer should instantiate and call this class to do the heavy lifting.
            </summary>
            <typeparam name="T">The type of objects this serializer knows how to handle.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Serialization.ClassSerializer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Serialization.ClassSerializer`1"/> class.
            The serializer will handle all public and private fields (including property-backing fields and read-only fields)
            of the underlying type.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Serialization.ClassSerializer`1.Serialize(Microsoft.Psi.Common.BufferWriter,`0,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Serializes the given instance to the specified stream.
            </summary>
            <param name="writer">The stream writer to serialize to.</param>
            <param name="instance">The instance to serialize.</param>
            <param name="context">A context object containing accumulated type mappings and object references.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.ClassSerializer`1.Deserialize(Microsoft.Psi.Common.BufferReader,`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Deserializes an instance from the specified stream into the specified target object.
            </summary>
            <param name="reader">The stream reader to deserialize from.</param>
            <param name="target">An instance to deserialize into.</param>
            <param name="context">A context object containing accumulated type mappings and object references.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.ClassSerializer`1.Clone(`0,`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Deep-clones the given object into an existing allocation.
            </summary>
            <param name="instance">The instance to clone.</param>
            <param name="target">An existing instance to clone into.</param>
            <param name="context">A context object containing accumulated type and object references.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.ClassSerializer`1.Clear(`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Provides an opportunity to clear an instance before caching it for future reuse as a cloning or deserialization target.
            The method is expected to call Serializer.Clear on all reference-type fields.
            </summary>
            <param name="target">The instance to clear.</param>
            <param name="context">A context object containing accumulated type mappings and object references.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.ClassSerializer`1.PrepareCloningTarget(`0,`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Prepares an empty object to clone into. This method is expected to allocate a new empty target object if the provided one is insufficient.
            </summary>
            <param name="instance">The instance to clone.</param>
            <param name="target">An existing instance to clone into. Could be null.</param>
            <param name="context">A context object containing accumulated type mappings and object references.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.ClassSerializer`1.PrepareDeserializationTarget(Microsoft.Psi.Common.BufferReader,`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Prepares an empty object to deserialize into. This method is expected to allocate a new empty target object if the provided one is insufficient.
            </summary>
            <param name="reader">The stream reader to deserialize from.</param>
            <param name="target">An optional existing instance to deserialize into. Could be null.</param>
            <param name="context">A context object containing accumulated type mappings and object references.</param>
        </member>
        <member name="T:Microsoft.Psi.Serialization.CloningFlags">
            <summary>
            Enumeration of flags that control the behavior of cloning.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Serialization.CloningFlags.None">
            <summary>
            No flags set.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Serialization.CloningFlags.CloneIntPtrFields">
            <summary>
            Allow cloning of IntPtr fields.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Serialization.CloningFlags.ClonePointerFields">
            <summary>
            Allow cloning of unmanaged pointer fields.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Serialization.CloningFlags.SkipNonSerializedFields">
            <summary>
            Skip cloning of NonSerialized fields.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Serialization.DynamicMessageDeserializer">
            <summary>
            Deserializer for any message type to dynamic.
            </summary>
            <remarks>Uses TypeSchema to construct message type as dynamic primitive and/or ExpandoObject of dynamic.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Serialization.DynamicMessageDeserializer.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Psi.Serialization.TypeSchema})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Serialization.DynamicMessageDeserializer"/> class.
            </summary>
            <param name="typeName">Type name of message.</param>
            <param name="schemas">Collection of known TypeSchemas.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.DynamicMessageDeserializer.Deserialize(Microsoft.Psi.Common.BufferReader)">
            <summary>
            Deserialize message bytes to dynamic.
            </summary>
            <param name="reader">BufferReader of message bytes.</param>
            <returns>dynamic (primitive or ExpandoObject).</returns>
        </member>
        <member name="T:Microsoft.Psi.Serialization.EnumerableSerializer`1">
            <summary>
            Generates efficient code to serialize and deserialize an IEnumerable.
            </summary>
            <typeparam name="T">The type of objects this serializer knows how to handle.</typeparam>
        </member>
        <member name="T:Microsoft.Psi.Serialization.Generator">
            <summary>
            Static class that provides the methods to generate code for serializing, deserializing and cloning objects.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Serialization.Generator.GenerateMethodFromPrototype(System.Reflection.MethodInfo,System.Type,System.Action{System.Reflection.Emit.ILGenerator})">
            <summary>
            Generates a dynamic method with the same signature as the specified method prototype.
            </summary>
            <param name="prototype">the method whose signature to copy.</param>
            <param name="delegateType">A delegate type that matches the method signature.</param>
            <param name="emit">The IL emitter that knows how to populate the method body.</param>
            <returns>The new delegate.</returns>
        </member>
        <member name="M:Microsoft.Psi.Serialization.Generator.EmitException(System.Type,System.String,System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits code to throw an exception with the specified message.
            </summary>
            <param name="type">The type of the exception to throw.</param>
            <param name="message">The message that describes the error.</param>
            <param name="il">The IL generator of the method in which to throw the exception.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.Generator.EmitPrimitiveArrayDeserialize(System.Type,System.Reflection.Emit.ILGenerator)">
             <summary>
             Deserializes a simple struct array from a continuous byte blob, without any packing (one memcpy operation).
             The generated code is equivalent to:
             fixed (void* parray = array)
             {
                 bufferReader.Read(parray, size);
             }
            
             where bufferReader is <see cref="T:Microsoft.Psi.Common.BufferReader"/>.
            
             The common usage is;
             deserializeFn = Generator.GenerateDeserializeMethod{T[]}(il => Generator.EmitPrimitiveArrayDeserialize(typeof(T), il));.
             </summary>
             <param name="type">The element type.</param>
             <param name="il">The IL generator (typically the body of a method being generated).</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.Generator.EmitPrimitiveSerialize(System.Type,System.Reflection.Emit.ILGenerator)">
             <summary>
             Writes a primitive struct as byte blob without any packing.
             The generated code is equivalent to:
             <code>bufferWriter.Write(&amp;val, sizeof(val));</code>
            
             where bufferWriter is <see cref="T:Microsoft.Psi.Common.BufferWriter"/>.
             </summary>
             <param name="type">The type of object to serialize (must be a simple value type).</param>
             <param name="il">The IL generator of a method taking a BufferWriter as first argument and the value type to serialize as the second argument.</param>
             <remarks>We don't have to pin the argument, since we expect a simple struct.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Serialization.Generator.EmitPrimitiveArraySerialize(System.Type,System.Reflection.Emit.ILGenerator)">
             <summary>
             Serializes a simple struct array as continuous byte blob, without any packing (one memcpy operation).
             The generated code is equivalent to:
             fixed (void* parray = array)
             {
                 bufferWriter.Write(parray, array.Length);
             }
            
             where bufferWriter is <see cref="T:Microsoft.Psi.Common.BufferWriter"/>.
            
             The common usage is;
             SerializeFn = Generator.GenerateSerializeMethod{T[]}(il => Generator.EmitPrimitiveArraySerialize(typeof(T), il));.
             </summary>
             <param name="type">The element type.</param>
             <param name="il">The IL generator (typically the body of a method being generated).</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.Generator.IsClearRequired(System.Type,Microsoft.Psi.Serialization.KnownSerializers)">
            <summary>
            Determines whether an instance of the specified type must be cleared prior to reuse
            as a cloning or deserialization target.
            </summary>
            <param name="type">The type to check.</param>
            <param name="serializers">A registry of known serializers.</param>
            <returns>true if the type requires clearing prior to reuse; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.Psi.Serialization.ImmutableSerializer`1">
            <summary>
            Auto-generated serializer for immutable types (both reference and value type).
            </summary>
            <typeparam name="T">The type of objects this serializer knows how to handle.</typeparam>
        </member>
        <member name="T:Microsoft.Psi.Serialization.ISerializer`1">
            <summary>
            The contract for efficient serialization and deserialization of instances of the given type.
            </summary>
            <remarks>Implementers should delegate as much as possible to the default serializers via the static Serializer class.</remarks>
            <typeparam name="T">The type of objects the serializer knows how to handle.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Serialization.ISerializer`1.Initialize(Microsoft.Psi.Serialization.KnownSerializers,Microsoft.Psi.Serialization.TypeSchema)">
            <summary>
            Initializes the serializer with the type schema and target object schema to use.
            </summary>
            <param name="serializers">The set of serialization handlers.</param>
            <param name="targetSchema">
            When the serializer is used to deserialize existing data,
            this parameter provides the schema that was persisted with the data.
            This is in effect the desired schema the serializer should use.
            </param>
            <returns>The schema this serializer is committed to using (this can be either targetSchema, typeSchema or a custom schema).</returns>
            <remarks>
            The serializer must read and write data according to targetSchema.
            A serializer that wants to delegate some of the functionality to its base class can create a modified schema to pass to
            its parent.
            Note that targetSchema is a partial schema, without any MemberInfo information.
            To obtain MemberInfo information, generate a schema from the runtime type
            using <see cref="M:Microsoft.Psi.Serialization.TypeSchema.FromType(System.Type,Microsoft.Psi.Common.RuntimeInfo,System.Type,System.Int32)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Serialization.ISerializer`1.Serialize(Microsoft.Psi.Common.BufferWriter,`0,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Serializes the given instance to the specified stream.
            </summary>
            <param name="writer">The stream writer to serialize to.</param>
            <param name="instance">The instance to serialize.</param>
            <param name="context">A context object containing accumulated type mappings and object references.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.ISerializer`1.Deserialize(Microsoft.Psi.Common.BufferReader,`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Deserializes an instance from the specified stream into the specified target object.
            </summary>
            <param name="reader">The stream reader to deserialize from.</param>
            <param name="target">An instance to deserialize into.</param>
            <param name="context">A context object containing accumulated type mappings and object references.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.ISerializer`1.Clone(`0,`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Deep-clones the given object into an existing allocation.
            </summary>
            <param name="instance">The instance to clone.</param>
            <param name="target">An existing instance to clone into.</param>
            <param name="context">A context object containing accumulated type and object references.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.ISerializer`1.PrepareDeserializationTarget(Microsoft.Psi.Common.BufferReader,`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Prepares an empty object to deserialize into. This method is expected to allocate a new empty target object if the provided one is insufficient.
            </summary>
            <param name="reader">The stream reader to deserialize from.</param>
            <param name="target">An optional existing instance to deserialize into. Could be null.</param>
            <param name="context">A context object containing accumulated type mappings and object references.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.ISerializer`1.PrepareCloningTarget(`0,`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Prepares an empty object to clone into. This method is expected to allocate a new empty target object if the provided one is insufficient.
            </summary>
            <param name="instance">The instance to clone.</param>
            <param name="target">An existing instance to clone into. Could be null.</param>
            <param name="context">A context object containing accumulated type mappings and object references.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.ISerializer`1.Clear(`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            An opportunity to clear an instance before caching it for future reuse as a cloning or deserialization target.
            The method is expected to call Serializer.Clear on all reference-type fields.
            </summary>
            <param name="target">The instance to clear.</param>
            <param name="context">A context object containing accumulated type mappings and object references.</param>
        </member>
        <member name="T:Microsoft.Psi.Serialization.KnownSerializers">
             <summary>
             Represents the registry of all serializers.
             The <see cref="F:Microsoft.Psi.Serialization.KnownSerializers.Default"/> contains system-wide serializers for the current version of the type system.
             Serializers explicitly registered with this instance are used by all other instances unless an override is specified.
             When deserializing from a persisted file, the <see cref="T:Microsoft.Psi.Data.Importer"/> instance returned by
             the <see cref="T:Microsoft.Psi.Data.PsiImporter"/> will create its own KnownSerializer instance, and register serializers
             compatible with the store being open.
             </summary>
             <remarks>
             The following rules are applied when searching for a suitable serializer:
             - registered serializer for the concrete type
             - annotated serializer on the concrete type
             - registered serializer for the generic type the current type is constructed from
             - annotated serializer on the generic type the current type is constructed from
             - auto-generated serializer
            
             When deserializing a polymorphic field, the field's object value might have a different type than the declared (static)
             type of the field (e.g the field is declared as IEnumerable{int} and is assigned an int[]).
             In such cases the runtime might not be able to find the correct type to use,
             and can only instantiate the correct deserializer if one of the following is true:
             - a serializer has been explicitly registered for the object type or contract using <see cref="M:Microsoft.Psi.Serialization.KnownSerializers.Register``2(Microsoft.Psi.Serialization.CloningFlags)"/>
             - a type has been explicitly registered with an explicit contract name <see cref="M:Microsoft.Psi.Serialization.KnownSerializers.Register``1(System.String,Microsoft.Psi.Serialization.CloningFlags)"/> or <see cref="M:Microsoft.Psi.Serialization.KnownSerializers.Register``2(System.String,Microsoft.Psi.Serialization.CloningFlags)"/>.
             </remarks>
        </member>
        <member name="F:Microsoft.Psi.Serialization.KnownSerializers.Default">
            <summary>
            The default set of types and serializer creation rules globally known to the serialization subsystem.
            Custom serializers can be added directly to this set.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Serialization.KnownSerializers.#ctor(Microsoft.Psi.Common.RuntimeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Serialization.KnownSerializers"/> class.
            </summary>
            <param name="runtimeVersion">
            The version of the runtime to be compatible with. This dictates the behavior of automatic serialization.
            </param>
        </member>
        <member name="E:Microsoft.Psi.Serialization.KnownSerializers.SchemaAdded">
            <summary>
            Event which fires when each new type schema has been added.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Serialization.KnownSerializers.RuntimeVersion">
            <summary>
            Gets the version of the serialization subsystem this serializer set is compatible with.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Serialization.KnownSerializers.Schemas">
            <summary>
            Gets the set of schemas in use.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Serialization.KnownSerializers.Register``1(System.String,Microsoft.Psi.Serialization.CloningFlags)">
            <summary>
            Registers type T with the specified contract name.
            Use this overload to deserialize data persisted before a type name change.
            </summary>
            <typeparam name="T">The type to use when deserializing objects with the specified contract.</typeparam>
            <param name="contractName">The name to remap. This can be a full type name or a contract name.</param>
            <param name="cloningFlags">Optional flags that control the cloning behavior for this type.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.KnownSerializers.Register(System.Type,System.String,Microsoft.Psi.Serialization.CloningFlags)">
            <summary>
            Registers a given type with the specified contract name.
            Use this overload to deserialize data persisted before a type name change.
            </summary>
            <param name="type">The type to use when deserializing objects with the specified contract.</param>
            <param name="contractName">The name to remap. This can be a full type name or a contract name.</param>
            <param name="cloningFlags">Optional flags that control the cloning behavior for this type.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.KnownSerializers.Register``1(Microsoft.Psi.Serialization.CloningFlags)">
            <summary>
            Registers a type that the serialization system would not be able find or resolve.
            Use this overload when type T is required in a polymorphic context.
            </summary>
            <typeparam name="T">The type to serialize.</typeparam>
            <param name="cloningFlags">Optional flags that control the cloning behavior for this type.</param>
            <remarks>
            When deserializing a polymorphic field, the field's object value might have a different type than the declared (static)
            type of the field (e.g the field is declared as IEnumerable{int} and is assigned a MyCustomCollection{int}).
            Pre-registering the type allows the runtime to find it in such circumstances.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Serialization.KnownSerializers.Register``2(Microsoft.Psi.Serialization.CloningFlags)">
            <summary>
            Registers a serializer based on type.
            Use this overload to register a custom implementation of <see cref="T:Microsoft.Psi.Serialization.ISerializer`1"/>.
            </summary>
            <typeparam name="T">The type being serialized.</typeparam>
            <typeparam name="TSerializer">
            The corresponding type of serializer to use, which replaces any <see cref="T:Microsoft.Psi.Serialization.SerializerAttribute"/> annotation.
            </typeparam>
            <param name="cloningFlags">Optional flags that control the cloning behavior for this type.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.KnownSerializers.Register``2(System.String,Microsoft.Psi.Serialization.CloningFlags)">
            <summary>
            Registers a type and serializer for the specified contract type.
            Use this overload to deserialize data persisted before a type name change.
            </summary>
            <param name="contractName">The previous contract name of type T.</param>
            <param name="cloningFlags">Optional flags that control the cloning behavior for this type.</param>
            <typeparam name="T">The type being serialized.</typeparam>
            <typeparam name="TSerializer">
            The corresponding type of serializer to use, which replaces any <see cref="T:Microsoft.Psi.Serialization.SerializerAttribute"/> annotation.
            </typeparam>
        </member>
        <member name="M:Microsoft.Psi.Serialization.KnownSerializers.RegisterGenericSerializer(System.Type)">
            <summary>
            Registers a generic serializer, that is, a serializer defined for a generic type.
            The generic serializer must implement <see cref="T:Microsoft.Psi.Serialization.ISerializer`1"/>.
            </summary>
            <param name="genericSerializer">The type of generic serializer to register.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.KnownSerializers.GetCloningFlags(System.Type)">
            <summary>
            Gets the cloning flags for the specified type.
            </summary>
            <param name="type">The type for which to get the cloning flags.</param>
            <returns>The cloning flags for the type.</returns>
        </member>
        <member name="M:Microsoft.Psi.Serialization.KnownSerializers.RegisterSchema(Microsoft.Psi.Serialization.TypeSchema)">
            <summary>
            Captures the schema provided by a persisted store.
            </summary>
            <param name="schema">The schema to register.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.KnownSerializers.AddHandler``1">
            <summary>
            Creates and registers a handler for the specified type according to the rules added so far.
            </summary>
            <typeparam name="T">The type being serialized.</typeparam>
            <returns>The newly created handler.</returns>
        </member>
        <member name="T:Microsoft.Psi.Serialization.MemoryStreamSerializer">
            <summary>
            Provides serialization and cloning methods for <see cref="T:System.IO.MemoryStream"/> objects.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Serialization.MemoryStreamSerializer.MemoryStreamSerializerImpl">
            <summary>
            Provides serialization and cloning methods for <see cref="T:System.IO.MemoryStream"/> objects.
            </summary>
            <remarks>
            Serializes only the actual data in the buffer, rather than the entire buffer capacity, which
            may be greater. Deserializing or cloning into an existing instance will attempt to reuse the
            existing internal buffer capacity, expanding it if necessary. Does not support deserializing
            or cloning into a non-writeable <see cref="T:System.IO.MemoryStream"/>. Deserializing or cloning into a
            non-expandable <see cref="T:System.IO.MemoryStream"/> is supported only if it has sufficient capacity.
            </remarks>
        </member>
        <member name="T:Microsoft.Psi.Serialization.NonSerializer`1">
            <summary>
            Serializers for types that can't really be serialized.
            </summary>
            <typeparam name="T">The type known to not be serializable.</typeparam>
        </member>
        <member name="T:Microsoft.Psi.Serialization.RefHandler`1">
            <summary>
            Internal wrapper for all serializers of reference types.
            Handles the ref envelope, enabling null, shared references and polymorphism.
            It implements both a typed and an untyped version of the serialization contract.
            The typed contract enables efficient calling (no type lookup and parameter boxing),
            while the untyped contract is used for polymorphic fields.
            </summary>
            <typeparam name="T">The type of objects the handler understands.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Serialization.RefHandler`1.Clone(`0,`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Creates a deep clone of the given object.
            </summary>
            <param name="instance">The instance to clone.</param>
            <param name="target">An optional existing instance to clone into.</param>
            <param name="context">A context object containing accumulated type and object references.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.RefHandler`1.Clear(`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            An opportunity to clear an instance before caching it for future reuse as a cloning or deserialization target.
            The method is expected to call Serializer.Clear on all reference-type fields.
            </summary>
            <param name="target">The instance to clear.</param>
            <param name="context">A context object containing accumulated type mappings and object references.</param>
        </member>
        <member name="T:Microsoft.Psi.Serialization.SerializationContext">
            <summary>
            Maintains the objects and types seen during serialization, to enable polymorphism,
            single-instanced references (multiple references to same object) and circular dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Serialization.SerializationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Serialization.SerializationContext"/> class.
            This will become internal. Use Serializer.Schema instead.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Serialization.SerializationContext.#ctor(Microsoft.Psi.Serialization.KnownSerializers)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Serialization.SerializationContext"/> class, with the specified serialization overrides.
            </summary>
            <param name="serializers">The set of custom serializers to use instead of the default ones.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.SerializationContext.Reset">
            <summary>
            Clears the object caches used to identify multiple references to the same instance.
            You must call this method before reusing the context object to serialize another object graph.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Serialization.SerializationHandler">
            <summary>
            Base class for ref and struct handlers, providing a type id for each type.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Serialization.SerializationHandler.RefPrefixNull">
            <summary>
            Reference type prefix indicating null.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Serialization.SerializationHandler.RefPrefixNew">
            <summary>
            Reference type prefix flag indicating new type.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Serialization.SerializationHandler.RefPrefixExisting">
            <summary>
            Reference type prefix flag indicating existing type.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Serialization.SerializationHandler.RefPrefixTyped">
            <summary>
            Reference type prefix flag indicating typed.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Serialization.SerializationHandler.RefPrefixMask">
            <summary>
            Reference type prefix mask.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Serialization.SerializationHandler.RefPrefixValueMask">
            <summary>
            Reference type prefix value mask.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Serialization.SerializationHandler.#ctor(System.Type,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Serialization.SerializationHandler"/> class.
            </summary>
            <param name="targetType">Target serialization type.</param>
            <param name="contractName">Serialization handler contract name.</param>
            <param name="id">Serialization handler ID.</param>
        </member>
        <member name="P:Microsoft.Psi.Serialization.SerializationHandler.Id">
            <summary>
            Gets serialization handler ID.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Serialization.SerializationHandler.Name">
            <summary>
            Gets serialization handler name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Serialization.SerializationHandler.TargetType">
            <summary>
            Gets target serialization type.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Serialization.SerializationHandler.IsImmutableType">
            <summary>
            Gets a value indicating whether type is immutable.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Serialization.SerializationHandler.IsClearRequired">
            <summary>
            Gets or sets a value indicating whether an instance of the target type must
            first be cleared before it is reused as a cloning or deserialization target.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Serialization.SerializationHandler.SizeOf">
            <summary>
            Returns the size, in bytes, of the value type associated with this handler.
            For a reference type, the size returned is the size of a reference value of the corresponding type (4 bytes on 32-bit systems),
            not the size of the data stored in objects referred to by the reference value.
            </summary>
            <returns>The size, in bytes, of the supplied value type.</returns>
        </member>
        <member name="M:Microsoft.Psi.Serialization.SerializationHandler.UntypedSerialize(Microsoft.Psi.Common.BufferWriter,System.Object,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Serializes the given instance to the specified stream.
            </summary>
            <param name="writer">The stream writer to serialize to.</param>
            <param name="instance">The instance to serialize.</param>
            <param name="context">A context object containing accumulated type and object references.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.SerializationHandler.UntypedDeserialize(Microsoft.Psi.Common.BufferReader,System.Object@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Deserializes an instance from the specified stream. This gets called after the ref prefix (if any) has been read.
            </summary>
            <param name="reader">The stream reader to deserialize from.</param>
            <param name="target">An optional existing instance to deserialize into.</param>
            <param name="context">A context object containing accumulated type and object references.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.SerializationHandler.UntypedClone(System.Object,System.Object@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Deep clones the given object into an existing allocation.
            </summary>
            <param name="instance">The instance to clone.</param>
            <param name="target">An existing instance to clone into.</param>
            <param name="context">A context object containing accumulated type and object references.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.SerializationHandler.UntypedClear(System.Object@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            An opportunity to clear the instance before caching it for future reuse as a cloning or deserialization target.
            The method is expected to call Serializer.Clear on all reference-type fields.
            </summary>
            <param name="target">The instance to clone.</param>
            <param name="context">A context object containing accumulated type mappings and object references.</param>
        </member>
        <member name="T:Microsoft.Psi.Serialization.SerializationHandler`1">
            <summary>
            Base class for serialization handlers.
            Custom serializers should cache the handlers they need for serializing object fields.
            </summary>
            <typeparam name="T">The type to serialize.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Serialization.SerializationHandler`1.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Serialization.SerializationHandler`1"/> class.
            </summary>
            <param name="contractName">Serialization handler contract name.</param>
            <param name="id">Serialization handler ID.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.SerializationHandler`1.Serialize(Microsoft.Psi.Common.BufferWriter,`0,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Serialize to buffer.
            </summary>
            <param name="writer">Buffer to which to serialize.</param>
            <param name="instance">Instance to serialize.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.SerializationHandler`1.Deserialize(Microsoft.Psi.Common.BufferReader,`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Deserialize from buffer.
            </summary>
            <param name="reader">Buffer from which to deserialize.</param>
            <param name="target">Target into which to deserialize.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.SerializationHandler`1.Clone(`0,`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Clone instance to target.
            </summary>
            <param name="instance">Instance to be cloned.</param>
            <param name="target">Target into which to clone.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.SerializationHandler`1.Clear(`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Clear target value.
            </summary>
            <param name="target">Target to clear.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="T:Microsoft.Psi.Serialization.SerializerAttribute">
            <summary>
            Identifies the custom serializer to use when serializing an instance of the class or struct to which this attribute is applied.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Serialization.SerializerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Serialization.SerializerAttribute"/> class.
            </summary>
            <param name="serializerType">he type of serializer to use when serializing instances of the class or struct annotated with this attribute.</param>
        </member>
        <member name="P:Microsoft.Psi.Serialization.SerializerAttribute.SerializerType">
            <summary>
            Gets the type of serializer to use when serializing instances of the class or struct annotated with this attribute.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Serialization.SimpleArraySerializer`1">
            <summary>
            Generates efficient code to serialize and deserialize instances of an array containing instances of
            a primitive type or a simple struct (i.e. a struct that has only primitive fields).
            The underlying element type is assumed to not contain any reference fields or struct fields. Thus, the serializer simply copies memory
            and does not invoke the element serializer for each element.
            </summary>
            <typeparam name="T">The type of objects this serializer knows how to handle.</typeparam>
        </member>
        <member name="T:Microsoft.Psi.Serialization.SimpleSerializer`1">
            <summary>
            Default class for custom serializers of primitive types.
            </summary>
            <typeparam name="T">A primitive type (pure value type).</typeparam>
        </member>
        <member name="T:Microsoft.Psi.Serialization.StringArraySerializer">
            <summary>
            Version of array optimized for arrays of strings.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Serialization.StringSerializer">
            <summary>
            Simple string serializer.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Serialization.StructHandler`1">
            <summary>
            Internal wrapper that implements both a typed and an untyped version of the serialization contract.
            The typed contract enables efficient calling (no type lookup and parameter boxing), while the untyped contract is used for polymorphic fields.
            The handler also covers the case of cloning a struct into a boxed struct.
            </summary>
            <typeparam name="T">The type of objects the handler understands.</typeparam>
        </member>
        <member name="T:Microsoft.Psi.Serialization.StructSerializer`1">
            <summary>
            Auto-generated serializer for complex value types (that is, structs having one or more non-primitive fields).
            Implementers of ISerializer should instantiate and call this class to do the heavy lifting.
            </summary>
            <typeparam name="T">The value type this serializer knows how to handle.</typeparam>
        </member>
        <member name="T:Microsoft.Psi.Serialization.TypeMemberSchema">
            <summary>
            The type member schema information.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Serialization.TypeMemberSchema.#ctor(System.String,System.String,System.Boolean,System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Serialization.TypeMemberSchema"/> class.
            </summary>
            <param name="name">The member name.</param>
            <param name="type">The type name, in contract form (either data contract name or assembly-qualified name).</param>
            <param name="isRequired">True if the member is required.</param>
            <param name="memberInfo">A fieldInfo or PropertyInfo object for this member. Optional.</param>
        </member>
        <member name="P:Microsoft.Psi.Serialization.TypeMemberSchema.Name">
            <summary>
            Gets the name of the member.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Serialization.TypeMemberSchema.Type">
            <summary>
            Gets the type of the member, in contract form (either data contract name or assembly-qualified name).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Serialization.TypeMemberSchema.IsRequired">
            <summary>
            Gets a value indicating whether the member is required.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Serialization.TypeMemberSchema.MemberInfo">
            <summary>
            Gets the PropertyInfo or FieldInfo specification for this member.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Serialization.TypeMemberSchema.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Serialization.SchemaGenerator">
            <summary>
            Defines the delegate for a <see cref="T:Microsoft.Psi.Serialization.SchemaGenerator"/>.
            </summary>
            <param name="type">The type for which to generate the <see cref="T:Microsoft.Psi.Serialization.TypeSchema"/>.</param>
            <returns>The generated <see cref="T:Microsoft.Psi.Serialization.TypeSchema"/>.</returns>
        </member>
        <member name="T:Microsoft.Psi.Serialization.TypeFlags">
            <summary>
            Flags indicating type.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Serialization.TypeFlags.IsClass">
            <summary>
            Type is a class (reference).
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Serialization.TypeFlags.IsStruct">
            <summary>
            Type is a struct (value).
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Serialization.TypeFlags.IsContract">
            <summary>
            Type is a contract (interface).
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Serialization.TypeFlags.IsCollection">
            <summary>
            Type is a collection (enumerable).
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Serialization.TypeSchema">
            <summary>
            The schema definition used when serializing and deserializing a type.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Serialization.TypeSchema.#ctor(System.String,System.Int32,System.String,Microsoft.Psi.Serialization.TypeFlags,System.Collections.Generic.IEnumerable{Microsoft.Psi.Serialization.TypeMemberSchema},System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Serialization.TypeSchema"/> class.
            </summary>
            <param name="name">The contract name.</param>
            <param name="id">The id, as generated by <see cref="M:Microsoft.Psi.Serialization.TypeSchema.GetId(System.String)"/>.</param>
            <param name="typeName">The assembly-qualified type name.</param>
            <param name="flags">The type flags.</param>
            <param name="members">The serializable members of the type, in the correct order.</param>
            <param name="version">The schema version, usually representing the version of the code that generated this schema.</param>
            <param name="serializerTypeName">The name of the serializer that produced the schema.</param>
            <param name="serializerVersion">The version of the serializer that produced the schema.</param>
        </member>
        <member name="P:Microsoft.Psi.Serialization.TypeSchema.Flags">
            <summary>
            Gets the type flags.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Serialization.TypeSchema.IsPartial">
            <summary>
            Gets a value indicating whether type is partial.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Serialization.TypeSchema.Members">
            <summary>
            Gets the serializable members of the type.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Serialization.TypeSchema.FromType(System.Type,Microsoft.Psi.Common.RuntimeInfo,System.Type,System.Int32)">
            <summary>
            Generates a schema for the specified type.
            If the type is DataContract-compatible (and version > 0), the schema is based on DataContract rules (see https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/serializable-types?view=netframework-4.7)
            If not, the schema is based on binary serialization rules (see https://docs.microsoft.com/en-us/dotnet/api/system.serializableattribute?view=netframework-4.7).
            </summary>
            <param name="type">The type to generate the schema for.</param>
            <param name="runtimeVersion">The version of the schema generation rules to use (same as <see cref="P:Microsoft.Psi.Serialization.KnownSerializers.RuntimeVersion"/>).</param>
            <param name="serializer">The type of the serializer that will use this schema.</param>
            <param name="serializerVersion">The version of the serializer that will use this schema.</param>
            <returns>A schema describing the serialization information for the specified type.</returns>
        </member>
        <member name="M:Microsoft.Psi.Serialization.TypeSchema.GetContractName(System.Type,Microsoft.Psi.Common.RuntimeInfo)">
            <summary>
            Returns the contract name for a given type, which is either the DataContract name, if available, or the assembly-qualified type name.
            </summary>
            <param name="type">The type to generate the name for.</param>
            <param name="runtimeVersion">The version of the schema generation rules to use (same as <see cref="P:Microsoft.Psi.Serialization.KnownSerializers.RuntimeVersion"/>).</param>
            <returns>The DataContract name, if available, or the assembly-qualified type name.</returns>
        </member>
        <member name="M:Microsoft.Psi.Serialization.TypeSchema.GetId(System.Type,Microsoft.Psi.Common.RuntimeInfo)">
            <summary>
            Generates a unique ID for the type, based on the type's contract name
            (DataContract name, if available, or the assembly-qualified type name).
            </summary>
            <param name="type">The type to generate an ID for.</param>
            <param name="runtimeVersion">The version of the schema generation rules to use (same as <see cref="P:Microsoft.Psi.Serialization.KnownSerializers.RuntimeVersion"/>).</param>
            <returns>A hash of the type's contract name.</returns>
        </member>
        <member name="M:Microsoft.Psi.Serialization.TypeSchema.GetId(System.String)">
            <summary>
            Returns a unique ID for the given contract name.
            </summary>
            <param name="contractName">The contract name.</param>
            <returns>A hash of the contract name.</returns>
        </member>
        <member name="M:Microsoft.Psi.Serialization.TypeSchema.SetSerializerInfo(System.String,System.Int32)">
            <summary>
            Sets the serializer name and version, which a serializer needs to be able to interpret
            when initialized with an older schema.
            </summary>
            <param name="serializerType">The serialize type name.</param>
            <param name="serializerVersion">The serializer version.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.TypeSchema.ValidateCompatibleWith(Microsoft.Psi.Serialization.TypeSchema)">
            <summary>
            Validate whether two schemas are compatible.
            </summary>
            <remarks>Schemas are compatible if all required fields are present in both (regardless of type).</remarks>
            <param name="other">Other type schema.</param>
        </member>
        <member name="M:Microsoft.Psi.Serialization.TypeSchema.GetCompatibleMemberSet(Microsoft.Psi.Serialization.TypeSchema)">
            <summary>
            Retrieves the <see cref="T:System.Reflection.MemberInfo"/> information for each member of the type schema, based on a target schema specification.
            </summary>
            <param name="targetSchema">The schema specification describing which members and in which order to enumerate.
            If null, all members are returned in their original order.</param>
            <returns>A collection of <see cref="T:System.Reflection.MemberInfo"/> objects.</returns>
        </member>
        <member name="T:Microsoft.Psi.IRecyclingPool`1">
            <summary>
            Maintains a cache of unused instances that can be use as cloning or deserialization targets.
            </summary>
            <typeparam name="T">The type of instances that can be cached by this cloner.</typeparam>
        </member>
        <member name="P:Microsoft.Psi.IRecyclingPool`1.OutstandingAllocationCount">
            <summary>
            Gets the number of allocations that have not yet been returned to the pool.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IRecyclingPool`1.AvailableAllocationCount">
            <summary>
            Gets the number of available allocations that have been already returned to the pool.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.IRecyclingPool`1.Get">
            <summary>
            Returns the next available cached object.
            </summary>
            <returns>An unused cached object that can be reused as a target for cloning or deserialization.</returns>
        </member>
        <member name="M:Microsoft.Psi.IRecyclingPool`1.Recycle(`0)">
            <summary>
            Returns an unused object back to the pool.
            The caller must guarantee that the entire object tree (the object and any of the objects it references) are not in use anymore.
            </summary>
            <param name="freeInstance">The object to return to the pool.</param>
        </member>
        <member name="T:Microsoft.Psi.RecyclingPool">
            <summary>
            Message recycling pool class.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.RecyclingPool.Create``1(System.Diagnostics.StackTrace)">
            <summary>
            Creates an appropriate recycling pool for the specified type.
            </summary>
            <param name="debugTrace">An optional debug trace to capture for debugging purposes.</param>
            <typeparam name="T">The type of objects to store in the recycling pool.</typeparam>
            <returns>A new recycling pool.</returns>
        </member>
        <member name="T:Microsoft.Psi.RecyclingPool.Cloner`1">
            <summary>
            Maintains a cache of unused instances that can be use as cloning or deserialization targets.
            This class is not thread safe.
            </summary>
            <typeparam name="T">The type of instances that can be cached by this cloner.</typeparam>
        </member>
        <member name="P:Microsoft.Psi.RecyclingPool.Cloner`1.AvailableAllocationCount">
            <summary>
            Gets the number of available allocations that have been already returned to the pool.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.RecyclingPool.Cloner`1.OutstandingAllocationCount">
            <summary>
            Gets the number of allocations that have not yet been returned to the pool.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.RecyclingPool.Cloner`1.Get">
            <summary>
            Returns the next available cached object.
            </summary>
            <returns>An unused cached object that can be reused as a target for cloning or deserialization.</returns>
        </member>
        <member name="M:Microsoft.Psi.RecyclingPool.Cloner`1.Recycle(`0)">
            <summary>
            Returns an unused object back to the pool.
            The caller must guarantee that the entire object tree (the object and any of the objects it references) are not in use anymore.
            </summary>
            <param name="freeInstance">The object to return to the pool.</param>
        </member>
        <member name="T:Microsoft.Psi.RecyclingPool.FakeCloner`1">
            <summary>
            Used for immutable types.
            </summary>
            <typeparam name="T">The immutable type.</typeparam>
        </member>
        <member name="T:Microsoft.Psi.Serializer">
            <summary>
            The main entry point into the serialization subsystem. Provides methods to serialize, deserialize and clone objects.
            </summary>
            <remarks>
            For efficiency reasons the Serializer doesn't serialize any type information, and as a result it requires the user to identify the type being deserialized.
            In the case of polymorphic fields, the serializer collects type information in the Schema instance passed in to Serialize.
            The caller needs to provide this type info back when calling Deserialize.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Serializer.Serialize``1(Microsoft.Psi.Common.BufferWriter,``0,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Serializes the given instance to the specified stream.
            Call this override from within custom serializers.
            </summary>
            <typeparam name="T">The type of object to serialize.</typeparam>
            <param name="writer">The stream writer to serialize to.</param>
            <param name="instance">The instance to serialize.</param>
            <param name="context">A context object containing accumulated type and object references.</param>
        </member>
        <member name="M:Microsoft.Psi.Serializer.Deserialize``1(Microsoft.Psi.Common.BufferReader,``0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Deserializes the given instance from the specified stream.
            Call this override from within custom serializers.
            </summary>
            <typeparam name="T">The type of object to deserialize.</typeparam>
            <param name="reader">The stream reader to deserialize from.</param>
            <param name="target">An optional existing instance to clone into.</param>
            <param name="context">A context object containing accumulated type and object references.</param>
        </member>
        <member name="M:Microsoft.Psi.Serializer.Clone``1(``0,``0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Makes a deep clone of the given object graph into the target object graph,
            avoiding any allocations, provided that the target object graph has the same shape.
            Call this override from within custom serializers.
            </summary>
            <typeparam name="T">The type of object to clone.</typeparam>
            <param name="instance">The instance to clone.</param>
            <param name="target">An existing instance to clone into.</param>
            <param name="context">An optional serialization context.</param>
        </member>
        <member name="M:Microsoft.Psi.Serializer.DeepClone``1(``0,``0@)">
            <summary>
            Makes a deep clone of the given object graph into the target object graph,
            avoiding any allocations (provided that the target object tree has the same shape).
            </summary>
            <typeparam name="T">The type of object to clone.</typeparam>
            <param name="instance">The instance to clone.</param>
            <param name="target">An existing instance to clone into.</param>
        </member>
        <member name="M:Microsoft.Psi.Serializer.DeepClone``1(``0,Microsoft.Psi.IRecyclingPool{``0})">
            <summary>
            Creates a deep clone of the given object.
            The method will clone into an unused target instance obtained from the specified recycler.
            The caller should return the clone to the recycler when done.
            </summary>
            <typeparam name="T">The type of object to clone.</typeparam>
            <param name="instance">The instance to clone.</param>
            <param name="recycler">An object recycling cache.</param>
            <returns>The deep-clone.</returns>
        </member>
        <member name="M:Microsoft.Psi.Serializer.DeepClone``1(``0)">
            <summary>
            Creates a deep clone of the given object.
            Except for the case of simple value types, this method allocates a new object tree to clone into.
            This can become a performance bottleneck when the clone operation needs to be executed many times.
            In these cases, the other Clone overrides which avoid allocations perform significantly better.
            </summary>
            <typeparam name="T">The type of object to clone.</typeparam>
            <param name="instance">The instance to clone.</param>
            <returns>The deep-clone.</returns>
        </member>
        <member name="M:Microsoft.Psi.Serializer.Clear``1(``0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Clears the instance in preparation for caching it for future reuse as a cloning or deserialization target.
            The method is expected to call Serializer.Clear on all reference-type fields.
            This method is for custom serializers.
            </summary>
            <typeparam name="T">The type of object to clear.</typeparam>
            <param name="target">The instance to clear.</param>
            <param name="context">A context object containing accumulated type mappings and object references.</param>
        </member>
        <member name="M:Microsoft.Psi.Serializer.IsImmutableType``1">
            <summary>
            Returns true if the type is immutable (it is a primitive type or all its fields are read-only immutable types).
            </summary>
            <typeparam name="T">The type to analyze.</typeparam>
            <returns>True if the type is immutable.</returns>
        </member>
        <member name="T:Microsoft.Psi.Streams.QueueTransition">
            <summary>
            Queue state transition.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Streams.QueueTransition.ToEmpty">
            <summary>
            Queue state transition to empty.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Streams.QueueTransition.ToNotEmpty">
            <summary>
            Queue state transition to no longer empty.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Streams.QueueTransition.ToStartThrottling">
            <summary>
            Queue state transition to start throttling.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Streams.QueueTransition.ToStopThrottling">
            <summary>
            Queue state transition to stop throttling.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Streams.QueueTransition.ToClosing">
            <summary>
            Queue state transition to closing.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Streams.DeliveryQueue`1">
            <summary>
            Single producer single consumer queue.
            </summary>
            <typeparam name="T">The type of data in the queue.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Streams.DeliveryQueue`1.#ctor(Microsoft.Psi.DeliveryPolicy{`0},Microsoft.Psi.IRecyclingPool{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Streams.DeliveryQueue`1"/> class.
            </summary>
            <param name="policy">The delivery policy dictating message queuing and delivery behavior.</param>
            <param name="cloner">The recycling pool to recycle dropped messages to.</param>
        </member>
        <member name="M:Microsoft.Psi.Streams.DeliveryQueue`1.TryDequeue(Microsoft.Psi.Message{`0}@,Microsoft.Psi.Streams.QueueTransition@,System.DateTime,Microsoft.Psi.Diagnostics.DiagnosticsCollector.ReceiverCollector,System.Action{Microsoft.Psi.Streams.QueueTransition})">
            <summary>
            Try to dequeue the oldest message that obeys the defined delivery policy.
            </summary>
            <param name="message">The oldest message if it exists, or default otherwise.</param>
            <param name="stateTransition">Struct that describes the status of the internal queue after the dequeue.</param>
            <param name="currentTime">The current time of the pipeline that is used to calculate latency.</param>
            <param name="receiverCollector">Diagnostics collector for this receiver.</param>
            <param name="stateTransitionAction">Action to perform after the queue state transition has been evaluated.</param>
            <returns>True if oldest message that satisfies the policy is found.</returns>
        </member>
        <member name="M:Microsoft.Psi.Streams.DeliveryQueue`1.Enqueue(Microsoft.Psi.Message{`0},Microsoft.Psi.Diagnostics.DiagnosticsCollector.ReceiverCollector,System.DateTime,System.Action{Microsoft.Psi.Streams.QueueTransition},Microsoft.Psi.Streams.QueueTransition@)">
            <summary>
            Enqueue the message while respecting the defined delivery policy.
            </summary>
            <param name="message">The new message.</param>
            <param name="receiverDiagnosticsCollector">Diagnostics collector for this receiver.</param>
            <param name="diagnosticsTime">The time at which diagnostic information is captured about the message being enqueued.</param>
            <param name="stateTransitionAction">Action to perform after the queue state transition has been evaluated.</param>
            <param name="stateTransition">The struct describing the status of the internal queue.</param>
        </member>
        <member name="M:Microsoft.Psi.Streams.DeliveryQueue`1.UpdateState">
            <summary>
            Updates the status of the <see cref="T:Microsoft.Psi.Streams.DeliveryQueue`1"/> object by comparing different properties of the object (before update) with the
            status of the internal Queue object.
            </summary>
            <returns>A <see cref="T:Microsoft.Psi.Streams.QueueTransition"/> struct that describe the current state of the <see cref="T:Microsoft.Psi.Streams.DeliveryQueue`1"/>.</returns>
        </member>
        <member name="T:Microsoft.Psi.EmitterCounters">
            <summary>
            The counters supported by all Emitters.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.EmitterCounters.MessageCount">
            <summary>
            The rate of received messages.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.EmitterCounters.MessageLatency">
            <summary>
            Total latency, from beginning of the pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Emitter`1">
            <summary>
            Represents a stream of messages.
            An emitter is similar to a .Net Event, in that it is used to propagate information to a set of subscriber that is only known at runtime.
            While a subscriber to an event is of type delegate, a subscriber to an emitter is of type <see cref="T:Microsoft.Psi.Receiver`1"/> (which wraps a delegate).
            </summary>
            <typeparam name="T">The type of messages in the stream.</typeparam>
        </member>
        <member name="M:Microsoft.Psi.Emitter`1.#ctor(System.Int32,System.String,System.Object,Microsoft.Psi.Scheduling.SynchronizationLock,Microsoft.Psi.Pipeline,Microsoft.Psi.Emitter{`0}.ValidateMessageHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Emitter`1"/> class.
            This constructor is intended to be used by the framework.
            </summary>
            <param name="id">The id of this stream.</param>
            <param name="name">The name of this stream.</param>
            <param name="owner">The owning component.</param>
            <param name="syncContext">The synchronization context this emitter operates in.</param>
            <param name="pipeline">The pipeline to associate with.</param>
            <param name="messageValidator">An optional message validator.</param>
        </member>
        <member name="T:Microsoft.Psi.Emitter`1.ClosedHandler">
            <summary>
            Emitter closed handler.
            </summary>
            <param name="finalOriginatingTime">Originating time of final message posted.</param>
        </member>
        <member name="T:Microsoft.Psi.Emitter`1.ValidateMessageHandler">
            <summary>
            Validate message handler.
            </summary>
            <param name="data">The data of the message being validated.</param>
            <param name="envelope">The envelope of the message being validated.</param>
        </member>
        <member name="E:Microsoft.Psi.Emitter`1.Closed">
            <summary>
            Event invoked after this emitter is closed.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Emitter`1.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Emitter`1.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Emitter`1.Type">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Emitter`1.Pipeline">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Emitter`1.LastEnvelope">
            <summary>
            Gets the envelope of the last message posted on this emitter.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Emitter`1.HasSubscribers">
            <summary>
            Gets a value indicating whether this emitter has subscribers.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Emitter`1.Owner">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Emitter`1.Microsoft#Psi#IProducer{T}#Out">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Emitter`1.Close(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Emitter`1.Post(`0,System.DateTime)">
            <summary>
            Synchronously calls all subscribers.
            When the call returns, the message is assumed to be unchanged and reusable (that is, no downstream component is referencing it or any of its parts).
            </summary>
            <param name="message">The message to post.</param>
            <param name="originatingTime">The time of the real-world event that led to the creation of this message.</param>
        </member>
        <member name="M:Microsoft.Psi.Emitter`1.DebugView(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Emitter`1.EnablePerfCounters(System.String,Microsoft.Psi.IPerfCounters{Microsoft.Psi.EmitterCounters})">
            <summary>
            Enable performance counters.
            </summary>
            <param name="name">Instance name.</param>
            <param name="perf">Performance counters implementation (platform specific).</param>
        </member>
        <member name="M:Microsoft.Psi.Emitter`1.Subscribe(Microsoft.Psi.Receiver{`0},System.Boolean,Microsoft.Psi.DeliveryPolicy{`0})">
            <summary>
            Allows a receiver to subscribe to messages from this emitter.
            </summary>
            <param name="receiver">The receiver subscribing to this emitter.</param>
            <param name="allowSubscribeWhileRunning"> If true, bypasses checks that subscriptions are not made while pipelines are running.</param>
            <param name="deliveryPolicy">The desired policy to use when delivering messages to the specified receiver.</param>
        </member>
        <member name="T:Microsoft.Psi.IEmitter">
            <summary>
            Enables message passing between components.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IEmitter.Id">
            <summary>
            Gets emitter ID.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IEmitter.Name">
            <summary>
            Gets emitter name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IEmitter.Type">
            <summary>
            Gets emitter type.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IEmitter.Owner">
            <summary>
            Gets emitter owner object.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IEmitter.Pipeline">
            <summary>
            Gets pipeline to which emitter belongs.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IEmitter.LastEnvelope">
            <summary>
            Gets the envelope of the last message posted on this emitter.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IEmitter.HasSubscribers">
            <summary>
            Gets a value indicating whether emitter has subscribers.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.IEmitter.Close(System.DateTime)">
            <summary>
            Close emitter, causing all receivers to be unsubscribed.
            </summary>
            <param name="originatingTime">The originating time at which the emitter closes.</param>
        </member>
        <member name="M:Microsoft.Psi.IEmitter.DebugView(System.String)">
            <summary>
            Enables debug visualization for this stream.
            </summary>
            <param name="debugName">An optional name to use in the visualization window.</param>
            <returns>The debug name of the stream, either as provided or the generated one if one was not specified.</returns>
        </member>
        <member name="T:Microsoft.Psi.IReceiver">
            <summary>
            Enables message passing between components.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IReceiver.Id">
            <summary>
            Gets receiver ID.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IReceiver.Name">
            <summary>
            Gets receiver name.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IReceiver.Type">
            <summary>
            Gets receiver type.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IReceiver.Owner">
            <summary>
            Gets receiver owner object.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IReceiver.Source">
            <summary>
            Gets receiver source emitter.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.IReceiver.LastEnvelope">
            <summary>
            Gets the envelope of the last message received by this receiver.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.ReceiverCounters">
            <summary>
            The counters we support.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.ReceiverCounters.Total">
            <summary>
            The rate of received messages
            </summary>
        </member>
        <member name="F:Microsoft.Psi.ReceiverCounters.Dropped">
            <summary>
            The rate of dropped messages
            </summary>
        </member>
        <member name="F:Microsoft.Psi.ReceiverCounters.Processed">
            <summary>
            The rate of processed messages
            </summary>
        </member>
        <member name="F:Microsoft.Psi.ReceiverCounters.ProcessingTime">
            <summary>
            The time it took to process the message
            </summary>
        </member>
        <member name="F:Microsoft.Psi.ReceiverCounters.IngestTime">
            <summary>
            The delta between the time the message was posted and the time the message was received.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.ReceiverCounters.PipelineExclusiveDelay">
            <summary>
            The delta between the originating time of the message and the time the message was received.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.ReceiverCounters.TimeInQueue">
            <summary>
            The time spent by messages waiting in the delivery queue
            </summary>
        </member>
        <member name="F:Microsoft.Psi.ReceiverCounters.ProcessingDelay">
            <summary>
            The time elapsed between receiving the message and completing its processing.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.ReceiverCounters.PipelineInclusiveDelay">
            <summary>
            The end-to-end delay, from originating time to the time when processing completed.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.ReceiverCounters.QueueSize">
            <summary>
            The number of messages in the queue
            </summary>
        </member>
        <member name="F:Microsoft.Psi.ReceiverCounters.MaxQueueSize">
            <summary>
            The maximum number of messages in the queue at any time
            </summary>
        </member>
        <member name="F:Microsoft.Psi.ReceiverCounters.ThrottlingRequests">
            <summary>
            The rate of throttling requests issued due to queue full
            </summary>
        </member>
        <member name="F:Microsoft.Psi.ReceiverCounters.OutstandingUnrecycled">
            <summary>
            The number of messages that are still in use by the component
            </summary>
        </member>
        <member name="F:Microsoft.Psi.ReceiverCounters.AvailableRecycled">
            <summary>
            The number of messages that are available for recycling
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Receiver`1">
            <summary>
            A receiver that calls the wrapped delegate to deliver messages by reference (hence, unsafe).
            The wrapped delegate must not modify or store the message or any part of the message.
            </summary>
            <remarks>
            The Receiver class uses the Scheduler to deliver messages.
            However, the workitem unit scheduled by the Receiver is the whole receiver queue, not a single message.
            In other words, the Receiver simply schedules itself, and there will be only one workitem present in the scheduler queue for any given Receiver.
            This guarantees message delivery order regardless of the kind of scheduling used by the scheduler.
            </remarks>
            <typeparam name="T">The type of messages that can be received.</typeparam>
        </member>
        <member name="T:Microsoft.Psi.Receiver`1.UnsubscribedHandler">
            <summary>
            Receiver unsubscribed handler.
            </summary>
            <param name="finalOriginatingTime">Originating time of final message posted.</param>
        </member>
        <member name="E:Microsoft.Psi.Receiver`1.Unsubscribed">
            <summary>
            Event invoked after this receiver is unsubscribed from its source emitter.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Receiver`1.Microsoft#Psi#IReceiver#Source">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Receiver`1.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Receiver`1.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Receiver`1.Type">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Receiver`1.Owner">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Psi.Receiver`1.DeliveryPolicy">
            <summary>
            Gets the delivery policy for this receiver.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Receiver`1.Recycler">
            <summary>
            Gets receiver message recycler.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Receiver`1.LastEnvelope">
            <summary>
            Gets the envelope of the last message delivered.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Receiver`1.Microsoft#Psi#IConsumer{T}#In">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Receiver`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Receiver`1.Recycle(Microsoft.Psi.Message{`0})">
            <summary>
            Recycle message.
            </summary>
            <param name="freeMessage">Message to recycle.</param>
        </member>
        <member name="M:Microsoft.Psi.Receiver`1.Recycle(`0)">
            <summary>
            Recycle item.
            </summary>
            <param name="item">Item to recycle.</param>
        </member>
        <member name="M:Microsoft.Psi.Receiver`1.EnablePerfCounters(System.String,Microsoft.Psi.IPerfCounters{Microsoft.Psi.ReceiverCounters})">
            <summary>
            Enable performance counters.
            </summary>
            <param name="name">Instance name.</param>
            <param name="perf">Performance counters implementation (platform specific).</param>
        </member>
        <member name="M:Microsoft.Psi.Receiver`1.ComputeDataSize(`0)">
            <summary>
            Computes data size by running through serialization.
            </summary>
            <param name="data">Message data.</param>
            <returns>Data size (bytes).</returns>
        </member>
    </members>
</doc>
