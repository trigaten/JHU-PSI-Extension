<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Psi.Imaging</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Psi.Imaging.DepthImage">
            <summary>
            Represents a depth image, stored in unmanaged memory.
            </summary>
            <remarks>Using this class it is possible as to allocate a new depth image in unmanaged memory,
            as to just wrap provided pointer to unmanaged memory, where an image is stored.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.#ctor(Microsoft.Psi.Common.UnmanagedBuffer,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.DepthImage"/> class.
            </summary>
            <param name="unmanagedBuffer">The unmanaged array containing the image.</param>
            <param name="width">Depth image width in pixels.</param>
            <param name="height">Depth image height in pixels.</param>
            <param name="stride">Depth image stride (line size in bytes).</param>
            <remarks><para><note>Using this constructor, make sure all specified image attributes are correct
            and correspond to unmanaged memory buffer. If some attributes are specified incorrectly,
            this may lead to exceptions working with the unmanaged memory.</note></para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.DepthImage"/> class.
            </summary>
            <param name="imageData">Pointer to image data in unmanaged memory.</param>
            <param name="width">Depth image width in pixels.</param>
            <param name="height">Depth image height in pixels.</param>
            <param name="stride">Depth image stride (line size in bytes).</param>
            <remarks><para><note>Using this constructor, make sure all specified image attributes are correct
            and correspond to unmanaged memory buffer. If some attributes are specified incorrectly,
            this may lead to exceptions working with the unmanaged memory.</note></para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.DepthImage"/> class.
            </summary>
            <param name="width">Depth image width in pixels.</param>
            <param name="height">Depth image height in pixels.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.DepthImage"/> class.
            </summary>
            <param name="width">Depth image width in pixels.</param>
            <param name="height">Depth image height in pixels.</param>
            <param name="stride">Depth image stride (line size in bytes).</param>
            <remarks><para><note>Using this constructor, make sure all specified image attributes are correct
            and correspond to unmanaged memory buffer. If some attributes are specified incorrectly,
            this may lead to exceptions working with the unmanaged memory.</note></para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.#ctor(System.Drawing.Imaging.BitmapData,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.DepthImage"/> class.
            </summary>
            <param name="bitmapData">Locked bitmap data.</param>
            <param name="makeCopy">Indicates whether a copy is made (default is false).</param>
            <remarks>
            <para>When the <paramref name="makeCopy"/> parameter is false (default), the depth image simply wraps
            the bitmap data. As such, the bitmap data must stay locked for the duration of using the <see cref="T:Microsoft.Psi.Imaging.DepthImage"/> object.
            </para>
            <para>If the <paramref name="makeCopy"/> parameter is set to true, a copy of the bitmap
            data is made, and the bitmap data can be released right after the <see cref="T:Microsoft.Psi.Imaging.DepthImage"/> has been constructed.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.CreateFrom(System.Drawing.Bitmap)">
            <summary>
            Create a new <see cref="T:Microsoft.Psi.Imaging.DepthImage"/> from a specified bitmap.
            </summary>
            <param name="bitmap">A bitmap to create the depth image from.</param>
            <returns>A new depth image, which contains a copy of the specified bitmap.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.CopyFrom(System.Drawing.Imaging.BitmapData)">
            <summary>
            Copies the depth image contents from a specified source locked bitmap data.
            </summary>
            <param name="bitmapData">Source locked bitmap data.</param>
            <remarks><para>The method copies data from the specified bitmap into the depth image.
            The depth image must be allocated and must have the same size as the specified
            bitmap data.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.CopyFrom(System.Drawing.Bitmap)">
            <summary>
            Copies the depth image contents from a specified bitmap.
            </summary>
            <param name="bitmap">A bitmap to copy from.</param>
            <remarks><para>The method copies data from the specified bitmap into the image.
            The image must be allocated and must have the same size.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.CopyFrom(Microsoft.Psi.Imaging.DepthImage)">
            <summary>
            Copies the depth image from a specified source depth image of the same size.
            </summary>
            <param name="source">Source depth image to copy the depth image from.</param>
            <remarks><para>The method copies the current depth image from the specified source depth image.
            The size of the images must be the same.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.CopyFrom(Microsoft.Psi.Imaging.Image)">
            <summary>
            Copies the depth image from a specified source image of the same size and <see cref="F:Microsoft.Psi.Imaging.PixelFormat.Gray_16bpp"/> format.
            </summary>
            <param name="source">Source image to copy the depth image from.</param>
            <remarks><para>The method copies the current depth image from the specified source image.
            The size of the images must be the same, and the source image must have <see cref="F:Microsoft.Psi.Imaging.PixelFormat.Gray_16bpp"/> format.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.DecodeFrom(Microsoft.Psi.Imaging.EncodedDepthImage,Microsoft.Psi.Imaging.IDepthImageFromStreamDecoder)">
            <summary>
            Decodes a specified encoded depth image with a specified decoder into the current depth image.
            </summary>
            <param name="encodedDepthImage">The encoded depth image to decode.</param>
            <param name="depthImageDecoder">The depth image decoder to use.</param>
            <remarks>The depth image width, height and pixel format must match. The method should not be called concurrently.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.Encode(Microsoft.Psi.Imaging.IDepthImageToStreamEncoder)">
            <summary>
            Encodes the depth image using a specified encoder.
            </summary>
            <param name="depthImageEncoder">The depth image encoder to use.</param>
            <returns>A new, corresponding encoded depth image.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.CopyTo(Microsoft.Psi.Imaging.DepthImage)">
            <summary>
            Copies the depth image into a target depth image of the same size.
            </summary>
            <param name="target">Target depth image to copy this depth image to.</param>
            <remarks><para>The method copies the current depth image into the specified depth image.
            The size of the images must be the same.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.CopyTo(Microsoft.Psi.Imaging.Image)">
            <summary>
            Copies the depth image into a target image of the same size.
            </summary>
            <param name="target">Target image to copy this depth image to.</param>
            <remarks><para>The method copies the current depth image into the specified image.
            The size of the images must be the same. The method implements a translation of pixel formats.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.SetPixel(System.Int32,System.Int32,System.UInt16)">
            <summary>
            Sets a pixel in the depth image.
            </summary>
            <param name="x">Pixel's X coordinate.</param>
            <param name="y">Pixel's Y coordinate.</param>
            <param name="gray">Gray value to set pixel to.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the value of a pixel in the depth image.
            </summary>
            <param name="x">Pixel's X coordinate.</param>
            <param name="y">Pixel's Y coordinate.</param>
            <returns>The value of the pixel at the specified coordinates.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.GetPixelRange">
            <summary>
            Gets the range of values in the depth image.
            </summary>
            <returns>A tuple describing the range of values in the depth image.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.CreateEmptyOfSameSize">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Imaging.DepthImage.CustomSerializer">
            <summary>
            Custom serializer used for reading/writing depth images.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.CustomSerializer.ConfigureCompression(Microsoft.Psi.Imaging.IDepthImageCompressor)">
            <summary>
            Configure the type of compression to use when serializing depth images. Default is no compression.
            </summary>
            <param name="depthImageCompressor">Compressor to be used.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.CustomSerializer.Serialize(Microsoft.Psi.Common.BufferWriter,Microsoft.Psi.Imaging.DepthImage,Microsoft.Psi.Serialization.SerializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImage.CustomSerializer.Deserialize(Microsoft.Psi.Common.BufferReader,Microsoft.Psi.Imaging.DepthImage@,Microsoft.Psi.Serialization.SerializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Imaging.DepthImageDecoder">
            <summary>
            Component that decodes a depth image using a specified <see cref="T:Microsoft.Psi.Imaging.IDepthImageFromStreamDecoder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImageDecoder.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.Imaging.IDepthImageFromStreamDecoder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.DepthImageDecoder"/> class.
            </summary>
            <param name="pipeline">Pipeline to add this component to.</param>
            <param name="decoder">The depth image decoder to use.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImageDecoder.Receive(Microsoft.Psi.Shared{Microsoft.Psi.Imaging.EncodedDepthImage},Microsoft.Psi.Envelope)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Imaging.DepthImageEncoder">
            <summary>
            Component that encodes an image using a specified <see cref="T:Microsoft.Psi.Imaging.IDepthImageToStreamEncoder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImageEncoder.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.Imaging.IDepthImageToStreamEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.DepthImageEncoder"/> class.
            </summary>
            <param name="pipeline">Pipeline to add this component to.</param>
            <param name="encoder">The depth image encoder to use.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImageEncoder.Receive(Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage},Microsoft.Psi.Envelope)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Imaging.DepthImagePool">
            <summary>
            Provides a pool of shared depth images.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImagePool.GetOrCreate(System.Int32,System.Int32)">
            <summary>
            Gets or creates a depth image from the pool.
            </summary>
            <param name="width">The requested image width.</param>
            <param name="height">The requested image height.</param>
            <returns>A shared depth image from the pool.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.DepthImagePool.GetOrCreateFrom(System.Drawing.Bitmap)">
            <summary>
            Gets or creates a depth image from the pool and initializes it with a managed <see cref="T:System.Drawing.Bitmap"/> object.
            </summary>
            <param name="bitmap">A bitmap from which to copy the image data.</param>
            <returns>A shared depth image from the pool containing a copy of the image data from <paramref name="bitmap"/>.</returns>
        </member>
        <member name="T:Microsoft.Psi.Imaging.EncodedDepthImage">
            <summary>
            Defines an encoded depth image.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.EncodedDepthImage.stream">
            <summary>
            The memory stream storing the encoded bytes.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.EncodedDepthImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.EncodedDepthImage"/> class.
            </summary>
            <param name="width">Width of encoded depth image in pixels.</param>
            <param name="height">Height of encoded depth image in pixels.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.EncodedDepthImage.#ctor(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.EncodedDepthImage"/> class.
            </summary>
            <param name="width">Width of image in pixels.</param>
            <param name="height">Height of image in pixels.</param>
            <param name="contents">Byte array used to initialize the image data.</param>
        </member>
        <member name="P:Microsoft.Psi.Imaging.EncodedDepthImage.Width">
            <summary>
            Gets the width of the depth image in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.EncodedDepthImage.Height">
            <summary>
            Gets the height of the depth image in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.EncodedDepthImage.PixelFormat">
            <summary>
            Gets the pixel format for the depth image.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.EncodedDepthImage.Dispose">
            <summary>
            Releases the depth image.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.EncodedDepthImage.ToStream">
            <summary>
            Returns the image data as stream.
            </summary>
            <returns>A new stream containing the image data.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.EncodedDepthImage.GetBuffer">
            <summary>
            Returns the depth image data as a byte array.
            </summary>
            <returns>Byte array containing the image data.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.EncodedDepthImage.EncodeFrom(Microsoft.Psi.Imaging.DepthImage,Microsoft.Psi.Imaging.IDepthImageToStreamEncoder)">
            <summary>
            Encodes a specified depth image with a specified encoder into the current encoded image.
            </summary>
            <param name="depthImage">The depth image to encode.</param>
            <param name="depthImageEncoder">The depth image encoder to use.</param>
            <remarks>The depth image width, height and pixel format must match. The method should not be called concurrently.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.EncodedDepthImage.Decode(Microsoft.Psi.Imaging.IDepthImageFromStreamDecoder)">
            <summary>
            Decodes the depth image using a specified decoder.
            </summary>
            <param name="depthImageDecoder">The depth image decoder to use.</param>
            <returns>A new, corresponding decoded depth image.</returns>
        </member>
        <member name="T:Microsoft.Psi.Imaging.EncodedDepthImagePool">
            <summary>
            Provides a pool of shared encoded depth images.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.EncodedDepthImagePool.GetOrCreate(System.Int32,System.Int32)">
            <summary>
            Gets or creates an encoded depth image from the pool.
            </summary>
            <returns>A shared encoded depth image from the pool.</returns>
            <param name="width">The requested encoded depth image width.</param>
            <param name="height">The requested encoded depth image height.</param>
        </member>
        <member name="T:Microsoft.Psi.Imaging.EncodedImage">
            <summary>
            Defines an encoded image.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.EncodedImage.pixelFormat">
            <summary>
            The pixel format was added as a private optional field backed property
            in order to maintain back-compatibility with an earlier version where
            no pixel format was stored on the image.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.EncodedImage.stream">
            <summary>
            The memory stream storing the encoded bytes.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.EncodedImage.#ctor(System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.EncodedImage"/> class.
            </summary>
            <param name="width">Width of encoded image in pixels.</param>
            <param name="height">Height of encoded image in pixels.</param>
            <param name="pixelFormat">Pixel format of the encoded image.</param>
        </member>
        <member name="P:Microsoft.Psi.Imaging.EncodedImage.Width">
            <summary>
            Gets the width of the image in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.EncodedImage.Height">
            <summary>
            Gets the height of the image in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.EncodedImage.PixelFormat">
            <summary>
            Gets the pixel format for the encoded image.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.EncodedImage.Dispose">
            <summary>
            Releases the image.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.EncodedImage.ToStream">
            <summary>
            Returns the image data as stream.
            </summary>
            <returns>A new stream containing the image data.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.EncodedImage.GetBuffer">
            <summary>
            Returns the image data as a byte array.
            </summary>
            <returns>Byte array containing the image data.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.EncodedImage.EncodeFrom(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.IImageToStreamEncoder)">
            <summary>
            Encodes a specified image with a specified encoder into the current encoded image.
            </summary>
            <param name="image">The image to encode.</param>
            <param name="imageEncoder">The image encoder to use.</param>
            <remarks>The image width, height and pixel format must match. The method should not be called concurrently.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.EncodedImage.Decode(Microsoft.Psi.Imaging.IImageFromStreamDecoder)">
            <summary>
            Decodes the image using a specified decoder.
            </summary>
            <param name="imageDecoder">The image decoder to use.</param>
            <returns>A new, corresponding decoded image.</returns>
        </member>
        <member name="T:Microsoft.Psi.Imaging.EncodedImagePool">
            <summary>
            Provides a pool of shared encoded images.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.EncodedImagePool.GetOrCreate(System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Gets or creates an encoded image from the pool.
            </summary>
            <returns>A shared encoded image from the pool.</returns>
            <param name="width">The requested encoded image width.</param>
            <param name="height">The requested encoded image height.</param>
            <param name="pixelFormat">The requested encoded image pixel format.</param>
        </member>
        <member name="T:Microsoft.Psi.Imaging.DepthCompressionMethod">
            <summary>
            Defines type of compression to use when serializing out a <see cref="T:Microsoft.Psi.Imaging.DepthImage"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.DepthCompressionMethod.Png">
            <summary>
            Use PNG compression.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.DepthCompressionMethod.None">
            <summary>
            Use no compression.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Imaging.IDepthImageCompressor">
            <summary>
            Defines a interface for depth image compressors.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.IDepthImageCompressor.DepthCompressionMethod">
            <summary>
            Gets or sets the compression method used by compressor.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.IDepthImageCompressor.Serialize(Microsoft.Psi.Common.BufferWriter,Microsoft.Psi.Imaging.DepthImage,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Serialize compressor.
            </summary>
            <param name="writer">Writer to which to serialize.</param>
            <param name="depthImage">Depth image instance to serialize.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.IDepthImageCompressor.Deserialize(Microsoft.Psi.Common.BufferReader,Microsoft.Psi.Imaging.DepthImage@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Deserialize compressor.
            </summary>
            <param name="reader">Reader from which to deserialize.</param>
            <param name="depthImage">Target depth image to which to deserialize.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="T:Microsoft.Psi.Imaging.IDepthImageFromStreamDecoder">
            <summary>
            Defines a class that can decode a depth image.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.IDepthImageFromStreamDecoder.DecodeFromStream(System.IO.Stream,Microsoft.Psi.Imaging.DepthImage)">
            <summary>
            Decodes an encoded depth image from a stream into a given depth image.
            </summary>
            <param name="stream">Stream containing the encoded depth image.</param>
            <param name="depthImage">The depth image to decode into.</param>
        </member>
        <member name="T:Microsoft.Psi.Imaging.IDepthImageToStreamEncoder">
            <summary>
            Defines a class that can encode a depth image.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.IDepthImageToStreamEncoder.EncodeToStream(Microsoft.Psi.Imaging.DepthImage,System.IO.Stream)">
            <summary>
            Encodes a depth image into a stream.
            </summary>
            <param name="depthImage">Depth image to be encoded.</param>
            <param name="stream">Stream to encode the depth image into.</param>
        </member>
        <member name="T:Microsoft.Psi.Imaging.CompressionMethod">
            <summary>
            Defines type of compression to use when serializing out a <see cref="T:Microsoft.Psi.Imaging.DepthImage"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.CompressionMethod.Jpeg">
            <summary>
            Use JPEG compression.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.CompressionMethod.Png">
            <summary>
            Use PNG compression.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.CompressionMethod.None">
            <summary>
            Use no compression.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Imaging.IImageCompressor">
            <summary>
            Defines a interface for image compressors.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.IImageCompressor.CompressionMethod">
            <summary>
            Gets or sets the compression method used by compressor.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.IImageCompressor.Serialize(Microsoft.Psi.Common.BufferWriter,Microsoft.Psi.Imaging.Image,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Serialize compressor.
            </summary>
            <param name="writer">Writer to which to serialize.</param>
            <param name="image">Image instance to serialize.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.IImageCompressor.Deserialize(Microsoft.Psi.Common.BufferReader,Microsoft.Psi.Imaging.Image@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Deserialize compressor.
            </summary>
            <param name="reader">Reader from which to deserialize.</param>
            <param name="image">Target image to which to deserialize.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="T:Microsoft.Psi.Imaging.IImageFromStreamDecoder">
            <summary>
            Defines a class that can decode an image.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.IImageFromStreamDecoder.DecodeFromStream(System.IO.Stream,Microsoft.Psi.Imaging.Image)">
            <summary>
            Decodes an encoded image from a stream into a specified image.
            </summary>
            <param name="stream">Stream containing the encoded image.</param>
            <param name="image">The image to decode into.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.IImageFromStreamDecoder.GetPixelFormat(System.IO.Stream)">
            <summary>
            Gets the pixel format of an encoded image from a stream.
            </summary>
            <param name="stream">Stream containing the encoded image.</param>
            <returns>The pixel format.</returns>
        </member>
        <member name="T:Microsoft.Psi.Imaging.IImageToStreamEncoder">
            <summary>
            Defines a class that can encode an image.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.IImageToStreamEncoder.EncodeToStream(Microsoft.Psi.Imaging.Image,System.IO.Stream)">
            <summary>
            Encodes an image into a stream.
            </summary>
            <param name="image">Image to be encoded.</param>
            <param name="stream">Stream to encode the image into.</param>
        </member>
        <member name="T:Microsoft.Psi.Imaging.Image">
            <summary>
            Represents an image, stored in unmanaged memory.
            </summary>
            <remarks>Using this class it is possible as to allocate a new image in unmanaged memory,
            as to just wrap provided pointer to unmanaged memory, where an image is stored.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.#ctor(Microsoft.Psi.Common.UnmanagedBuffer,System.Int32,System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.Image"/> class.
            </summary>
            <param name="unmanagedBuffer">The unmanaged array containing the image.</param>
            <param name="width">Image width in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="stride">Image stride (line size in bytes).</param>
            <param name="pixelFormat">Image pixel format.</param>
            <remarks><para><note>Using this constructor, make sure all specified image attributes are correct
            and correspond to unmanaged memory buffer. If some attributes are specified incorrectly,
            this may lead to exceptions working with the unmanaged memory.</note></para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.Image"/> class.
            </summary>
            <param name="imageData">Pointer to image data in unmanaged memory.</param>
            <param name="width">Image width in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="stride">Image stride (line size in bytes).</param>
            <param name="pixelFormat">Image pixel format.</param>
            <remarks><para><note>Using this constructor, make sure all specified image attributes are correct
            and correspond to unmanaged memory buffer. If some attributes are specified incorrectly,
            this may lead to exceptions working with the unmanaged memory.</note></para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.#ctor(System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.Image"/> class.
            </summary>
            <param name="width">Width of image in pixels.</param>
            <param name="height">Height of image in pixels.</param>
            <param name="pixelFormat">Pixel format.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.#ctor(System.Int32,System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.Image"/> class.
            </summary>
            <param name="width">Image width in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="stride">Image stride (line size in bytes).</param>
            <param name="pixelFormat">Image pixel format.</param>
            <remarks><para><note>Using this constructor, make sure all specified image attributes are correct
            and correspond to unmanaged memory buffer. If some attributes are specified incorrectly,
            this may lead to exceptions working with the unmanaged memory.</note></para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.#ctor(System.Drawing.Imaging.BitmapData,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.Image"/> class.
            </summary>
            <param name="bitmapData">Locked bitmap data.</param>
            <param name="makeCopy">Indicates whether a copy is made (default is false).</param>
            <remarks>
            <para>When the <paramref name="makeCopy"/> parameter is false (default), the image simply wraps
            the bitmap data. As such, the bitmap data must stay locked for the duration of using the <see cref="T:Microsoft.Psi.Imaging.Image"/> object.
            </para>
            <para>If the <paramref name="makeCopy"/> parameter is set to true, a copy of the bitmap
            data is made, and the bitmap data can be released right after the <see cref="T:Microsoft.Psi.Imaging.Image"/> has been constructed.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.FromBitmap(System.Drawing.Bitmap)">
            <summary>
            Creates a new <see cref="T:Microsoft.Psi.Imaging.Image"/> from a specified bitmap.
            </summary>
            <param name="bitmap">A bitmap to create the image from.</param>
            <returns>A new image, which contains a copy of the specified bitmap.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CopyFrom(System.Drawing.Imaging.BitmapData)">
            <summary>
            Copies the image contents from a specified source locked bitmap data.
            </summary>
            <param name="bitmapData">Source locked bitmap data.</param>
            <remarks><para>The method copies data from the specified bitmap into the image.
            The image must be allocated and must have the same size as the specified
            bitmap data.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CopyFrom(System.Drawing.Bitmap)">
            <summary>
            Copies the image contents from a specified bitmap.
            </summary>
            <param name="bitmap">A bitmap to copy from.</param>
            <remarks><para>The method copies data from the specified bitmap into the image.
            The image must be allocated and must have the same size.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CopyFrom(Microsoft.Psi.Imaging.Image)">
            <summary>
            Copies the image from a specified source image of the same size.
            </summary>
            <param name="source">Source image to copy the image from.</param>
            <remarks><para>The method copies the current image from the specified source image.
            The size of the images must be the same. Some differences in pixel
            formats are allowed and the method implements a translation of pixel formats.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CopyFrom(Microsoft.Psi.Imaging.DepthImage)">
            <summary>
            Copies the image from a specified source depth image of the same size.
            </summary>
            <param name="source">Source depth image to copy the image from.</param>
            <remarks><para>The method copies the current image from the specified source depth image.
            The size of the images must be the same and the method implements a translation of pixel formats.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.DecodeFrom(Microsoft.Psi.Imaging.EncodedImage,Microsoft.Psi.Imaging.IImageFromStreamDecoder)">
            <summary>
            Decodes a specified encoded image with a specified decoder into the current image.
            </summary>
            <param name="encodedImage">The encoded image to decode.</param>
            <param name="imageDecoder">The image decoder to use.</param>
            <remarks>The image width, height and pixel format must match. The method should not be called concurrently.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.Encode(Microsoft.Psi.Imaging.IImageToStreamEncoder)">
            <summary>
            Encodes the image using a specified encoder.
            </summary>
            <param name="imageEncoder">The image encoder to use.</param>
            <returns>A new, corresponding encoded image.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CopyTo(Microsoft.Psi.Imaging.Image)">
            <summary>
            Copies the image into a specified target image of the same size.
            </summary>
            <param name="target">Target image to copy this image to.</param>
            <remarks><para>The method copies the current image into the specified target image.
            The size of the images must be the same. Some differences in pixel
            formats are allowed and the method implements a translation of pixel formats.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CopyTo(Microsoft.Psi.Imaging.DepthImage)">
            <summary>
            Copies the image into a target depth image of the same size.
            </summary>
            <param name="target">Target depth image to copy this image to.</param>
            <remarks><para>The method copies the current image into the specified depth image.
            The size of the images must be the same, and the image must have a <see cref="F:Microsoft.Psi.Imaging.PixelFormat.Gray_16bpp"/> pixel format.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets a pixel value in the image.
            </summary>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>A tuple containing the channel values of the pixel.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.SetPixel(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a pixel in the image.
            </summary>
            <param name="x">Pixel's X coordinate.</param>
            <param name="y">Pixel's Y coordinate.</param>
            <param name="r">Red channel's value.</param>
            <param name="g">Green channel's value.</param>
            <param name="b">Blue channel's value.</param>
            <param name="a">Alpha channel's value.</param>
            <remarks>
            For grayscale images (Gray_8bpp and Gray_16bpp), the pixel value is set using the <paramref name="r"/>
            parameter. The <paramref name="g"/>, <paramref name="b"/> and <paramref name="a"/> parameters are ignored.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.SetPixel(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a pixel in the image.
            </summary>
            <param name="x">Pixel's X coordinate.</param>
            <param name="y">Pixel's Y coordinate.</param>
            <param name="gray">Gray value to set pixel to.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CreateEmptyOfSameSize">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Imaging.Image.CustomSerializer">
            <summary>
            Custom serializer used for reading/writing images.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CustomSerializer.ConfigureCompression(Microsoft.Psi.Imaging.IImageCompressor)">
            <summary>
            Configure the type of compression to use when serializing images. Default is no compression.
            </summary>
            <param name="imageCompressor">Compressor to be used.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CustomSerializer.Serialize(Microsoft.Psi.Common.BufferWriter,Microsoft.Psi.Imaging.Image,Microsoft.Psi.Serialization.SerializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CustomSerializer.Deserialize(Microsoft.Psi.Common.BufferReader,Microsoft.Psi.Imaging.Image@,Microsoft.Psi.Serialization.SerializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Imaging.ImageBase">
            <summary>
            Represents an image, stored in unmanaged memory.
            </summary>
            <remarks>Using this class it is possible as to allocate a new image in unmanaged memory,
            as to just wrap provided pointer to unmanaged memory, where an image is stored.</remarks>
        </member>
        <member name="F:Microsoft.Psi.Imaging.ImageBase.ExceptionDescriptionUnexpectedPixelFormat">
            <summary>
            Exception message when unexpected pixel format is encountered.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.ImageBase.ExceptionDescriptionSourceDestImageMismatch">
            <summary>
            Exception message when source and destination image sizes don't match.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.#ctor(Microsoft.Psi.Common.UnmanagedBuffer,System.Int32,System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.ImageBase"/> class.
            </summary>
            <param name="image">The unmanaged array containing the image.</param>
            <param name="width">Image width in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="stride">Image stride (line size in bytes).</param>
            <param name="pixelFormat">Image pixel format.</param>
            <remarks><para><note>Using this constructor, make sure all specified image attributes are correct
            and correspond to unmanaged memory buffer. If some attributes are specified incorrectly,
            this may lead to exceptions working with the unmanaged memory.</note></para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.ImageBase"/> class.
            </summary>
            <param name="imageData">Pointer to image data in unmanaged memory.</param>
            <param name="width">Image width in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="stride">Image stride (line size in bytes).</param>
            <param name="pixelFormat">Image pixel format.</param>
            <remarks><para><note>Using this constructor, make sure all specified image attributes are correct
            and correspond to unmanaged memory buffer. If some attributes are specified incorrectly,
            this may lead to exceptions working with the unmanaged memory.</note></para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.#ctor(System.Int32,System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.ImageBase"/> class.
            </summary>
            <param name="width">Image width in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="stride">Image stride (line size in bytes).</param>
            <param name="pixelFormat">Image pixel format.</param>
            <remarks><para><note>Using this constructor, make sure all specified image attributes are correct
            and correspond to unmanaged memory buffer. If some attributes are specified incorrectly,
            this may lead to exceptions working with the unmanaged memory.</note></para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.#ctor(System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.ImageBase"/> class.
            </summary>
            <param name="width">Width of image in pixels.</param>
            <param name="height">Height of image in pixels.</param>
            <param name="pixelFormat">Pixel format.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.#ctor(System.Drawing.Imaging.BitmapData,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.ImageBase"/> class.
            </summary>
            <param name="bitmapData">Locked bitmap data.</param>
            <param name="makeCopy">Indicates whether a copy is made (default is false).</param>
            <remarks>
            <para>When the <paramref name="makeCopy"/> parameter is false (default), the image simply wraps
            the bitmap data. As such, the bitmap data must stay locked for the duration of using the <see cref="T:Microsoft.Psi.Imaging.ImageBase"/> object.
            </para>
            <para>If the <paramref name="makeCopy"/> parameter is set to true, a copy of the bitmap
            data is made, and the bitmap data can be released right after the <see cref="T:Microsoft.Psi.Imaging.ImageBase"/> has been constructed.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Psi.Imaging.ImageBase.UnmanagedBuffer">
            <summary>
            Gets a pointer to unmanaged buffer that wraps the image data in unmanaged memory.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.ImageBase.ImageData">
            <summary>
            Gets a pointer to the image data in unmanaged memory.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.ImageBase.Width">
            <summary>
            Gets image width in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.ImageBase.Height">
            <summary>
            Gets image height in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.ImageBase.Stride">
            <summary>
            Gets image stride (line size in bytes).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.ImageBase.Size">
            <summary>
            Gets the size of the image in bytes (stride times height).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.ImageBase.BitsPerPixel">
            <summary>
            Gets the bits per pixel in the image.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.ImageBase.PixelFormat">
            <summary>
            Gets image pixel format.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.Dispose">
            <summary>
            Disposes the image.
            </summary>
            <remarks>Frees unmanaged resources used by the object. The image becomes unusable after that.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.CopyTo(System.Byte[])">
            <summary>
            Copies the image to a destination byte array buffer.
            </summary>
            <param name="destinationBuffer">The destination buffer to copy the image to.</param>
            <remarks>The method copies current unmanaged image to the specified buffer.
            The buffer must be allocated and must have the same size.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.CopyTo(System.IntPtr,System.Int32,System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Copies the image to a destination pointer.
            </summary>
            <param name="destination">The destination pointer to copy the image to.</param>
            <param name="width">The destination width.</param>
            <param name="height">The destination height.</param>
            <param name="stride">The destination stride.</param>
            <param name="pixelFormat">The destination pixel format.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.CopyFrom(System.Byte[])">
            <summary>
            Copies data from a source byte array buffer into the image.
            </summary>
            <param name="sourceBuffer">The buffer to copy the image from.</param>
            <remarks>The method copies data from the specified buffer into the image.
            The image must be allocated and must have the same size.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.CopyFrom(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies data from a source byte array buffer into the image.
            </summary>
            <param name="sourceBuffer">The buffer to copy the image from.</param>
            <param name="offset">The zero-based index in the buffer from which to start copying.</param>
            <param name="length">The number of bytes to copy.</param>
            <remarks>The method copies data from the specified range in the buffer into
            the image. The image must be allocated and must have the same size.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.CopyFrom(System.IntPtr)">
            <summary>
            Copies data from a source pointer into the image.
            </summary>
            <param name="source">A source pointer to copy the image data from.</param>
            <remarks><para>The method copies data from the specified buffer into the unmanaged image
            The image must be allocated and must have the same size.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.ToBitmap(System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Drawing.Bitmap"/> from the image.
            </summary>
            <param name="makeCopy">Indicates whether to make a copy of the image data or not.</param>
            <returns>A corresponding <see cref="T:System.Drawing.Bitmap"/> image.</returns>
            <remarks>If the <paramref name="makeCopy"/> parameter is set to <see langword="true"/>, then the method
            creates a copy of the image, so the <see cref="T:System.Drawing.Bitmap"/> stays valid even when the
            image gets disposed. However, setting this parameter to <see langword="false"/> creates a <see cref="T:System.Drawing.Bitmap"/> image which is just a wrapper around the image data. In this case, if the image is disposed, the
            will no longer be valid and accessing it will generate an exception.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.ReadBytes(System.Int32,System.Int32)">
            <summary>
            Reads image data as a series of bytes.
            </summary>
            <param name="count">Number of bytes to read.</param>
            <param name="offset">Offset from start of image data.</param>
            <returns>Array of bytes read.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.CreateEmptyOfSameSize">
            <summary>
            Creates an empty image of the same size.
            </summary>
            <returns>An empty image of the same size.</returns>
        </member>
        <member name="T:Microsoft.Psi.Imaging.ImageBase.CustomSerializer`1">
            <summary>
            Custom serializer used for reading/writing images.
            </summary>
            <typeparam name="TImage">The type of image to custom serialize.</typeparam>
        </member>
        <member name="P:Microsoft.Psi.Imaging.ImageBase.CustomSerializer`1.Schema">
            <summary>
            Gets the type schema.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.CustomSerializer`1.Initialize(Microsoft.Psi.Serialization.KnownSerializers,Microsoft.Psi.Serialization.TypeSchema)">
            <summary>
            Initialize custom serializer.
            </summary>
            <param name="serializers">Known serializers.</param>
            <param name="targetSchema">Target type schema.</param>
            <returns>Type schema.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.CustomSerializer`1.Serialize(Microsoft.Psi.Common.BufferWriter,`0,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Serialize image.
            </summary>
            <param name="writer">Writer to which to serialize.</param>
            <param name="instance">Image instance to serialize.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.CustomSerializer`1.PrepareCloningTarget(`0,`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Prepare target for cloning.
            </summary>
            <remarks>Called before Clone, to ensure the target is valid.</remarks>
            <param name="instance">Image instance from which to clone.</param>
            <param name="target">Image into which to clone.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.CustomSerializer`1.Clone(`0,`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Clone image.
            </summary>
            <param name="instance">Image instance to clone.</param>
            <param name="target">Target image into which to clone.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.CustomSerializer`1.PrepareDeserializationTarget(Microsoft.Psi.Common.BufferReader,`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Prepare target for deserialization.
            </summary>
            <remarks>Called before Deserialize, to ensure the target is valid.</remarks>
            <param name="reader">Reader being used.</param>
            <param name="target">Target image into which to deserialize.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.CustomSerializer`1.Deserialize(Microsoft.Psi.Common.BufferReader,`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Deserialize image.
            </summary>
            <param name="reader">Buffer reader being used.</param>
            <param name="target">Target image into which to deserialize.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageBase.CustomSerializer`1.Clear(`0@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Clear image to be reused.
            </summary>
            <remarks>Called once the object becomes unused and can be reused as a cloning target.</remarks>
            <param name="target">Target image to clear.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="T:Microsoft.Psi.Imaging.ImageDecoder">
            <summary>
            Component that decodes an image using a specified <see cref="T:Microsoft.Psi.Imaging.IImageFromStreamDecoder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageDecoder.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.Imaging.IImageFromStreamDecoder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.ImageDecoder"/> class.
            </summary>
            <param name="pipeline">Pipeline to add this component to.</param>
            <param name="decoder">The image decoder to use.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageDecoder.Receive(Microsoft.Psi.Shared{Microsoft.Psi.Imaging.EncodedImage},Microsoft.Psi.Envelope)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Imaging.ImageEncoder">
            <summary>
            Component that encodes an image using a specified <see cref="T:Microsoft.Psi.Imaging.IImageToStreamEncoder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageEncoder.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.Imaging.IImageToStreamEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.ImageEncoder"/> class.
            </summary>
            <param name="pipeline">Pipeline to add this component to.</param>
            <param name="encoder">The image encoder to use.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageEncoder.Receive(Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image},Microsoft.Psi.Envelope)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Imaging.ImageError">
            <summary>
            Defines error metrics returned by Image.Compare().
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.ImageError.MaxError">
            <summary>
            Gets or sets the maximum distance between all pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.ImageError.AvgError">
            <summary>
            Gets or sets the average distance across all pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.ImageError.NumberOutliers">
            <summary>
            Gets or sets the number of outliers (pixels outside of the specified tolerance).
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Imaging.RotationFitMode">
            <summary>
            Mode for determining final output size when rotating an image.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.RotationFitMode.Loose">
            <summary>
            Output image will always be the maximum width/height regardless of the specified
            rotation amount. For instance, if rotating a 100x200 image by 10 degrees the output
            image size will be 224x224. That is the diagonal length and the amount of the rotation
            is irrelevant.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.RotationFitMode.Tight">
            <summary>
            Output image will be fit exactly. Thus if we rotate a 100x200 image by 10 degrees
            the output image size will be 35x180.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Imaging.SamplingMode">
            <summary>
            Sampling mode used by various imaging operators.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.SamplingMode.Point">
            <summary>
            Sampling mode using nearest neighbor interpolation.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.SamplingMode.Bilinear">
            <summary>
            Sampling mode using bilinear interpolation.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.SamplingMode.Bicubic">
            <summary>
            Sampling mode using bicubic interpolation.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Imaging.Threshold">
            <summary>
            Thresholding modes.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.Threshold.Binary">
            <summary>
            Thresholds pixels such that:
               dst(x,y) = maxvalue   if (src(x,y)>threshold)
                        = 0          otherwise
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.Threshold.BinaryInv">
            <summary>
            Thresholds pixels such that:
               dst(x,y) = 0          if (src(x,y)>threshold)
                        = maxvalue   otherwise
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.Threshold.Truncate">
            <summary>
            Thresholds pixels such that:
               dst(x,y) = threshold   if (src(x,y)>threshold)
                        = src(x,y)    otherwise
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.Threshold.ToZero">
            <summary>
            Thresholds pixels such that:
               dst(x,y) = src(x,y)   if (src(x,y)>threshold)
                        = 0          otherwise
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.Threshold.ToZeroInv">
            <summary>
            Thresholds pixels such that:
               dst(x,y) = 0          if (src(x,y)>threshold)
                        = src(x,y)   otherwise
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Imaging.FlipMode">
            <summary>
            Axis along which to flip an image.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.FlipMode.None">
            <summary>
            Leave image unflipped
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.FlipMode.AlongHorizontalAxis">
            <summary>
            Flips image along the horizontal axis
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.FlipMode.AlongVerticalAxis">
            <summary>
            Flips image along the vertical axis
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Imaging.Operators">
            <summary>
            Various imaging operators.
            </summary>
            <summary>
            Set of operators used for drawing on an image.
            </summary>
            <summary>
            Set of transforms for copying image data.
            </summary>
            <summary>
            Basic color transforms on images.
            </summary>
            <summary>
            Imaging math operators.
            </summary>
            <summary>
            Implements operators for processing streams of images.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.Operators.ExtractRedChannel">
            <summary>
            Constant passed to ExtractChannel to indcate the red channel should be extracted.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.Operators.ExtractGreenChannel">
            <summary>
            Constant passed to ExtractChannel to indcate the green channel should be extracted.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.Operators.ExtractBlueChannel">
            <summary>
            Constant passed to ExtractChannel to indicate the blue channel should be extracted.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.Operators.ExtractAlphaChannel">
            <summary>
            Constant passed to ExtractChannel to indicate the alpha channel should be extracted.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.SetGrayscalePalette(System.Drawing.Bitmap)">
            <summary>
            Set palette of the 8 bpp indexed image to grayscale.
            </summary>
            <param name="bitmap">Image to initialize.</param>
            <remarks>The method initializes palette of
            <see cref="T:System.Drawing.Imaging.PixelFormat">Format8bppIndexed</see>
            image with 256 gradients of gray color.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Rgb2Gray(System.Byte,System.Byte,System.Byte)">
            <summary>
            Function to convert RGB color into grayscale.
            </summary>
            <param name="r">red component (Range=0..255).</param>
            <param name="g">green component (Range=0..255).</param>
            <param name="b">Blue component (Range=0..255).</param>
            <returns>Grayscale value (Range=0..255).</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Rgb2Gray(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Function to convert RGB color into grayscale.
            </summary>
            <param name="r">red component (Range=0..65535).</param>
            <param name="g">green component (Range=0..65535).</param>
            <param name="b">Blue component (Range=0..65535).</param>
            <returns>Grayscale value (Range=0..65535).</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Convert(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Converts an image to the specified pixel format.
            </summary>
            <param name="image">The image to convert.</param>
            <param name="format">The pixel format of the converted image.</param>
            <returns>A copy of the image in the specified format.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Flip(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.FlipMode)">
            <summary>
            Flips an image along a specified axis.
            </summary>
            <param name="image">Image to flip.</param>
            <param name="mode">Axis along which to flip.</param>
            <returns>A new flipped image.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Flip(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.FlipMode)">
            <summary>
            Flips an image along a specified axis.
            </summary>
            <param name="image">Image to flip.</param>
            <param name="destImage">Destination image where to store results.</param>
            <param name="mode">Axis along which to flip.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Scale(Microsoft.Psi.Imaging.Image,System.Single,System.Single,Microsoft.Psi.Imaging.SamplingMode)">
            <summary>
            Resizes an image by the specified scale factors using the specified sampling mode.
            </summary>
            <param name="image">Image to resize.</param>
            <param name="scaleX">Scale factor to apply in X direction.</param>
            <param name="scaleY">Scale factor to apply in Y direction.</param>
            <param name="mode">Sampling mode for sampling of pixels.</param>
            <returns>Returns a new image scaled by the specified scale factors.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Scale(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image,System.Single,System.Single,Microsoft.Psi.Imaging.SamplingMode)">
            <summary>
            Resizes an image by the specified scale factors using the specified sampling mode.
            </summary>
            <param name="image">Image to resize.</param>
            <param name="destImage">Image to store scaled results.</param>
            <param name="scaleX">Scale factor to apply in X direction.</param>
            <param name="scaleY">Scale factor to apply in Y direction.</param>
            <param name="mode">Sampling mode for sampling of pixels.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Compare(Microsoft.Psi.Imaging.ImageBase,Microsoft.Psi.Imaging.ImageBase,System.Double,System.Double,Microsoft.Psi.Imaging.ImageError@)">
            <summary>
            Compares two images to see if they are identical (within some specified tolerance).
            </summary>
            <param name="image1">First image in comparison.</param>
            <param name="image2">Second image in comparison.</param>
            <param name="tolerance">Maximum allowable distance between pixels in RGB or Grayscale space.</param>
            <param name="percentOutliersAllowed">Percetange of pixels allowed to be outside tolerance.</param>
            <param name="errorMetrics">Error metrics across all pixels.</param>
            <returns>True if images are considered identical. False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Resize(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image,System.Single,System.Single,Microsoft.Psi.Imaging.SamplingMode)">
            <summary>
            Resizes an image by the specified scale factors using the specified sampling mode.
            </summary>
            <param name="image">Image to resize.</param>
            <param name="destImage">Image to store scaled results.</param>
            <param name="newWidth">Desired output width in pixels.</param>
            <param name="newHeight">Desired output height in pixels.</param>
            <param name="mode">Sampling mode for sampling of pixels.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Resize(Microsoft.Psi.Imaging.Image,System.Int32,System.Int32,Microsoft.Psi.Imaging.SamplingMode)">
            <summary>
            Resize an image.
            </summary>
            <param name="image">Image to resize.</param>
            <param name="finalWidth">Final width of desired output.</param>
            <param name="finalHeight">Final height of desired output.</param>
            <param name="samplingMode">Method for sampling pixels when rescaling.</param>
            <returns>Returns a new image resized to the specified width/height.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Rotate(Microsoft.Psi.Imaging.Image,System.Single,Microsoft.Psi.Imaging.SamplingMode,Microsoft.Psi.Imaging.RotationFitMode)">
            <summary>
            Rotates an image.
            </summary>
            <param name="image">Image to rotate.</param>
            <param name="angleInDegrees">Number of degrees to rotate in counter clockwise direction.</param>
            <param name="mode">Pixel resampling method.</param>
            <param name="fit">Used to describe the fit of the output image. Tight=output image is cropped to match exactly the required size. Loose=output image will be maximum size possible (i.e. length of source image diagonal).</param>
            <returns>Rotated image.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Rotate(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image,System.Single,Microsoft.Psi.Imaging.SamplingMode,Microsoft.Psi.Imaging.RotationFitMode)">
            <summary>
            Rotates an image.
            </summary>
            <param name="image">Image to rotate.</param>
            <param name="destImage">Image where to store rotated source image.</param>
            <param name="angleInDegrees">Number of degrees to rotate in counter clockwise direction.</param>
            <param name="mode">Pixel resampling method.</param>
            <param name="fit">Used to describe the fit of the output image. Tight=output image is cropped to match exactly the required size. Loose=output image will be maximum size possible (i.e. length of source image diagonal).</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Crop(Microsoft.Psi.Imaging.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a copy of the image cropped to the specified dimensions.
            </summary>
            <param name="image">Image to crop.</param>
            <param name="left">The left of the region to crop.</param>
            <param name="top">The top of the region to crop.</param>
            <param name="width">The width of the region to crop.</param>
            <param name="height">The height of the region to crop.</param>
            <returns>The cropped image.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Crop(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a copy of the image cropped to the specified dimensions.
            </summary>
            <param name="image">Image to crop.</param>
            <param name="croppedImage">Destination image that cropped area is copied to.</param>
            <param name="left">The left of the region to crop.</param>
            <param name="top">The top of the region to crop.</param>
            <param name="width">The width of the region to crop.</param>
            <param name="height">The height of the region to crop.</param>
            <returns>The cropped image.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Crop(Microsoft.Psi.Imaging.DepthImage,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a copy of the depth image cropped to the specified dimensions.
            </summary>
            <param name="image">Depth image to crop.</param>
            <param name="left">The left of the region to crop.</param>
            <param name="top">The top of the region to crop.</param>
            <param name="width">The width of the region to crop.</param>
            <param name="height">The height of the region to crop.</param>
            <returns>The cropped depth image.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Crop(Microsoft.Psi.Imaging.DepthImage,Microsoft.Psi.Imaging.DepthImage,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a copy of the image cropped to the specified dimensions.
            </summary>
            <param name="image">Image to crop.</param>
            <param name="croppedImage">Destination image that cropped area is copied to.</param>
            <param name="left">The left of the region to crop.</param>
            <param name="top">The top of the region to crop.</param>
            <param name="width">The width of the region to crop.</param>
            <param name="height">The height of the region to crop.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.PseudoColorize(Microsoft.Psi.Imaging.DepthImage,System.ValueTuple{System.UInt16,System.UInt16},System.Nullable{System.UInt16},System.Boolean)">
            <summary>
            Convert a depth image into a pseudo-colorized image, where more distant pixels are closer to blue, and near pixels are closer to red.
            </summary>
            <param name="depthImage">Depth image to pseudo-colorize.</param>
            <param name="range">A tuple indicating the range (MinValue, MaxValue) of the depth values in the image.</param>
            <param name="invalidValue">Indicates invalid depth values. These values are left black, or set to transparent based on the invalidAsTransparent parameter.</param>
            <param name="invalidAsTransparent">Indicates whether to render invalid values as transparent in the image.</param>
            <returns>The pseudo-colorized image in BGR_24bpp format.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.PseudoColorize(Microsoft.Psi.Imaging.DepthImage,Microsoft.Psi.Imaging.Image,System.ValueTuple{System.UInt16,System.UInt16},System.Nullable{System.UInt16},System.Boolean)">
            <summary>
            Convert a depth image into a pseudo-colorized image, where more distant pixels are closer to blue, and near pixels are closer to red.
            </summary>
            <param name="depthImage">Depth image to pseudo-colorize.</param>
            <param name="colorizedImage">Target color image. Must be in BGRA_32bpp format.</param>
            <param name="range">A tuple indicating the range (MinValue, MaxValue) of the depth values in the image.</param>
            <param name="invalidValue">Indicates invalid depth values. These values are left black, or set to transparent based on the invalidAsTransparent parameter.</param>
            <param name="invalidAsTransparent">Indicates whether to render invalid values as transparent in the image.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.DetermineRotatedWidthHeight(System.Int32,System.Int32,System.Single,Microsoft.Psi.Imaging.RotationFitMode,System.Int32@,System.Int32@,System.Single@,System.Single@)">
            <summary>
            Determines the dimensions of an image after it has been rotated.
            </summary>
            <param name="imageWidth">Width (in pixels) of original image.</param>
            <param name="imageHeight">Height (in pixels) of original image.</param>
            <param name="angleInDegrees">Angle (in degrees) of rotation being applied.</param>
            <param name="fit">Used to describe the fit of the output image. Tight=output image is cropped to match exactly the required size. Loose=output image will be maximum size possible (i.e. length of source image diagonal).</param>
            <param name="rotatedWidth">Outputs the rotated image's width.</param>
            <param name="rotatedHeight">Outputs the rotated image's height.</param>
            <param name="originx">The X coordinate of the origin after rotation (maybe negative).</param>
            <param name="originy">The Y coordinate of the origin after rotation (maybe negative).</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.AverageColor(Microsoft.Psi.Imaging.Image)">
            <summary>
            Determines the average color of an image.
            </summary>
            <param name="image">The image to inspect.</param>
            <returns>A color with the average RGB values of the image.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.AverageColor(Microsoft.Psi.Imaging.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines the average color of a region of an image.
            </summary>
            <param name="image">The image to inspect.</param>
            <param name="left">The left of the region to determine average color for.</param>
            <param name="top">The top of the region to determine average color for.</param>
            <param name="width">The width of the region to determine average color for.</param>
            <param name="height">The height of the region to determine average color for.</param>
            <returns>A color with the average RGB values of the region.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.AverageColorF(Microsoft.Psi.Imaging.Image)">
            <summary>
            Determines the average color of an image.
            </summary>
            <param name="image">The image to inspect.</param>
            <returns>A triple containing the average RGB values of the region, in the range from 0.0 (lowest intensity) to 1.0 (highest intensity).</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.AverageColorF(Microsoft.Psi.Imaging.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines the average color of a region of an image.
            </summary>
            <param name="image">The image to inspect.</param>
            <param name="left">The left of the region to determine average color for.</param>
            <param name="top">The top of the region to determine average color for.</param>
            <param name="width">The width of the region to determine average color for.</param>
            <param name="height">The height of the region to determine average color for.</param>
            <returns>A triple containing the average RGB values of the region, in the range from 0.0 (lowest intensity) to 1.0 (highest intensity).</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.DrawRectangle(Microsoft.Psi.Imaging.Image,System.Drawing.Rectangle,System.Drawing.Color,System.Int32)">
            <summary>
            Draws a rectangle at the specified pixel coordinates on the image.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="rect">Pixel coordinates for rectangle.</param>
            <param name="color">Color to use for drawing.</param>
            <param name="width">Width of line.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.DrawLine(Microsoft.Psi.Imaging.Image,System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Int32)">
            <summary>
            Draws a line from point p0 to p1 in pixel coordinates on the image.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="p0">Pixel coordinates for start of line.</param>
            <param name="p1">Pixel coordinates for end of line.</param>
            <param name="color">Color to use for drawing.</param>
            <param name="width">Width of line.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.DrawCircle(Microsoft.Psi.Imaging.Image,System.Drawing.Point,System.Int32,System.Drawing.Color,System.Int32)">
            <summary>
            Draws a circle centered at the specified pixel (p0) with the specified radius.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="p0">Pixel coordinates for center of circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="color">Color to use for drawing.</param>
            <param name="width">Width of line.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.DrawText(Microsoft.Psi.Imaging.Image,System.String,System.Drawing.Point,System.Drawing.Color,System.String,System.Single)">
            <summary>
            Renders text on the image at the specified pixel (p0).
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="str">Text to render.</param>
            <param name="p0">Pixel coordinates for center of circle.</param>
            <param name="color">Color to use when drawing text. Optional.</param>
            <param name="font">Name of font to use. Optional.</param>
            <param name="fontSize">Size of font. Optional.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.DrawText(Microsoft.Psi.Imaging.Image,System.String,System.Drawing.Point,System.Drawing.Color,System.Drawing.Color,System.String,System.Single)">
            <summary>
            Renders text on the image at the specified pixel (p0).
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="str">Text to render.</param>
            <param name="p0">Pixel coordinates for upper-left corner of the text.</param>
            <param name="backgroundColor">Background color to use when drawing text.</param>
            <param name="textColor">Color to use to draw the text.</param>
            <param name="font">Name of font to use. Optional.</param>
            <param name="fontSize">Size of font. Optional.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.FillRectangle(Microsoft.Psi.Imaging.Image,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Fills a rectangle at the specified pixel coordinates on the image.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="rect">Pixel coordinates for rectangle.</param>
            <param name="color">Color to use for drawing.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.FillCircle(Microsoft.Psi.Imaging.Image,System.Drawing.Point,System.Int32,System.Drawing.Color)">
            <summary>
            Fills a circle centered at the specified pixel (p0) with the specified radius.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="p0">Pixel coordinates for center of circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="color">Color to use for drawing.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.CopyTo(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image)">
            <summary>
            Copies a source image into a destination image using the specified masking image.
            See <see cref="M:Microsoft.Psi.Imaging.Operators.CopyTo(Microsoft.Psi.Imaging.Image,System.Drawing.Rectangle,Microsoft.Psi.Imaging.Image,System.Drawing.Point,Microsoft.Psi.Imaging.Image)"/> for further details.
            </summary>
            <param name="srcImage">Source image.</param>
            <param name="destImage">Destination image.</param>
            <param name="maskImage">Masking image. If null then ignored.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.CopyTo(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image,System.Drawing.Rectangle)">
            <summary>
            Copies a portion of the source image into a destination image.
            See <see cref="M:Microsoft.Psi.Imaging.Operators.CopyTo(Microsoft.Psi.Imaging.Image,System.Drawing.Rectangle,Microsoft.Psi.Imaging.Image,System.Drawing.Point,Microsoft.Psi.Imaging.Image)"/> for further details.
            </summary>
            <param name="srcImage">Source image.</param>
            <param name="destImage">Destination image.</param>
            <param name="rect">Rectangle to copy.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.CopyTo(Microsoft.Psi.Imaging.Image,System.Drawing.Rectangle,Microsoft.Psi.Imaging.Image,System.Drawing.Point)">
            <summary>
            Copies a portion of a source image into a destination image.
            See <see cref="M:Microsoft.Psi.Imaging.Operators.CopyTo(Microsoft.Psi.Imaging.Image,System.Drawing.Rectangle,Microsoft.Psi.Imaging.Image,System.Drawing.Point,Microsoft.Psi.Imaging.Image)"/> for further details.
            </summary>
            <param name="srcImage">Source image.</param>
            <param name="srcRect">Source rectangle to copy from.</param>
            <param name="destImage">Destination image.</param>
            <param name="destTopLeftPoint">Top left corner of destination image where to copy to.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.CopyTo(Microsoft.Psi.Imaging.Image,System.Drawing.Rectangle,Microsoft.Psi.Imaging.Image,System.Drawing.Point,Microsoft.Psi.Imaging.Image)">
             <summary>
             Copies a portion of a source image into a destination image using the specified masking image.
             Only pixels from the 'srcImage' inside the 'srcRect' are copied. If a 'maskImage' is specified
             (it maybe null, in which case no mask is applied) then source pixels are only copied if their
             corresponding mask pixel is > 0. The copied pixels are placed in the 'destImage' at a rectangle
             the same size (potentially clipped by the 'destImage' boundaries) located at 'destTopLeftCorner'.
            
             The following picture may help clarify. In the picture '2' are pixels that are potentially copied
             and 'x' are pixels in the 'maskImage' with values > 0.
            
             \verbatim
                   srcImage                       maskImage                               destImage
                  +-------------------------+   +-------------------------+             +-------------------------+
                  |   srcRect               |   |   (srcRect)             |             |                         |
                  |   +---------+           |   |   ...........           |             |                         |
                  |   |222222222|           |   |   .     xxxx.xxxx       |   CopyTo    |                         |
                  |   |222222222|           | + |   .   xxxxxx.xxxxxx     |  ========>  |       destTopLeftCorner |
                  |   |222222222|           |   |   .  xxxxxxx.xxxxx      |             |           O---------+   |
                  |   +---------+           |   |   ...........           |             |           |     2222|   |
                  |                         |   |                         |             |           |   222222|   |
                  +-------------------------+   +-------------------------+             +-----------+---------+---+
                                                                                 dropped pixels =>  .  xxxxxxx.
                                                                                 due to being       +.........+
                                                                                 outside image
                                                                                 boundary
             \endverbatim
             .
            
             </summary>
             <param name="srcImage">Source image.</param>
             <param name="srcRect">Source rectangle to copy from.</param>
             <param name="destImage">Destination image.</param>
             <param name="destTopLeftCorner">Top left corner of destination image where to copy to.</param>
             <param name="maskImage">Masking image. If null then ignored.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Invert(Microsoft.Psi.Imaging.Image)">
            <summary>
            Inverts each color component in an image.
            </summary>
            <param name="srcImage">Source image to invert.</param>
            <returns>Returns an new image with the inverted results.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Invert(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image)">
            <summary>
            Inverts each color component in an image.
            </summary>
            <param name="srcImage">Source image to invert.</param>
            <param name="destImage">Destination image where to store inverted results.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Clear(Microsoft.Psi.Imaging.Image,System.Drawing.Color)">
            <summary>
            Clears each color component in an image to the specified color.
            </summary>
            <param name="image">Image to clear.</param>
            <param name="clr">Color to clear to.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.ExtractChannel(Microsoft.Psi.Imaging.Image,System.Int32)">
            <summary>
            Extracts a single channel from the image and returns it as a gray scale image.
            </summary>
            <param name="image">Image to extract from.</param>
            <param name="channel">Index of channel to extract from. This should be one of the following: ExtractRedChannel, ExtractGreenChannel, ExtractBlueChannel, or ExtractAlphaChannel.</param>
            <returns>Returns a new grayscale image containing the color from the specified channel in the original source image.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.ExtractChannel(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image,System.Int32)">
            <summary>
            Extracts a single channel from the image and returns it as a gray scale image.
            </summary>
            <param name="image">Image to extract from.</param>
            <param name="destImage">Image to write results to.</param>
            <param name="channel">Index of channel to extract from. This should be one of the following: ExtractRedChannel, ExtractGreenChannel, ExtractBlueChannel, or ExtractAlphaChannel.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Threshold(Microsoft.Psi.Imaging.Image,System.Int32,System.Int32,Microsoft.Psi.Imaging.Threshold)">
            <summary>
            Performs per channel thresholding on the image.
            </summary>
            <param name="image">Image to be thresholded.</param>
            <param name="threshold">Threshold value.</param>
            <param name="maxvalue">Maximum value.</param>
            <param name="type">Type of thresholding to perform.</param>
            <returns>The thresholded image.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Threshold(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image,System.Int32,System.Int32,Microsoft.Psi.Imaging.Threshold)">
            <summary>
            Performs per channel thresholding on the image.
            </summary>
            <param name="srcImage">Image to be thresholded.</param>
            <param name="destImage">Destination image where thresholded results are stored.</param>
            <param name="threshold">Threshold value.</param>
            <param name="maxvalue">Maximum value.</param>
            <param name="type">Type of thresholding to perform.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.AbsDiff(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image)">
            <summary>
            Computes the absolute difference between two images.
            </summary>
            <param name="imageA">First image.</param>
            <param name="imageB">Second image.</param>
            <returns>Difference image.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.AbsDiff(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image)">
            <summary>
            Computes the absolute difference between two images.
            </summary>
            <param name="imageA">First image.</param>
            <param name="imageB">Second image.</param>
            <param name="destImage">Destination image where to store difference image.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.ToDepthImage(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage}})">
            <summary>
            Converts a stream of images into a stream of depth images.
            </summary>
            <param name="source">A producer of images.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedDepthImageAllocator ">Optional image allocator for creating new shared depth image.</param>
            <returns>A corresponding stream of depth images.</returns>
            <remarks>The images in the source stream need to be in <see cref="F:Microsoft.Psi.Imaging.PixelFormat.Gray_16bpp"/> format.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.ToImage(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage}},Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Converts a stream of depth images into a stream of <see cref="F:Microsoft.Psi.Imaging.PixelFormat.Gray_16bpp"/> format images.
            </summary>
            <param name="source">A producer of depth images.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedDepthImageAllocator ">Optional image allocator for creating new shared depth image.</param>
            <returns>A corresponding stream of images.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.ToPixelFormat(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Converts the source image to a different pixel format.
            </summary>
            <param name="source">The source stream.</param>
            <param name="pixelFormat">The pixel format to convert to.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator for creating new shared image.</param>
            <returns>The resulting stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Transform(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},Microsoft.Psi.Imaging.TransformDelegate,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Converts a shared image to a different pixel format using the specified transformer.
            </summary>
            <param name="source">Source image to compress.</param>
            <param name="transformer">Method for converting an image sample.</param>
            <param name="pixelFormat">Pixel format to use for converted image.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator for creating new shared image.</param>
            <returns>Returns a producer that generates the transformed images.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Crop(Microsoft.Psi.IProducer{System.ValueTuple{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image},System.Drawing.Rectangle}},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image},System.Drawing.Rectangle}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Crops a shared depth image using the specified rectangle.
            </summary>
            <param name="source">Source of image and rectangle samples.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>Returns a producer generating new cropped image samples.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Crop(Microsoft.Psi.IProducer{System.ValueTuple{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage},System.Drawing.Rectangle}},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage},System.Drawing.Rectangle}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage}})">
            <summary>
            Crops a shared image using the specified rectangle.
            </summary>
            <param name="source">Source of image and rectangle samples.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedDepthImageAllocator">Optional image allocator to create new shared depth image.</param>
            <returns>Returns a producer generating new cropped image samples.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.PseudoColorize(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage}},System.ValueTuple{System.UInt16,System.UInt16},System.Nullable{System.UInt16},System.Boolean,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Convert a producer of depth images into pseudo-colorized images, where more distant pixels are blue, and closer pixels are reddish.
            </summary>
            <param name="source">Source producer of depth images.</param>
            <param name="range">A tuple indicating the range (MinValue, MaxValue) of the depth values in the image.</param>
            <param name="invalidValue">Indicates invalid depth values. These values are left black, or set to transparent based on the invalidAsTransparent parameter.</param>
            <param name="invalidAsTransparent">Indicates whether to render invalid values as transparent in the image.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared images (in <see cref="F:Microsoft.Psi.Imaging.PixelFormat.BGRA_32bpp"/> format).</param>
            <returns>A producer of pseudo-colorized images.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.ToGray(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Converts a shared image to grayscale.
            </summary>
            <param name="source">Image producer to use as source images.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>Producers of grayscale images.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Resize(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Single,System.Single,Microsoft.Psi.Imaging.SamplingMode,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Resizes a shared image.
            </summary>
            <param name="source">Image to scale.</param>
            <param name="finalWidth">Final width of desired output.</param>
            <param name="finalHeight">Final height of desired output.</param>
            <param name="samplingMode">Method for sampling pixels when rescaling.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>Returns a producer that generates resized images.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Scale(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Single,System.Single,Microsoft.Psi.Imaging.SamplingMode,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Scales a shared by the specified scale factors.
            </summary>
            <param name="source">Image to scale.</param>
            <param name="scaleX">Scale factor for X.</param>
            <param name="scaleY">Scale factor for Y.</param>
            <param name="samplingMode">Method for sampling pixels when rescaling.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>Returns a producer that generates resized images.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Flip(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},Microsoft.Psi.Imaging.FlipMode,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Flips a shared image about the horizontal or vertical axis.
            </summary>
            <param name="source">Image to flip.</param>
            <param name="mode">Axis about which to flip.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>A producer that generates flip images.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Rotate(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Single,Microsoft.Psi.Imaging.SamplingMode,Microsoft.Psi.Imaging.RotationFitMode,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Rotates a shared image by the specified angle.
            </summary>
            <param name="source">Image to rotate.</param>
            <param name="angleInDegrees">Angle for rotation specified in degrees.</param>
            <param name="samplingMode">Sampling mode to use when sampling pixels.</param>
            <param name="fit">Used to describe the fit of the output image. Tight=output image is cropped to match exactly the required size. Loose=output image will be maximum size possible (i.e. length of source image diagonal).</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>Returns a producer that generates rotated images.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.DrawRectangle(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Drawing.Rectangle,System.Drawing.Color,System.Int32,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Draws a rectangle over a shared image.
            </summary>
            <param name="source">Image to draw rectangle on.</param>
            <param name="rect">Pixel coordinates for rectangle.</param>
            <param name="color">Color to use when drawing the rectangle.</param>
            <param name="width">Line width (in pixels) of each side of the rectangle.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>Returns a producer that generates images overdrawn with a rectangle.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.DrawLine(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Int32,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Draws a line over a shared image.
            </summary>
            <param name="source">Image to draw line on.</param>
            <param name="p0">Pixel coordinates for one end of the line.</param>
            <param name="p1">Pixel coordinates for the other end of the line.</param>
            <param name="color">Color to use when drawing the line.</param>
            <param name="width">Line width (in pixels).</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>Returns a producer that generates images overdrawn with a line.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.DrawCircle(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Drawing.Point,System.Int32,System.Drawing.Color,System.Int32,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Draws a circle over a shared image.
            </summary>
            <param name="source">Image to draw circle on.</param>
            <param name="p0">Center of circle (in pixels).</param>
            <param name="radius">Radius of circle (in pixels).</param>
            <param name="color">Color to use when drawing the circle.</param>
            <param name="width">Line width (in pixels).</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>Returns a producer that generates images overdrawn with a circle.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.DrawText(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.String,System.Drawing.Point,System.Drawing.Color,System.String,System.Single,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Draws a piece of text over a shared image.
            </summary>
            <param name="source">Image to draw text on.</param>
            <param name="text">Text to render.</param>
            <param name="p0">Coordinates for start of text (in pixels).</param>
            <param name="color">Color to use while drawing text.</param>
            <param name="font">Name of font to use. Optional.</param>
            <param name="fontSize">Size of font. Optional.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>Returns a producer that generates images overdrawn with text.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.DrawText(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.String,System.Drawing.Point,System.Drawing.Color,System.Drawing.Color,System.String,System.Single,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Draws a piece of text with background over a shared image.
            </summary>
            <param name="source">Image to draw text on.</param>
            <param name="text">Text to render.</param>
            <param name="p0">Coordinates for start of text (in pixels).</param>
            <param name="backgroundColor">Background color to use when drawing text.</param>
            <param name="textColor">Color to use to draw the text.</param>
            <param name="font">Name of font to use. Optional.</param>
            <param name="fontSize">Size of font. Optional.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>Returns a producer that generates images overdrawn with text.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.FillRectangle(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Drawing.Rectangle,System.Drawing.Color,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Fills a rectangle over a shared image.
            </summary>
            <param name="source">Image to draw rectangle on.</param>
            <param name="rect">Pixel coordinates for rectangle.</param>
            <param name="color">Color to use when drawing the rectangle.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>Returns a producer that generates images overdrawn with a rectangle.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.FillCircle(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Drawing.Point,System.Int32,System.Drawing.Color,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Fills a circle over a shared image.
            </summary>
            <param name="source">Image to draw circle on.</param>
            <param name="p0">Center of circle (in pixels).</param>
            <param name="radius">Radius of circle (in pixels).</param>
            <param name="color">Color to use when drawing the circle.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>Returns a producer that generates images overdrawn with a circle.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Invert(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Inverts each color channel in a shared image.
            </summary>
            <param name="source">Images to invert.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>Producer that returns the inverted image.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Clear(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Drawing.Color,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Clears a shared image to the specified color.
            </summary>
            <param name="source">Images to clear.</param>
            <param name="clr">Color to set image to.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>Producer that returns the cleared image.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.ExtractChannel(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Int32,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Extracts a color channel from a shared image. Returned image is of type Gray_8bpp.
            </summary>
            <param name="source">Images to extract channel from.</param>
            <param name="channel">Index of which channel to extract.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>Producer that returns the extracted channel as a gray scale image.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.AbsDiff(Microsoft.Psi.IProducer{System.ValueTuple{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image},Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}}},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image},Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Computes the absolute difference between two images.
            </summary>
            <param name="sources">Images to diff.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>Producer that returns the difference image.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Threshold(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Int32,System.Int32,Microsoft.Psi.Imaging.Threshold,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Thresholds the image. See Threshold for what modes of thresholding are available.
            </summary>
            <param name="image">Images to threshold.</param>
            <param name="threshold">Threshold value.</param>
            <param name="maxvalue">Maximum value.</param>
            <param name="thresholdType">Type of thresholding to perform.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="sharedImageAllocator">Optional image allocator to create new shared image.</param>
            <returns>Producer that returns the difference image.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Encode(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Func{Microsoft.Psi.Pipeline,Microsoft.Psi.Components.IConsumerProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image},Microsoft.Psi.Shared{Microsoft.Psi.Imaging.EncodedImage}}},Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Encodes a shared image using a specified encoder component.
            </summary>
            <param name="source">A producer of images to encode.</param>
            <param name="encoderConstructor">Constructor function that returns an encoder component given a pipeline.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A producer that generates the encoded images.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Encode(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},Microsoft.Psi.Imaging.IImageToStreamEncoder,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Encodes a shared image using a specified image-to-stream encoder.
            </summary>
            <param name="source">A producer of images to encode.</param>
            <param name="encoder">The image-to-stream encoder to use when encoding images.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A producer that generates the encoded images.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Decode(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.EncodedImage}},System.Func{Microsoft.Psi.Pipeline,Microsoft.Psi.Components.IConsumerProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.EncodedImage},Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}}},Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.EncodedImage}})">
            <summary>
            Decodes an encoded image using a specified decoder component.
            </summary>
            <param name="source">A producer of images to decode.</param>
            <param name="decoderConstructor">Constructor function that returns a decoder component given a pipeline.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A producer that generates the decoded images.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Decode(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.EncodedImage}},Microsoft.Psi.Imaging.IImageFromStreamDecoder,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.EncodedImage}})">
            <summary>
            Decodes an encoded image using a specified image-from-stream decoder.
            </summary>
            <param name="source">A producer of images to decode.</param>
            <param name="decoder">The image-from-stream decoder to use when decoding images.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A producer that generates the decoded images.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Encode(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage}},System.Func{Microsoft.Psi.Pipeline,Microsoft.Psi.Components.IConsumerProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage},Microsoft.Psi.Shared{Microsoft.Psi.Imaging.EncodedDepthImage}}},Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage}})">
            <summary>
            Encodes a depth image using a specified encoder component.
            </summary>
            <param name="source">A producer of depth images to encode.</param>
            <param name="encoderConstructor">Constructor function that returns an encoder component given a pipeline.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A producer that generates the encoded depth images.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Encode(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage}},Microsoft.Psi.Imaging.IDepthImageToStreamEncoder,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage}})">
            <summary>
            Encodes a depth image using a specified depth-image-to-stream encoder.
            </summary>
            <param name="source">A producer of depth images to encode.</param>
            <param name="encoder">The depth image encoder to use.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A producer that generates the encoded depth images.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Decode(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.EncodedDepthImage}},System.Func{Microsoft.Psi.Pipeline,Microsoft.Psi.Components.IConsumerProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.EncodedDepthImage},Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage}}},Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.EncodedDepthImage}})">
            <summary>
            Decodes a depth image using a specified decoder component.
            </summary>
            <param name="source">A producer of depth images to decode.</param>
            <param name="decoderConstructor">Constructor function that returns a decoder component given a pipeline.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A producer that generates the decoded depth images.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Decode(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.EncodedDepthImage}},Microsoft.Psi.Imaging.IDepthImageFromStreamDecoder,Microsoft.Psi.DeliveryPolicy{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.EncodedDepthImage}})">
            <summary>
            Decodes a depth image using a specified depth-image-from-stream decoder.
            </summary>
            <param name="source">A producer of depth images to decode.</param>
            <param name="decoder">The depth image decoder to use.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A producer that generates the decoded depth images.</returns>
        </member>
        <member name="T:Microsoft.Psi.Imaging.ImagePool">
            <summary>
            Provides a pool of shared images.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImagePool.GetOrCreate(System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Gets or creates an image from the pool.
            </summary>
            <param name="width">The requested image width.</param>
            <param name="height">The requested image height.</param>
            <param name="pixelFormat">The requested image pixel format.</param>
            <returns>A shared image from the pool.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImagePool.GetOrCreateFromBitmap(System.Drawing.Bitmap)">
            <summary>
            Gets or creates an image from the pool and initializes it with a managed Bitmap object.
            </summary>
            <param name="bitmap">A bitmap from which to copy the image data.</param>
            <returns>A shared image from the pool containing a copy of the image data from <paramref name="bitmap"/>.</returns>
        </member>
        <member name="T:Microsoft.Psi.Imaging.TransformDelegate">
            <summary>
            Defines the delegate used to perform an image transformation.
            </summary>
            <param name="source">Source image to be transformed.</param>
            <param name="destination">Destination for transformed image.</param>
        </member>
        <member name="T:Microsoft.Psi.Imaging.ImageTransformer">
            <summary>
            Component that transforms an image given a specified transformer.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageTransformer.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.Imaging.TransformDelegate,Microsoft.Psi.Imaging.PixelFormat,System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.ImageTransformer"/> class.
            </summary>
            <param name="pipeline">The pipeline to add the component to.</param>
            <param name="transformer">Function for transforming the source image.</param>
            <param name="pixelFormat">Pixel format for destination image.</param>
            <param name="sharedImageAllocator ">Optional image allocator for creating new shared image.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageTransformer.Receive(Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image},Microsoft.Psi.Envelope)">
            <summary>
            Pipeline callback for processing this component.
            </summary>
            <param name="sharedImage">Image to transform.</param>
            <param name="e">Pipeline sample information.</param>
        </member>
        <member name="T:Microsoft.Psi.Imaging.PixelFormat">
            <summary>
            Defines the various pixel formats supported by the <see cref="T:Microsoft.Psi.Imaging.Image"/> type.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.PixelFormat.Undefined">
            <summary>
            Used when the pixel format isn't defined.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.PixelFormat.Gray_8bpp">
            <summary>
            Defines an grayscale image where each pixel is 8 bits.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.PixelFormat.Gray_16bpp">
            <summary>
            Defines an grayscale image where each pixel is 16 bits.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.PixelFormat.BGR_24bpp">
            <summary>
            Defines an color image format where each red/green/blue component is 8 bits.
            The byte order in memory is: bb gg rr.
            </summary>
            <remarks>
            Not to be confused with <see cref="F:Microsoft.Psi.Imaging.PixelFormat.RGB_24bpp"/> whose byte order is: rr gg bb.
            </remarks>
        </member>
        <member name="F:Microsoft.Psi.Imaging.PixelFormat.BGRX_32bpp">
            <summary>
            Defines an color image format where each red/green/blue component is 8 bits.
            The byte order in memory is: bb gg rr xx.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.PixelFormat.BGRA_32bpp">
            <summary>
            Defines an color image format where each red/green/blue/alpha component is 8 bits.
            The byte order in memory is: bb gg rr aa.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.PixelFormat.RGBA_64bpp">
            <summary>
            Defines an color image format where each red/green/blue/alpha component is 16 bits.
            The byte order in memory is: rrrr gggg bbbb aaaa.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.PixelFormat.RGB_24bpp">
            <summary>
            Defines an color image format where each red/green/blue component is 8 bits.
            The byte order in memory is: rr gg bb.
            </summary>
            <remarks>
            Not to be confused with <see cref="F:Microsoft.Psi.Imaging.PixelFormat.BGR_24bpp"/> whose byte order is: bb gg rr.
            </remarks>
        </member>
        <member name="T:Microsoft.Psi.Imaging.PixelFormatExtensions">
            <summary>
            Defines a set of extensions for getting info about a PixelFormat.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.PixelFormatExtensions.GetBitsPerPixel(Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Returns the number of bits per pixel for a given pixel format.
            </summary>
            <param name="pixelFormat">Pixel format for which to find bits per pixel.</param>
            <returns>Number of bits per pixel for the given pixel format.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.PixelFormatExtensions.GetBytesPerPixel(Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Returns the number of bytes per pixel for a given pixel format.
            </summary>
            <param name="pixelFormat">Pixel format for which to find bytes per pixel.</param>
            <returns>Number of bytes per pixel for the given pixel format.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.PixelFormatExtensions.GetBitsPerChannel(Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Returns the number of bits per channel (bit depth) for a given pixel format.
            </summary>
            <param name="pixelFormat">Pixel format for which to find bits per channel.</param>
            <returns>Number of bits per channel for the given pixel format.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.PixelFormatExtensions.ToPsiPixelFormat(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Returns the <see cref="N:Microsoft.Psi.Imaging"/> pixel format correspond to the specified <see cref="N:System.Drawing.Imaging"/> pixel format.
            </summary>
            <param name="pixelFormat">The <see cref="N:System.Drawing.Imaging"/> pixel format.</param>
            <returns>The corresponding <see cref="N:Microsoft.Psi.Imaging"/> pixel format.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.PixelFormatExtensions.ToSystemPixelFormat(Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Returns the <see cref="N:System.Drawing.Imaging"/> pixel format correspond to the specified <see cref="N:Microsoft.Psi.Imaging"/> pixel format.
            </summary>
            <param name="pixelFormat">The <see cref="N:Microsoft.Psi.Imaging"/> pixel format.</param>
            <returns>The corresponding <see cref="N:System.Drawing.Imaging"/> pixel format.</returns>
        </member>
        <member name="T:Microsoft.Psi.Imaging.PixelFormatHelper">
            <summary>
            Set of static functions for manipulating pixel formats.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.PixelFormatHelper.FromSystemPixelFormat(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Converts from a system pixel format into a Psi.Imaging pixel format.
            </summary>
            <param name="pixelFormat">System pixel format to be converted.</param>
            <returns>Psi.Imaging pixel format that matches the specified system pixel format.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.PixelFormatHelper.ToSystemPixelFormat(Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Converts from a Psi.Imaging PixelFormat to a System.Drawing.Imaging.PixelFormat.
            </summary>
            <param name="pixelFormat">Pixel format to convert.</param>
            <returns>The system pixel format that corresponds to the Psi.Imaging pixel format.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.PixelFormatHelper.GetBytesPerPixel(Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Returns number of bytes/pixel for the specified pixel format.
            </summary>
            <param name="pixelFormat">Pixel format for which to determine number of bytes.</param>
            <returns>
            Number of bytes in each pixel of the specified format. If the pixel format is undefined,
            this method returns 0.
            </returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.PixelFormatHelper.GetBitsPerChannel(Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Returns number of bits per channel (the bit depth) for the specified pixel format.
            </summary>
            <param name="pixelFormat">Pixel format for which to determine the bits per channel.</param>
            <returns>
            Number of bits per channel for the specified format. If the pixel format is undefined,
            this method returns 0.
            </returns>
        </member>
        <member name="T:Microsoft.Psi.Imaging.ToPixelFormat">
            <summary>
            Pipeline component that converts an shared Image to a different format.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ToPixelFormat.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.Imaging.PixelFormat,System.Func{System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.ToPixelFormat"/> class.
            </summary>
            <param name="pipeline">The pipeline.</param>
            <param name="pixelFormat">The pixel format to convert to.</param>
            <param name="sharedImageAllocator ">Optional image allocator for creating new shared image.</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ToPixelFormat.Receive(Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image},Microsoft.Psi.Envelope)">
            <summary>
            Receiver for incoming image.
            </summary>
            <param name="sharedImage">The incoming image.</param>
            <param name="e">The message envelope for the incoming image.</param>
        </member>
    </members>
</doc>
